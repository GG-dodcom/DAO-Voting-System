{
  "version": 3,
  "sources": ["../../viem/utils/promise/withDedupe.ts", "../../viem/utils/wait.ts", "../../viem/utils/promise/withRetry.ts", "../../viem/utils/buildRequest.ts", "../../viem/utils/uid.ts", "../../viem/clients/transports/createTransport.ts", "../../viem/clients/transports/custom.ts", "../../viem/errors/transport.ts", "../../viem/utils/promise/withTimeout.ts", "../../viem/utils/rpc/id.ts", "../../viem/utils/rpc/http.ts", "../../viem/clients/transports/http.ts", "../../viem/utils/rpc/socket.ts", "../../viem/utils/rpc/webSocket.ts", "../../viem/utils/rpc/compat.ts", "../../viem/clients/transports/webSocket.ts", "../../viem/errors/log.ts", "../../viem/utils/abi/encodeEventTopics.ts", "../../viem/utils/filters/createFilterRequestScope.ts", "../../viem/actions/public/createContractEventFilter.ts", "../../viem/utils/errors/getContractError.ts", "../../viem/actions/public/estimateContractGas.ts", "../../viem/utils/abi/decodeEventLog.ts", "../../viem/utils/abi/parseEventLogs.ts", "../../viem/actions/public/getLogs.ts", "../../viem/actions/public/getContractEvents.ts", "../../viem/actions/public/readContract.ts", "../../viem/actions/public/simulateContract.ts", "../../viem/utils/observe.ts", "../../viem/utils/poll.ts", "../../viem/utils/promise/withCache.ts", "../../viem/actions/public/getBlockNumber.ts", "../../viem/actions/public/getFilterChanges.ts", "../../viem/actions/public/uninstallFilter.ts", "../../viem/actions/public/watchContractEvent.ts", "../../viem/utils/errors/getTransactionError.ts", "../../viem/actions/wallet/sendRawTransaction.ts", "../../viem/actions/wallet/sendTransaction.ts", "../../viem/actions/wallet/writeContract.ts", "../../viem/errors/eip712.ts", "../../viem/actions/public/getEip712Domain.ts", "../../viem/actions/wallet/addChain.ts", "../../viem/clients/createClient.ts", "../../viem/clients/transports/fallback.ts", "../../viem/utils/ens/errors.ts", "../../viem/utils/ens/encodedLabelToLabelhash.ts", "../../viem/utils/ens/namehash.ts", "../../viem/utils/ens/encodeLabelhash.ts", "../../viem/utils/ens/labelhash.ts", "../../viem/utils/ens/packetToBytes.ts", "../../viem/actions/ens/getEnsAddress.ts", "../../viem/errors/ens.ts", "../../viem/utils/ens/avatar/utils.ts", "../../viem/utils/ens/avatar/parseAvatarRecord.ts", "../../viem/actions/ens/getEnsText.ts", "../../viem/actions/ens/getEnsAvatar.ts", "../../viem/actions/ens/getEnsName.ts", "../../viem/actions/ens/getEnsResolver.ts", "../../viem/actions/public/createBlockFilter.ts", "../../viem/actions/public/createEventFilter.ts", "../../viem/actions/public/createPendingTransactionFilter.ts", "../../viem/actions/public/getBlobBaseFee.ts", "../../viem/actions/public/getBlockTransactionCount.ts", "../../viem/actions/public/getCode.ts", "../../viem/utils/formatters/feeHistory.ts", "../../viem/actions/public/getFeeHistory.ts", "../../viem/actions/public/getFilterLogs.ts", "../../viem/utils/regex.ts", "../../viem/utils/signature/hashTypedData.ts", "../../viem/utils/typedData.ts", "../../@noble/hashes/src/ripemd160.ts", "../../viem/constants/strings.ts", "../../viem/utils/signature/toPrefixedMessage.ts", "../../viem/utils/signature/hashMessage.ts", "../../viem/constants/bytes.ts", "../../viem/utils/signature/isErc6492Signature.ts", "../../viem/utils/signature/serializeErc6492Signature.ts", "../../viem/errors/unit.ts", "../../viem/utils/unit/parseUnits.ts", "../../viem/utils/nonceManager.ts", "../../viem/utils/formatters/proof.ts", "../../viem/actions/public/getProof.ts", "../../viem/actions/public/getStorageAt.ts", "../../viem/actions/public/getTransaction.ts", "../../viem/actions/public/getTransactionConfirmations.ts", "../../viem/actions/public/getTransactionReceipt.ts", "../../viem/actions/public/multicall.ts", "../../viem/utils/data/isBytesEqual.ts", "../../viem/utils/signature/serializeSignature.ts", "../../viem/actions/public/verifyHash.ts", "../../viem/actions/public/verifyMessage.ts", "../../viem/actions/public/verifyTypedData.ts", "../../viem/actions/public/watchBlockNumber.ts", "../../viem/actions/public/waitForTransactionReceipt.ts", "../../viem/actions/public/watchBlocks.ts", "../../viem/actions/public/watchEvent.ts", "../../viem/actions/public/watchPendingTransactions.ts", "../../viem/utils/siwe/parseSiweMessage.ts", "../../viem/utils/siwe/validateSiweMessage.ts", "../../viem/actions/siwe/verifySiweMessage.ts", "../../viem/clients/decorators/public.ts", "../../viem/actions/wallet/deployContract.ts", "../../viem/actions/wallet/getAddresses.ts", "../../viem/actions/wallet/getPermissions.ts", "../../viem/actions/wallet/requestAddresses.ts", "../../viem/actions/wallet/requestPermissions.ts", "../../viem/actions/wallet/signMessage.ts", "../../viem/actions/wallet/signTransaction.ts", "../../viem/actions/wallet/signTypedData.ts", "../../viem/actions/wallet/switchChain.ts", "../../viem/actions/wallet/watchAsset.ts", "../../viem/clients/decorators/wallet.ts"],
  "sourcesContent": ["import { LruMap } from '../lru.js'\r\n\r\n/** @internal */\r\nexport const promiseCache = /*#__PURE__*/ new LruMap<Promise<any>>(8192)\r\n\r\ntype WithDedupeOptions = {\r\n  enabled?: boolean | undefined\r\n  id?: string | undefined\r\n}\r\n\r\n/** Deduplicates in-flight promises. */\r\nexport function withDedupe<data>(\r\n  fn: () => Promise<data>,\r\n  { enabled = true, id }: WithDedupeOptions,\r\n): Promise<data> {\r\n  if (!enabled || !id) return fn()\r\n  if (promiseCache.get(id)) return promiseCache.get(id)!\r\n  const promise = fn().finally(() => promiseCache.delete(id))\r\n  promiseCache.set(id, promise)\r\n  return promise\r\n}\r\n", "export async function wait(time: number) {\r\n  return new Promise((res) => setTimeout(res, time))\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport { wait } from '../wait.js'\r\n\r\nexport type WithRetryParameters = {\r\n  // The delay (in ms) between retries.\r\n  delay?:\r\n    | ((config: { count: number; error: Error }) => number)\r\n    | number\r\n    | undefined\r\n  // The max number of times to retry.\r\n  retryCount?: number | undefined\r\n  // Whether or not to retry when an error is thrown.\r\n  shouldRetry?:\r\n    | (({\r\n        count,\r\n        error,\r\n      }: {\r\n        count: number\r\n        error: Error\r\n      }) => Promise<boolean> | boolean)\r\n    | undefined\r\n}\r\n\r\nexport type WithRetryErrorType = ErrorType\r\n\r\nexport function withRetry<data>(\r\n  fn: () => Promise<data>,\r\n  {\r\n    delay: delay_ = 100,\r\n    retryCount = 2,\r\n    shouldRetry = () => true,\r\n  }: WithRetryParameters = {},\r\n) {\r\n  return new Promise<data>((resolve, reject) => {\r\n    const attemptRetry = async ({ count = 0 } = {}) => {\r\n      const retry = async ({ error }: { error: Error }) => {\r\n        const delay =\r\n          typeof delay_ === 'function' ? delay_({ count, error }) : delay_\r\n        if (delay) await wait(delay)\r\n        attemptRetry({ count: count + 1 })\r\n      }\r\n\r\n      try {\r\n        const data = await fn()\r\n        resolve(data)\r\n      } catch (err) {\r\n        if (\r\n          count < retryCount &&\r\n          (await shouldRetry({ count, error: err as Error }))\r\n        )\r\n          return retry({ error: err as Error })\r\n        reject(err)\r\n      }\r\n    }\r\n    attemptRetry()\r\n  })\r\n}\r\n", "import { BaseError } from '../errors/base.js'\r\nimport {\r\n  HttpRequestError,\r\n  type HttpRequestErrorType,\r\n  type RpcRequestErrorType,\r\n  type TimeoutErrorType,\r\n  type WebSocketRequestErrorType,\r\n} from '../errors/request.js'\r\nimport {\r\n  ChainDisconnectedError,\r\n  type ChainDisconnectedErrorType,\r\n  InternalRpcError,\r\n  type InternalRpcErrorType,\r\n  InvalidInputRpcError,\r\n  type InvalidInputRpcErrorType,\r\n  InvalidParamsRpcError,\r\n  type InvalidParamsRpcErrorType,\r\n  InvalidRequestRpcError,\r\n  type InvalidRequestRpcErrorType,\r\n  JsonRpcVersionUnsupportedError,\r\n  type JsonRpcVersionUnsupportedErrorType,\r\n  LimitExceededRpcError,\r\n  type LimitExceededRpcErrorType,\r\n  MethodNotFoundRpcError,\r\n  type MethodNotFoundRpcErrorType,\r\n  MethodNotSupportedRpcError,\r\n  type MethodNotSupportedRpcErrorType,\r\n  ParseRpcError,\r\n  type ParseRpcErrorType,\r\n  ProviderDisconnectedError,\r\n  type ProviderDisconnectedErrorType,\r\n  type ProviderRpcErrorCode,\r\n  ResourceNotFoundRpcError,\r\n  type ResourceNotFoundRpcErrorType,\r\n  ResourceUnavailableRpcError,\r\n  type ResourceUnavailableRpcErrorType,\r\n  type RpcError,\r\n  type RpcErrorCode,\r\n  type RpcErrorType,\r\n  SwitchChainError,\r\n  type SwitchChainErrorType,\r\n  TransactionRejectedRpcError,\r\n  type TransactionRejectedRpcErrorType,\r\n  UnauthorizedProviderError,\r\n  type UnauthorizedProviderErrorType,\r\n  UnknownRpcError,\r\n  type UnknownRpcErrorType,\r\n  UnsupportedProviderMethodError,\r\n  type UnsupportedProviderMethodErrorType,\r\n  UserRejectedRequestError,\r\n  type UserRejectedRequestErrorType,\r\n} from '../errors/rpc.js'\r\nimport type { ErrorType } from '../errors/utils.js'\r\nimport type {\r\n  EIP1193RequestFn,\r\n  EIP1193RequestOptions,\r\n} from '../types/eip1193.js'\r\nimport { stringToHex } from './encoding/toHex.js'\r\nimport { keccak256 } from './hash/keccak256.js'\r\nimport type { CreateBatchSchedulerErrorType } from './promise/createBatchScheduler.js'\r\nimport { withDedupe } from './promise/withDedupe.js'\r\nimport { type WithRetryErrorType, withRetry } from './promise/withRetry.js'\r\nimport type { GetSocketRpcClientErrorType } from './rpc/socket.js'\r\nimport { stringify } from './stringify.js'\r\n\r\nexport type RequestErrorType =\r\n  | ChainDisconnectedErrorType\r\n  | CreateBatchSchedulerErrorType\r\n  | HttpRequestErrorType\r\n  | InternalRpcErrorType\r\n  | InvalidInputRpcErrorType\r\n  | InvalidParamsRpcErrorType\r\n  | InvalidRequestRpcErrorType\r\n  | GetSocketRpcClientErrorType\r\n  | JsonRpcVersionUnsupportedErrorType\r\n  | LimitExceededRpcErrorType\r\n  | MethodNotFoundRpcErrorType\r\n  | MethodNotSupportedRpcErrorType\r\n  | ParseRpcErrorType\r\n  | ProviderDisconnectedErrorType\r\n  | ResourceNotFoundRpcErrorType\r\n  | ResourceUnavailableRpcErrorType\r\n  | RpcErrorType\r\n  | RpcRequestErrorType\r\n  | SwitchChainErrorType\r\n  | TimeoutErrorType\r\n  | TransactionRejectedRpcErrorType\r\n  | UnauthorizedProviderErrorType\r\n  | UnknownRpcErrorType\r\n  | UnsupportedProviderMethodErrorType\r\n  | UserRejectedRequestErrorType\r\n  | WebSocketRequestErrorType\r\n  | WithRetryErrorType\r\n  | ErrorType\r\n\r\nexport function buildRequest<request extends (args: any) => Promise<any>>(\r\n  request: request,\r\n  options: EIP1193RequestOptions = {},\r\n): EIP1193RequestFn {\r\n  return async (args, overrideOptions = {}) => {\r\n    const {\r\n      dedupe = false,\r\n      retryDelay = 150,\r\n      retryCount = 3,\r\n      uid,\r\n    } = {\r\n      ...options,\r\n      ...overrideOptions,\r\n    }\r\n    const requestId = dedupe\r\n      ? keccak256(stringToHex(`${uid}.${stringify(args)}`))\r\n      : undefined\r\n    return withDedupe(\r\n      () =>\r\n        withRetry(\r\n          async () => {\r\n            try {\r\n              return await request(args)\r\n            } catch (err_) {\r\n              const err = err_ as unknown as RpcError<\r\n                RpcErrorCode | ProviderRpcErrorCode\r\n              >\r\n              switch (err.code) {\r\n                // -32700\r\n                case ParseRpcError.code:\r\n                  throw new ParseRpcError(err)\r\n                // -32600\r\n                case InvalidRequestRpcError.code:\r\n                  throw new InvalidRequestRpcError(err)\r\n                // -32601\r\n                case MethodNotFoundRpcError.code:\r\n                  throw new MethodNotFoundRpcError(err, { method: args.method })\r\n                // -32602\r\n                case InvalidParamsRpcError.code:\r\n                  throw new InvalidParamsRpcError(err)\r\n                // -32603\r\n                case InternalRpcError.code:\r\n                  throw new InternalRpcError(err)\r\n                // -32000\r\n                case InvalidInputRpcError.code:\r\n                  throw new InvalidInputRpcError(err)\r\n                // -32001\r\n                case ResourceNotFoundRpcError.code:\r\n                  throw new ResourceNotFoundRpcError(err)\r\n                // -32002\r\n                case ResourceUnavailableRpcError.code:\r\n                  throw new ResourceUnavailableRpcError(err)\r\n                // -32003\r\n                case TransactionRejectedRpcError.code:\r\n                  throw new TransactionRejectedRpcError(err)\r\n                // -32004\r\n                case MethodNotSupportedRpcError.code:\r\n                  throw new MethodNotSupportedRpcError(err, {\r\n                    method: args.method,\r\n                  })\r\n                // -32005\r\n                case LimitExceededRpcError.code:\r\n                  throw new LimitExceededRpcError(err)\r\n                // -32006\r\n                case JsonRpcVersionUnsupportedError.code:\r\n                  throw new JsonRpcVersionUnsupportedError(err)\r\n                // 4001\r\n                case UserRejectedRequestError.code:\r\n                  throw new UserRejectedRequestError(err)\r\n                // 4100\r\n                case UnauthorizedProviderError.code:\r\n                  throw new UnauthorizedProviderError(err)\r\n                // 4200\r\n                case UnsupportedProviderMethodError.code:\r\n                  throw new UnsupportedProviderMethodError(err)\r\n                // 4900\r\n                case ProviderDisconnectedError.code:\r\n                  throw new ProviderDisconnectedError(err)\r\n                // 4901\r\n                case ChainDisconnectedError.code:\r\n                  throw new ChainDisconnectedError(err)\r\n                // 4902\r\n                case SwitchChainError.code:\r\n                  throw new SwitchChainError(err)\r\n                // CAIP-25: User Rejected Error\r\n                // https://docs.walletconnect.com/2.0/specs/clients/sign/error-codes#rejected-caip-25\r\n                case 5000:\r\n                  throw new UserRejectedRequestError(err)\r\n                default:\r\n                  if (err_ instanceof BaseError) throw err_\r\n                  throw new UnknownRpcError(err as Error)\r\n              }\r\n            }\r\n          },\r\n          {\r\n            delay: ({ count, error }) => {\r\n              // If we find a Retry-After header, let's retry after the given time.\r\n              if (error && error instanceof HttpRequestError) {\r\n                const retryAfter = error?.headers?.get('Retry-After')\r\n                if (retryAfter?.match(/\\d/))\r\n                  return Number.parseInt(retryAfter) * 1000\r\n              }\r\n\r\n              // Otherwise, let's retry with an exponential backoff.\r\n              return ~~(1 << count) * retryDelay\r\n            },\r\n            retryCount,\r\n            shouldRetry: ({ error }) => shouldRetry(error),\r\n          },\r\n        ),\r\n      { enabled: dedupe, id: requestId },\r\n    )\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport function shouldRetry(error: Error) {\r\n  if ('code' in error && typeof error.code === 'number') {\r\n    if (error.code === -1) return true // Unknown error\r\n    if (error.code === LimitExceededRpcError.code) return true\r\n    if (error.code === InternalRpcError.code) return true\r\n    return false\r\n  }\r\n  if (error instanceof HttpRequestError && error.status) {\r\n    // Forbidden\r\n    if (error.status === 403) return true\r\n    // Request Timeout\r\n    if (error.status === 408) return true\r\n    // Request Entity Too Large\r\n    if (error.status === 413) return true\r\n    // Too Many Requests\r\n    if (error.status === 429) return true\r\n    // Internal Server Error\r\n    if (error.status === 500) return true\r\n    // Bad Gateway\r\n    if (error.status === 502) return true\r\n    // Service Unavailable\r\n    if (error.status === 503) return true\r\n    // Gateway Timeout\r\n    if (error.status === 504) return true\r\n    return false\r\n  }\r\n  return true\r\n}\r\n", "const size = 256\r\nlet index = size\r\nlet buffer: string\r\n\r\nexport function uid(length = 11) {\r\n  if (!buffer || index + length > size * 2) {\r\n    buffer = ''\r\n    index = 0\r\n    for (let i = 0; i < size; i++) {\r\n      buffer += ((256 + Math.random() * 256) | 0).toString(16).substring(1)\r\n    }\r\n  }\r\n  return buffer.substring(index, index++ + length)\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { EIP1193RequestFn } from '../../types/eip1193.js'\r\nimport { buildRequest } from '../../utils/buildRequest.js'\r\nimport { uid as uid_ } from '../../utils/uid.js'\r\nimport type { ClientConfig } from '../createClient.js'\r\n\r\nexport type TransportConfig<\r\n  type extends string = string,\r\n  eip1193RequestFn extends EIP1193RequestFn = EIP1193RequestFn,\r\n> = {\r\n  /** The name of the transport. */\r\n  name: string\r\n  /** The key of the transport. */\r\n  key: string\r\n  /** The JSON-RPC request function that matches the EIP-1193 request spec. */\r\n  request: eip1193RequestFn\r\n  /** The base delay (in ms) between retries. */\r\n  retryDelay?: number | undefined\r\n  /** The max number of times to retry. */\r\n  retryCount?: number | undefined\r\n  /** The timeout (in ms) for requests. */\r\n  timeout?: number | undefined\r\n  /** The type of the transport. */\r\n  type: type\r\n}\r\n\r\nexport type Transport<\r\n  type extends string = string,\r\n  rpcAttributes = Record<string, any>,\r\n  eip1193RequestFn extends EIP1193RequestFn = EIP1193RequestFn,\r\n> = <chain extends Chain | undefined = Chain>({\r\n  chain,\r\n}: {\r\n  chain?: chain | undefined\r\n  pollingInterval?: ClientConfig['pollingInterval'] | undefined\r\n  retryCount?: TransportConfig['retryCount'] | undefined\r\n  timeout?: TransportConfig['timeout'] | undefined\r\n}) => {\r\n  config: TransportConfig<type>\r\n  request: eip1193RequestFn\r\n  value?: rpcAttributes | undefined\r\n}\r\n\r\nexport type CreateTransportErrorType = ErrorType\r\n\r\n/**\r\n * @description Creates an transport intended to be used with a client.\r\n */\r\nexport function createTransport<\r\n  type extends string,\r\n  rpcAttributes extends Record<string, any>,\r\n>(\r\n  {\r\n    key,\r\n    name,\r\n    request,\r\n    retryCount = 3,\r\n    retryDelay = 150,\r\n    timeout,\r\n    type,\r\n  }: TransportConfig<type>,\r\n  value?: rpcAttributes | undefined,\r\n): ReturnType<Transport<type, rpcAttributes>> {\r\n  const uid = uid_()\r\n  return {\r\n    config: {\r\n      key,\r\n      name,\r\n      request,\r\n      retryCount,\r\n      retryDelay,\r\n      timeout,\r\n      type,\r\n    },\r\n    request: buildRequest(request, { retryCount, retryDelay, uid }),\r\n    value,\r\n  }\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport {\r\n  type CreateTransportErrorType,\r\n  type Transport,\r\n  type TransportConfig,\r\n  createTransport,\r\n} from './createTransport.js'\r\n\r\ntype EthereumProvider = { request(...args: any): Promise<any> }\r\n\r\nexport type CustomTransportConfig = {\r\n  /** The key of the transport. */\r\n  key?: TransportConfig['key'] | undefined\r\n  /** The name of the transport. */\r\n  name?: TransportConfig['name'] | undefined\r\n  /** The max number of times to retry. */\r\n  retryCount?: TransportConfig['retryCount'] | undefined\r\n  /** The base delay (in ms) between retries. */\r\n  retryDelay?: TransportConfig['retryDelay'] | undefined\r\n}\r\n\r\nexport type CustomTransport = Transport<\r\n  'custom',\r\n  {},\r\n  EthereumProvider['request']\r\n>\r\n\r\nexport type CustomTransportErrorType = CreateTransportErrorType | ErrorType\r\n\r\n/**\r\n * @description Creates a custom transport given an EIP-1193 compliant `request` attribute.\r\n */\r\nexport function custom<provider extends EthereumProvider>(\r\n  provider: provider,\r\n  config: CustomTransportConfig = {},\r\n): CustomTransport {\r\n  const { key = 'custom', name = 'Custom Provider', retryDelay } = config\r\n  return ({ retryCount: defaultRetryCount }) =>\r\n    createTransport({\r\n      key,\r\n      name,\r\n      request: provider.request.bind(provider),\r\n      retryCount: config.retryCount ?? defaultRetryCount,\r\n      retryDelay,\r\n      type: 'custom',\r\n    })\r\n}\r\n", "import { BaseError } from './base.js'\r\n\r\nexport type UrlRequiredErrorType = UrlRequiredError & {\r\n  name: 'UrlRequiredError'\r\n}\r\nexport class UrlRequiredError extends BaseError {\r\n  constructor() {\r\n    super(\r\n      'No URL was provided to the Transport. Please provide a valid RPC URL to the Transport.',\r\n      {\r\n        docsPath: '/docs/clients/intro',\r\n        name: 'UrlRequiredError',\r\n      },\r\n    )\r\n  }\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\n\r\nexport type WithTimeoutErrorType = ErrorType\r\n\r\nexport function withTimeout<data>(\r\n  fn: ({\r\n    signal,\r\n  }: { signal: AbortController['signal'] | null }) => Promise<data>,\r\n  {\r\n    errorInstance = new Error('timed out'),\r\n    timeout,\r\n    signal,\r\n  }: {\r\n    // The error instance to throw when the timeout is reached.\r\n    errorInstance?: Error | undefined\r\n    // The timeout (in ms).\r\n    timeout: number\r\n    // Whether or not the timeout should use an abort signal.\r\n    signal?: boolean | undefined\r\n  },\r\n): Promise<data> {\r\n  return new Promise((resolve, reject) => {\r\n    ;(async () => {\r\n      let timeoutId!: NodeJS.Timeout\r\n      try {\r\n        const controller = new AbortController()\r\n        if (timeout > 0) {\r\n          timeoutId = setTimeout(() => {\r\n            if (signal) {\r\n              controller.abort()\r\n            } else {\r\n              reject(errorInstance)\r\n            }\r\n          }, timeout) as NodeJS.Timeout // need to cast because bun globals.d.ts overrides @types/node\r\n        }\r\n        resolve(await fn({ signal: controller?.signal || null }))\r\n      } catch (err) {\r\n        if ((err as Error)?.name === 'AbortError') reject(errorInstance)\r\n        reject(err)\r\n      } finally {\r\n        clearTimeout(timeoutId)\r\n      }\r\n    })()\r\n  })\r\n}\r\n", "function createIdStore() {\r\n  return {\r\n    current: 0,\r\n    take() {\r\n      return this.current++\r\n    },\r\n    reset() {\r\n      this.current = 0\r\n    },\r\n  }\r\n}\r\n\r\nexport const idCache = /*#__PURE__*/ createIdStore()\r\n", "import {\r\n  HttpRequestError,\r\n  type HttpRequestErrorType as HttpRequestErrorType_,\r\n  TimeoutError,\r\n  type TimeoutErrorType,\r\n} from '../../errors/request.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { RpcRequest, RpcResponse } from '../../types/rpc.js'\r\nimport {\r\n  type WithTimeoutErrorType,\r\n  withTimeout,\r\n} from '../promise/withTimeout.js'\r\nimport { stringify } from '../stringify.js'\r\nimport { idCache } from './id.js'\r\n\r\nexport type HttpRpcClientOptions = {\r\n  /** Request configuration to pass to `fetch`. */\r\n  fetchOptions?: Omit<RequestInit, 'body'> | undefined\r\n  /** A callback to handle the request. */\r\n  onRequest?: ((request: Request) => Promise<void> | void) | undefined\r\n  /** A callback to handle the response. */\r\n  onResponse?: ((response: Response) => Promise<void> | void) | undefined\r\n  /** The timeout (in ms) for the request. */\r\n  timeout?: number | undefined\r\n}\r\n\r\nexport type HttpRequestParameters<\r\n  body extends RpcRequest | RpcRequest[] = RpcRequest,\r\n> = {\r\n  /** The RPC request body. */\r\n  body: body\r\n  /** Request configuration to pass to `fetch`. */\r\n  fetchOptions?: HttpRpcClientOptions['fetchOptions'] | undefined\r\n  /** A callback to handle the response. */\r\n  onRequest?: ((request: Request) => Promise<void> | void) | undefined\r\n  /** A callback to handle the response. */\r\n  onResponse?: ((response: Response) => Promise<void> | void) | undefined\r\n  /** The timeout (in ms) for the request. */\r\n  timeout?: HttpRpcClientOptions['timeout'] | undefined\r\n}\r\n\r\nexport type HttpRequestReturnType<\r\n  body extends RpcRequest | RpcRequest[] = RpcRequest,\r\n> = body extends RpcRequest[] ? RpcResponse[] : RpcResponse\r\n\r\nexport type HttpRequestErrorType =\r\n  | HttpRequestErrorType_\r\n  | TimeoutErrorType\r\n  | WithTimeoutErrorType\r\n  | ErrorType\r\n\r\nexport type HttpRpcClient = {\r\n  request<body extends RpcRequest | RpcRequest[]>(\r\n    params: HttpRequestParameters<body>,\r\n  ): Promise<HttpRequestReturnType<body>>\r\n}\r\n\r\nexport function getHttpRpcClient(\r\n  url: string,\r\n  options: HttpRpcClientOptions = {},\r\n): HttpRpcClient {\r\n  return {\r\n    async request(params) {\r\n      const {\r\n        body,\r\n        onRequest = options.onRequest,\r\n        onResponse = options.onResponse,\r\n        timeout = options.timeout ?? 10_000,\r\n      } = params\r\n\r\n      const fetchOptions = {\r\n        ...(options.fetchOptions ?? {}),\r\n        ...(params.fetchOptions ?? {}),\r\n      }\r\n\r\n      const { headers, method, signal: signal_ } = fetchOptions\r\n\r\n      try {\r\n        const response = await withTimeout(\r\n          async ({ signal }) => {\r\n            const init: RequestInit = {\r\n              ...fetchOptions,\r\n              body: Array.isArray(body)\r\n                ? stringify(\r\n                    body.map((body) => ({\r\n                      jsonrpc: '2.0',\r\n                      id: body.id ?? idCache.take(),\r\n                      ...body,\r\n                    })),\r\n                  )\r\n                : stringify({\r\n                    jsonrpc: '2.0',\r\n                    id: body.id ?? idCache.take(),\r\n                    ...body,\r\n                  }),\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                ...headers,\r\n              },\r\n              method: method || 'POST',\r\n              signal: signal_ || (timeout > 0 ? signal : null),\r\n            }\r\n            const request = new Request(url, init)\r\n            if (onRequest) await onRequest(request)\r\n            const response = await fetch(url, init)\r\n            return response\r\n          },\r\n          {\r\n            errorInstance: new TimeoutError({ body, url }),\r\n            timeout,\r\n            signal: true,\r\n          },\r\n        )\r\n\r\n        if (onResponse) await onResponse(response)\r\n\r\n        let data: any\r\n        if (\r\n          response.headers.get('Content-Type')?.startsWith('application/json')\r\n        )\r\n          data = await response.json()\r\n        else {\r\n          data = await response.text()\r\n          try {\r\n            data = JSON.parse(data || '{}')\r\n          } catch (err) {\r\n            if (response.ok) throw err\r\n            data = { error: data }\r\n          }\r\n        }\r\n\r\n        if (!response.ok) {\r\n          throw new HttpRequestError({\r\n            body,\r\n            details: stringify(data.error) || response.statusText,\r\n            headers: response.headers,\r\n            status: response.status,\r\n            url,\r\n          })\r\n        }\r\n\r\n        return data\r\n      } catch (err) {\r\n        if (err instanceof HttpRequestError) throw err\r\n        if (err instanceof TimeoutError) throw err\r\n        throw new HttpRequestError({\r\n          body,\r\n          cause: err as Error,\r\n          url,\r\n        })\r\n      }\r\n    },\r\n  }\r\n}\r\n", "import { RpcRequestError } from '../../errors/request.js'\r\nimport {\r\n  UrlRequiredError,\r\n  type UrlRequiredErrorType,\r\n} from '../../errors/transport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { RpcRequest } from '../../types/rpc.js'\r\nimport { createBatchScheduler } from '../../utils/promise/createBatchScheduler.js'\r\nimport {\r\n  type HttpRpcClientOptions,\r\n  getHttpRpcClient,\r\n} from '../../utils/rpc/http.js'\r\n\r\nimport {\r\n  type CreateTransportErrorType,\r\n  type Transport,\r\n  type TransportConfig,\r\n  createTransport,\r\n} from './createTransport.js'\r\n\r\nexport type HttpTransportConfig = {\r\n  /**\r\n   * Whether to enable Batch JSON-RPC.\r\n   * @link https://www.jsonrpc.org/specification#batch\r\n   */\r\n  batch?:\r\n    | boolean\r\n    | {\r\n        /** The maximum number of JSON-RPC requests to send in a batch. @default 1_000 */\r\n        batchSize?: number | undefined\r\n        /** The maximum number of milliseconds to wait before sending a batch. @default 0 */\r\n        wait?: number | undefined\r\n      }\r\n    | undefined\r\n  /**\r\n   * Request configuration to pass to `fetch`.\r\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/fetch\r\n   */\r\n  fetchOptions?: HttpRpcClientOptions['fetchOptions'] | undefined\r\n  /** A callback to handle the response from `fetch`. */\r\n  onFetchRequest?: HttpRpcClientOptions['onRequest'] | undefined\r\n  /** A callback to handle the response from `fetch`. */\r\n  onFetchResponse?: HttpRpcClientOptions['onResponse'] | undefined\r\n  /** The key of the HTTP transport. */\r\n  key?: TransportConfig['key'] | undefined\r\n  /** The name of the HTTP transport. */\r\n  name?: TransportConfig['name'] | undefined\r\n  /** The max number of times to retry. */\r\n  retryCount?: TransportConfig['retryCount'] | undefined\r\n  /** The base delay (in ms) between retries. */\r\n  retryDelay?: TransportConfig['retryDelay'] | undefined\r\n  /** The timeout (in ms) for the HTTP request. Default: 10_000 */\r\n  timeout?: TransportConfig['timeout'] | undefined\r\n}\r\n\r\nexport type HttpTransport = Transport<\r\n  'http',\r\n  {\r\n    fetchOptions?: HttpTransportConfig['fetchOptions'] | undefined\r\n    url?: string | undefined\r\n  }\r\n>\r\n\r\nexport type HttpTransportErrorType =\r\n  | CreateTransportErrorType\r\n  | UrlRequiredErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * @description Creates a HTTP transport that connects to a JSON-RPC API.\r\n */\r\nexport function http(\r\n  /** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */\r\n  url?: string | undefined,\r\n  config: HttpTransportConfig = {},\r\n): HttpTransport {\r\n  const {\r\n    batch,\r\n    fetchOptions,\r\n    key = 'http',\r\n    name = 'HTTP JSON-RPC',\r\n    onFetchRequest,\r\n    onFetchResponse,\r\n    retryDelay,\r\n  } = config\r\n  return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {\r\n    const { batchSize = 1000, wait = 0 } =\r\n      typeof batch === 'object' ? batch : {}\r\n    const retryCount = config.retryCount ?? retryCount_\r\n    const timeout = timeout_ ?? config.timeout ?? 10_000\r\n    const url_ = url || chain?.rpcUrls.default.http[0]\r\n    if (!url_) throw new UrlRequiredError()\r\n\r\n    const rpcClient = getHttpRpcClient(url_, {\r\n      fetchOptions,\r\n      onRequest: onFetchRequest,\r\n      onResponse: onFetchResponse,\r\n      timeout,\r\n    })\r\n\r\n    return createTransport(\r\n      {\r\n        key,\r\n        name,\r\n        async request({ method, params }) {\r\n          const body = { method, params }\r\n\r\n          const { schedule } = createBatchScheduler({\r\n            id: url_,\r\n            wait,\r\n            shouldSplitBatch(requests) {\r\n              return requests.length > batchSize\r\n            },\r\n            fn: (body: RpcRequest[]) =>\r\n              rpcClient.request({\r\n                body,\r\n              }),\r\n            sort: (a, b) => a.id - b.id,\r\n          })\r\n\r\n          const fn = async (body: RpcRequest) =>\r\n            batch\r\n              ? schedule(body)\r\n              : [\r\n                  await rpcClient.request({\r\n                    body,\r\n                  }),\r\n                ]\r\n\r\n          const [{ error, result }] = await fn(body)\r\n          if (error)\r\n            throw new RpcRequestError({\r\n              body,\r\n              error,\r\n              url: url_,\r\n            })\r\n          return result\r\n        },\r\n        retryCount,\r\n        retryDelay,\r\n        timeout,\r\n        type: 'http',\r\n      },\r\n      {\r\n        fetchOptions,\r\n        url: url_,\r\n      },\r\n    )\r\n  }\r\n}\r\n", "import { SocketClosedError, TimeoutError } from '../../errors/request.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { RpcRequest, RpcResponse } from '../../types/rpc.js'\r\nimport {\r\n  type CreateBatchSchedulerErrorType,\r\n  createBatchScheduler,\r\n} from '../promise/createBatchScheduler.js'\r\nimport { withTimeout } from '../promise/withTimeout.js'\r\nimport { idCache } from './id.js'\r\n\r\ntype Id = string | number\r\ntype CallbackFn = {\r\n  onResponse: (message: any) => void\r\n  onError?: ((error?: Error | Event | undefined) => void) | undefined\r\n}\r\ntype CallbackMap = Map<Id, CallbackFn>\r\n\r\nexport type GetSocketParameters = {\r\n  onClose: () => void\r\n  onError: (error?: Error | Event | undefined) => void\r\n  onOpen: () => void\r\n  onResponse: (data: RpcResponse) => void\r\n}\r\n\r\nexport type Socket<socket extends {}> = socket & {\r\n  close(): void\r\n  ping?: (() => void) | undefined\r\n  request(params: { body: RpcRequest }): void\r\n}\r\n\r\nexport type SocketRpcClient<socket extends {}> = {\r\n  close(): void\r\n  socket: Socket<socket>\r\n  request(params: {\r\n    body: RpcRequest\r\n    onError?: ((error?: Error | Event | undefined) => void) | undefined\r\n    onResponse: (message: RpcResponse) => void\r\n  }): void\r\n  requestAsync(params: {\r\n    body: RpcRequest\r\n    timeout?: number | undefined\r\n  }): Promise<RpcResponse>\r\n  requests: CallbackMap\r\n  subscriptions: CallbackMap\r\n  url: string\r\n}\r\n\r\nexport type GetSocketRpcClientParameters<socket extends {} = {}> = {\r\n  getSocket(params: GetSocketParameters): Promise<Socket<socket>>\r\n  /**\r\n   * Whether or not to send keep-alive messages.\r\n   * @default true\r\n   */\r\n  keepAlive?:\r\n    | boolean\r\n    | {\r\n        /**\r\n         * The interval (in ms) to send keep-alive messages.\r\n         * @default 30_000\r\n         */\r\n        interval?: number | undefined\r\n      }\r\n    | undefined\r\n  key?: string\r\n  /**\r\n   * Whether or not to attempt to reconnect on socket failure or closure.\r\n   * @default true\r\n   */\r\n  reconnect?:\r\n    | boolean\r\n    | {\r\n        /**\r\n         * The maximum number of reconnection attempts.\r\n         * @default 5\r\n         */\r\n        attempts?: number | undefined\r\n        /**\r\n         * The delay (in ms) between reconnection attempts.\r\n         * @default 2_000\r\n         */\r\n        delay?: number | undefined\r\n      }\r\n    | undefined\r\n  url: string\r\n}\r\n\r\nexport type GetSocketRpcClientErrorType =\r\n  | CreateBatchSchedulerErrorType\r\n  | ErrorType\r\n\r\nexport const socketClientCache = /*#__PURE__*/ new Map<\r\n  string,\r\n  SocketRpcClient<Socket<{}>>\r\n>()\r\n\r\nexport async function getSocketRpcClient<socket extends {}>(\r\n  parameters: GetSocketRpcClientParameters<socket>,\r\n): Promise<SocketRpcClient<socket>> {\r\n  const {\r\n    getSocket,\r\n    keepAlive = true,\r\n    key = 'socket',\r\n    reconnect = true,\r\n    url,\r\n  } = parameters\r\n  const { interval: keepAliveInterval = 30_000 } =\r\n    typeof keepAlive === 'object' ? keepAlive : {}\r\n  const { attempts = 5, delay = 2_000 } =\r\n    typeof reconnect === 'object' ? reconnect : {}\r\n\r\n  let socketClient = socketClientCache.get(`${key}:${url}`)\r\n\r\n  // If the socket already exists, return it.\r\n  if (socketClient) return socketClient as {} as SocketRpcClient<socket>\r\n\r\n  let reconnectCount = 0\r\n  const { schedule } = createBatchScheduler<\r\n    undefined,\r\n    [SocketRpcClient<socket>]\r\n  >({\r\n    id: `${key}:${url}`,\r\n    fn: async () => {\r\n      // Set up a cache for incoming \"synchronous\" requests.\r\n      const requests = new Map<Id, CallbackFn>()\r\n\r\n      // Set up a cache for subscriptions (eth_subscribe).\r\n      const subscriptions = new Map<Id, CallbackFn>()\r\n\r\n      let error: Error | Event | undefined\r\n      let socket: Socket<{}>\r\n      let keepAliveTimer: Timer | undefined\r\n\r\n      // Set up socket implementation.\r\n      async function setup() {\r\n        const result = await getSocket({\r\n          onClose() {\r\n            // Notify all requests and subscriptions of the closure error.\r\n            for (const request of requests.values())\r\n              request.onError?.(new SocketClosedError({ url }))\r\n            for (const subscription of subscriptions.values())\r\n              subscription.onError?.(new SocketClosedError({ url }))\r\n\r\n            // Clear all requests and subscriptions.\r\n            requests.clear()\r\n            subscriptions.clear()\r\n\r\n            // Attempt to reconnect.\r\n            if (reconnect && reconnectCount < attempts)\r\n              setTimeout(async () => {\r\n                reconnectCount++\r\n                await setup().catch(console.error)\r\n              }, delay)\r\n          },\r\n          onError(error_) {\r\n            error = error_\r\n\r\n            // Notify all requests and subscriptions of the error.\r\n            for (const request of requests.values()) request.onError?.(error)\r\n            for (const subscription of subscriptions.values())\r\n              subscription.onError?.(error)\r\n\r\n            // Clear all requests and subscriptions.\r\n            requests.clear()\r\n            subscriptions.clear()\r\n\r\n            // Attempt to reconnect.\r\n            if (reconnect && reconnectCount < attempts)\r\n              setTimeout(async () => {\r\n                reconnectCount++\r\n                await setup().catch(console.error)\r\n              }, delay)\r\n          },\r\n          onOpen() {\r\n            error = undefined\r\n            reconnectCount = 0\r\n          },\r\n          onResponse(data) {\r\n            const isSubscription = data.method === 'eth_subscription'\r\n            const id = isSubscription ? data.params.subscription : data.id\r\n            const cache = isSubscription ? subscriptions : requests\r\n            const callback = cache.get(id)\r\n            if (callback) callback.onResponse(data)\r\n            if (!isSubscription) cache.delete(id)\r\n          },\r\n        })\r\n\r\n        socket = result\r\n\r\n        if (keepAlive) {\r\n          if (keepAliveTimer) clearInterval(keepAliveTimer)\r\n          keepAliveTimer = setInterval(() => socket.ping?.(), keepAliveInterval)\r\n        }\r\n\r\n        return result\r\n      }\r\n      await setup()\r\n      error = undefined\r\n\r\n      // Create a new socket instance.\r\n      socketClient = {\r\n        close() {\r\n          keepAliveTimer && clearInterval(keepAliveTimer)\r\n          socket.close()\r\n          socketClientCache.delete(`${key}:${url}`)\r\n        },\r\n        get socket() {\r\n          return socket\r\n        },\r\n        request({ body, onError, onResponse }) {\r\n          if (error && onError) onError(error)\r\n\r\n          const id = body.id ?? idCache.take()\r\n\r\n          const callback = (response: RpcResponse) => {\r\n            if (typeof response.id === 'number' && id !== response.id) return\r\n\r\n            // If we are subscribing to a topic, we want to set up a listener for incoming\r\n            // messages.\r\n            if (\r\n              body.method === 'eth_subscribe' &&\r\n              typeof response.result === 'string'\r\n            )\r\n              subscriptions.set(response.result, {\r\n                onResponse: callback,\r\n                onError,\r\n              })\r\n\r\n            // If we are unsubscribing from a topic, we want to remove the listener.\r\n            if (body.method === 'eth_unsubscribe')\r\n              subscriptions.delete(body.params?.[0])\r\n\r\n            onResponse(response)\r\n          }\r\n\r\n          requests.set(id, { onResponse: callback, onError })\r\n          try {\r\n            socket.request({\r\n              body: {\r\n                jsonrpc: '2.0',\r\n                id,\r\n                ...body,\r\n              },\r\n            })\r\n          } catch (error) {\r\n            onError?.(error as Error)\r\n          }\r\n        },\r\n        requestAsync({ body, timeout = 10_000 }) {\r\n          return withTimeout(\r\n            () =>\r\n              new Promise<RpcResponse>((onResponse, onError) =>\r\n                this.request({\r\n                  body,\r\n                  onError,\r\n                  onResponse,\r\n                }),\r\n              ),\r\n            {\r\n              errorInstance: new TimeoutError({ body, url }),\r\n              timeout,\r\n            },\r\n          )\r\n        },\r\n        requests,\r\n        subscriptions,\r\n        url,\r\n      }\r\n      socketClientCache.set(`${key}:${url}`, socketClient)\r\n\r\n      return [socketClient as {} as SocketRpcClient<socket>]\r\n    },\r\n  })\r\n\r\n  const [_, [socketClient_]] = await schedule()\r\n  return socketClient_\r\n}\r\n", "import type { MessageEvent } from 'isows'\r\n\r\nimport {\r\n  SocketClosedError,\r\n  WebSocketRequestError,\r\n} from '../../errors/request.js'\r\nimport type { RpcRequest } from '../../types/rpc.js'\r\nimport {\r\n  type GetSocketRpcClientParameters,\r\n  type Socket,\r\n  type SocketRpcClient,\r\n  getSocketRpcClient,\r\n} from './socket.js'\r\n\r\nexport type GetWebSocketRpcClientOptions = Pick<\r\n  GetSocketRpcClientParameters,\r\n  'keepAlive' | 'reconnect'\r\n>\r\n\r\nexport async function getWebSocketRpcClient(\r\n  url: string,\r\n  options: GetWebSocketRpcClientOptions | undefined = {},\r\n): Promise<SocketRpcClient<WebSocket>> {\r\n  const { keepAlive, reconnect } = options\r\n\r\n  return getSocketRpcClient({\r\n    async getSocket({ onClose, onError, onOpen, onResponse }) {\r\n      const WebSocket = await import('isows').then((module) => module.WebSocket)\r\n      const socket = new WebSocket(url)\r\n\r\n      function onClose_() {\r\n        onClose()\r\n        socket.removeEventListener('close', onClose_)\r\n        socket.removeEventListener('message', onMessage)\r\n        socket.removeEventListener('error', onError)\r\n        socket.removeEventListener('open', onOpen)\r\n      }\r\n      function onMessage({ data }: MessageEvent) {\r\n        onResponse(JSON.parse(data))\r\n      }\r\n\r\n      // Setup event listeners for RPC & subscription responses.\r\n      socket.addEventListener('close', onClose_)\r\n      socket.addEventListener('message', onMessage)\r\n      socket.addEventListener('error', onError)\r\n      socket.addEventListener('open', onOpen)\r\n\r\n      // Wait for the socket to open.\r\n      if (socket.readyState === WebSocket.CONNECTING) {\r\n        await new Promise((resolve, reject) => {\r\n          if (!socket) return\r\n          socket.onopen = resolve\r\n          socket.onerror = reject\r\n        })\r\n      }\r\n\r\n      const { close: close_ } = socket\r\n\r\n      return Object.assign(socket, {\r\n        close() {\r\n          close_.bind(socket)()\r\n          onClose()\r\n        },\r\n        ping() {\r\n          try {\r\n            if (\r\n              socket.readyState === socket.CLOSED ||\r\n              socket.readyState === socket.CLOSING\r\n            )\r\n              throw new WebSocketRequestError({\r\n                url: socket.url,\r\n                cause: new SocketClosedError({ url: socket.url }),\r\n              })\r\n\r\n            const body: RpcRequest = {\r\n              jsonrpc: '2.0',\r\n              method: 'net_version',\r\n              params: [],\r\n            }\r\n            socket.send(JSON.stringify(body))\r\n          } catch (error) {\r\n            onError(error as Error)\r\n          }\r\n        },\r\n        request({ body }) {\r\n          if (\r\n            socket.readyState === socket.CLOSED ||\r\n            socket.readyState === socket.CLOSING\r\n          )\r\n            throw new WebSocketRequestError({\r\n              body,\r\n              url: socket.url,\r\n              cause: new SocketClosedError({ url: socket.url }),\r\n            })\r\n\r\n          return socket.send(JSON.stringify(body))\r\n        },\r\n      } as Socket<WebSocket>)\r\n    },\r\n    keepAlive,\r\n    reconnect,\r\n    url,\r\n  })\r\n}\r\n", "// TODO(v3): This file is here for backwards compatibility, and to prevent breaking changes.\r\n// These APIs will be removed in v3.\r\n\r\n/* c8 ignore start */\r\nimport type {\r\n  TimeoutErrorType,\r\n  WebSocketRequestError,\r\n} from '../../errors/request.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { RpcResponse } from '../../types/rpc.js'\r\nimport type { WithTimeoutErrorType } from '../promise/withTimeout.js'\r\nimport { type HttpRequestParameters, getHttpRpcClient } from './http.js'\r\nimport type { SocketRpcClient } from './socket.js'\r\nimport { getWebSocketRpcClient } from './webSocket.js'\r\n\r\nexport type WebSocketOptions = Parameters<\r\n  SocketRpcClient<WebSocket>['request']\r\n>[0]\r\nexport type WebSocketReturnType = SocketRpcClient<WebSocket>\r\nexport type WebSocketErrorType = WebSocketRequestError | ErrorType\r\n\r\nfunction webSocket(\r\n  socketClient: SocketRpcClient<WebSocket>,\r\n  { body, onError, onResponse }: WebSocketOptions,\r\n): WebSocketReturnType {\r\n  socketClient.request({\r\n    body,\r\n    onError,\r\n    onResponse,\r\n  })\r\n  return socketClient\r\n}\r\n\r\nexport type WebSocketAsyncOptions = Parameters<\r\n  SocketRpcClient<WebSocket>['requestAsync']\r\n>[0]\r\nexport type WebSocketAsyncReturnType = RpcResponse\r\nexport type WebSocketAsyncErrorType =\r\n  | WebSocketErrorType\r\n  | TimeoutErrorType\r\n  | WithTimeoutErrorType\r\n  | ErrorType\r\n\r\nasync function webSocketAsync(\r\n  socketClient: SocketRpcClient<WebSocket>,\r\n  { body, timeout = 10_000 }: WebSocketAsyncOptions,\r\n): Promise<WebSocketAsyncReturnType> {\r\n  return socketClient.requestAsync({\r\n    body,\r\n    timeout,\r\n  })\r\n}\r\n\r\n/**\r\n * @deprecated use `getSocketClient` instead.\r\n *\r\n * ```diff\r\n * -import { getSocket } from 'viem/utils'\r\n * +import { getSocketClient } from 'viem/utils'\r\n *\r\n * -const socket = await getSocket(url)\r\n * +const socketClient = await getSocketClient(url)\r\n * +const socket = socketClient.socket\r\n * ```\r\n */\r\nexport async function getSocket(url: string) {\r\n  const client = await getWebSocketRpcClient(url)\r\n  return Object.assign(client.socket, {\r\n    requests: client.requests,\r\n    subscriptions: client.subscriptions,\r\n  })\r\n}\r\n\r\nexport const rpc = {\r\n  /**\r\n   * @deprecated use `getHttpRpcClient` instead.\r\n   *\r\n   * ```diff\r\n   * -import { rpc } from 'viem/utils'\r\n   * +import { getHttpRpcClient } from 'viem/utils'\r\n   *\r\n   * -rpc.http(url, params)\r\n   * +const httpClient = getHttpRpcClient(url)\r\n   * +httpClient.request(params)\r\n   * ```\r\n   */\r\n  http(url: string, params: HttpRequestParameters) {\r\n    return getHttpRpcClient(url).request(params)\r\n  },\r\n  /**\r\n   * @deprecated use `getWebSocketRpcClient` instead.\r\n   *\r\n   * ```diff\r\n   * -import { rpc } from 'viem/utils'\r\n   * +import { getWebSocketRpcClient } from 'viem/utils'\r\n   *\r\n   * -rpc.webSocket(url, params)\r\n   * +const webSocketClient = getWebSocketRpcClient(url)\r\n   * +webSocketClient.request(params)\r\n   * ```\r\n   */\r\n  webSocket,\r\n  /**\r\n   * @deprecated use `getWebSocketRpcClient` instead.\r\n   *\r\n   * ```diff\r\n   * -import { rpc } from 'viem/utils'\r\n   * +import { getWebSocketRpcClient } from 'viem/utils'\r\n   *\r\n   * -const response = await rpc.webSocketAsync(url, params)\r\n   * +const webSocketClient = getWebSocketRpcClient(url)\r\n   * +const response = await webSocketClient.requestAsync(params)\r\n   * ```\r\n   */\r\n  webSocketAsync,\r\n}\r\n/* c8 ignore end */\r\n", "import { RpcRequestError } from '../../errors/request.js'\r\nimport {\r\n  UrlRequiredError,\r\n  type UrlRequiredErrorType,\r\n} from '../../errors/transport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Hash } from '../../types/misc.js'\r\nimport type { RpcResponse } from '../../types/rpc.js'\r\nimport { getSocket } from '../../utils/rpc/compat.js'\r\nimport type { SocketRpcClient } from '../../utils/rpc/socket.js'\r\nimport {\r\n  type GetWebSocketRpcClientOptions,\r\n  getWebSocketRpcClient,\r\n} from '../../utils/rpc/webSocket.js'\r\nimport {\r\n  type CreateTransportErrorType,\r\n  type Transport,\r\n  type TransportConfig,\r\n  createTransport,\r\n} from './createTransport.js'\r\n\r\ntype WebSocketTransportSubscribeParameters = {\r\n  onData: (data: RpcResponse) => void\r\n  onError?: ((error: any) => void) | undefined\r\n}\r\n\r\ntype WebSocketTransportSubscribeReturnType = {\r\n  subscriptionId: Hash\r\n  unsubscribe: () => Promise<RpcResponse<boolean>>\r\n}\r\n\r\ntype WebSocketTransportSubscribe = {\r\n  subscribe(\r\n    args: WebSocketTransportSubscribeParameters & {\r\n      /**\r\n       * @description Add information about compiled contracts\r\n       * @link https://hardhat.org/hardhat-network/docs/reference#hardhat_addcompilationresult\r\n       */\r\n      params: ['newHeads']\r\n    },\r\n  ): Promise<WebSocketTransportSubscribeReturnType>\r\n}\r\n\r\nexport type WebSocketTransportConfig = {\r\n  /**\r\n   * Whether or not to send keep-alive ping messages.\r\n   * @default true\r\n   */\r\n  keepAlive?: GetWebSocketRpcClientOptions['keepAlive'] | undefined\r\n  /** The key of the WebSocket transport. */\r\n  key?: TransportConfig['key'] | undefined\r\n  /** The name of the WebSocket transport. */\r\n  name?: TransportConfig['name'] | undefined\r\n  /**\r\n   * Whether or not to attempt to reconnect on socket failure.\r\n   * @default true\r\n   */\r\n  reconnect?: GetWebSocketRpcClientOptions['reconnect'] | undefined\r\n  /** The max number of times to retry. */\r\n  retryCount?: TransportConfig['retryCount'] | undefined\r\n  /** The base delay (in ms) between retries. */\r\n  retryDelay?: TransportConfig['retryDelay'] | undefined\r\n  /** The timeout (in ms) for async WebSocket requests. Default: 10_000 */\r\n  timeout?: TransportConfig['timeout'] | undefined\r\n}\r\n\r\nexport type WebSocketTransport = Transport<\r\n  'webSocket',\r\n  {\r\n    /**\r\n     * @deprecated use `getRpcClient` instead.\r\n     */\r\n    getSocket(): Promise<WebSocket>\r\n    getRpcClient(): Promise<SocketRpcClient<WebSocket>>\r\n    subscribe: WebSocketTransportSubscribe['subscribe']\r\n  }\r\n>\r\n\r\nexport type WebSocketTransportErrorType =\r\n  | CreateTransportErrorType\r\n  | UrlRequiredErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * @description Creates a WebSocket transport that connects to a JSON-RPC API.\r\n */\r\nexport function webSocket(\r\n  /** URL of the JSON-RPC API. Defaults to the chain's public RPC URL. */\r\n  url?: string,\r\n  config: WebSocketTransportConfig = {},\r\n): WebSocketTransport {\r\n  const {\r\n    keepAlive,\r\n    key = 'webSocket',\r\n    name = 'WebSocket JSON-RPC',\r\n    reconnect,\r\n    retryDelay,\r\n  } = config\r\n  return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {\r\n    const retryCount = config.retryCount ?? retryCount_\r\n    const timeout = timeout_ ?? config.timeout ?? 10_000\r\n    const url_ = url || chain?.rpcUrls.default.webSocket?.[0]\r\n    if (!url_) throw new UrlRequiredError()\r\n    return createTransport(\r\n      {\r\n        key,\r\n        name,\r\n        async request({ method, params }) {\r\n          const body = { method, params }\r\n          const rpcClient = await getWebSocketRpcClient(url_, {\r\n            keepAlive,\r\n            reconnect,\r\n          })\r\n          const { error, result } = await rpcClient.requestAsync({\r\n            body,\r\n            timeout,\r\n          })\r\n          if (error)\r\n            throw new RpcRequestError({\r\n              body,\r\n              error,\r\n              url: url_,\r\n            })\r\n          return result\r\n        },\r\n        retryCount,\r\n        retryDelay,\r\n        timeout,\r\n        type: 'webSocket',\r\n      },\r\n      {\r\n        getSocket() {\r\n          return getSocket(url_)\r\n        },\r\n        getRpcClient() {\r\n          return getWebSocketRpcClient(url_)\r\n        },\r\n        async subscribe({ params, onData, onError }: any) {\r\n          const rpcClient = await getWebSocketRpcClient(url_)\r\n          const { result: subscriptionId } = await new Promise<any>(\r\n            (resolve, reject) =>\r\n              rpcClient.request({\r\n                body: {\r\n                  method: 'eth_subscribe',\r\n                  params,\r\n                },\r\n                onError(error) {\r\n                  reject(error)\r\n                  onError?.(error)\r\n                  return\r\n                },\r\n                onResponse(response) {\r\n                  if (response.error) {\r\n                    reject(response.error)\r\n                    onError?.(response.error)\r\n                    return\r\n                  }\r\n\r\n                  if (typeof response.id === 'number') {\r\n                    resolve(response)\r\n                    return\r\n                  }\r\n                  if (response.method !== 'eth_subscription') return\r\n                  onData(response.params)\r\n                },\r\n              }),\r\n          )\r\n          return {\r\n            subscriptionId,\r\n            async unsubscribe() {\r\n              return new Promise<any>((resolve) =>\r\n                rpcClient.request({\r\n                  body: {\r\n                    method: 'eth_unsubscribe',\r\n                    params: [subscriptionId],\r\n                  },\r\n                  onResponse: resolve,\r\n                }),\r\n              )\r\n            },\r\n          }\r\n        },\r\n      },\r\n    )\r\n  }\r\n}\r\n", "import { BaseError } from './base.js'\r\n\r\nexport type FilterTypeNotSupportedErrorType = FilterTypeNotSupportedError & {\r\n  name: 'FilterTypeNotSupportedError'\r\n}\r\nexport class FilterTypeNotSupportedError extends BaseError {\r\n  constructor(type: string) {\r\n    super(`Filter type \"${type}\" is not supported.`, {\r\n      name: 'FilterTypeNotSupportedError',\r\n    })\r\n  }\r\n}\r\n", "import type {\r\n  Abi,\r\n  AbiParameter,\r\n  AbiParameterToPrimitiveType,\r\n  ExtractAbiEvents,\r\n} from 'abitype'\r\n\r\nimport {\r\n  AbiEventNotFoundError,\r\n  type AbiEventNotFoundErrorType,\r\n} from '../../errors/abi.js'\r\nimport {\r\n  FilterTypeNotSupportedError,\r\n  type FilterTypeNotSupportedErrorType,\r\n} from '../../errors/log.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type {\r\n  ContractEventArgs,\r\n  ContractEventName,\r\n  EventDefinition,\r\n} from '../../types/contract.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\r\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\r\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\r\nimport {\r\n  type ToEventSelectorErrorType,\r\n  toEventSelector,\r\n} from '../hash/toEventSelector.js'\r\nimport {\r\n  type EncodeAbiParametersErrorType,\r\n  encodeAbiParameters,\r\n} from './encodeAbiParameters.js'\r\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\r\nimport { type GetAbiItemErrorType, getAbiItem } from './getAbiItem.js'\r\n\r\nconst docsPath = '/docs/contract/encodeEventTopics'\r\n\r\nexport type EncodeEventTopicsParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  eventName extends ContractEventName<abi> | undefined = ContractEventName<abi>,\r\n  ///\r\n  hasEvents = abi extends Abi\r\n    ? Abi extends abi\r\n      ? true\r\n      : [ExtractAbiEvents<abi>] extends [never]\r\n        ? false\r\n        : true\r\n    : true,\r\n  allArgs = ContractEventArgs<\r\n    abi,\r\n    eventName extends ContractEventName<abi>\r\n      ? eventName\r\n      : ContractEventName<abi>\r\n  >,\r\n  allErrorNames = ContractEventName<abi>,\r\n> = {\r\n  abi: abi\r\n  args?: allArgs | undefined\r\n} & UnionEvaluate<\r\n  IsNarrowable<abi, Abi> extends true\r\n    ? abi['length'] extends 1\r\n      ? { eventName?: eventName | allErrorNames | undefined }\r\n      : { eventName: eventName | allErrorNames }\r\n    : { eventName?: eventName | allErrorNames | undefined }\r\n> &\r\n  (hasEvents extends true ? unknown : never)\r\n\r\nexport type EncodeEventTopicsReturnType = [Hex, ...(Hex | Hex[] | null)[]]\r\n\r\nexport type EncodeEventTopicsErrorType =\r\n  | AbiEventNotFoundErrorType\r\n  | EncodeArgErrorType\r\n  | FormatAbiItemErrorType\r\n  | GetAbiItemErrorType\r\n  | ToEventSelectorErrorType\r\n  | ErrorType\r\n\r\nexport function encodeEventTopics<\r\n  const abi extends Abi | readonly unknown[],\r\n  eventName extends ContractEventName<abi> | undefined = undefined,\r\n>(\r\n  parameters: EncodeEventTopicsParameters<abi, eventName>,\r\n): EncodeEventTopicsReturnType {\r\n  const { abi, eventName, args } = parameters as EncodeEventTopicsParameters\r\n\r\n  let abiItem = abi[0]\r\n  if (eventName) {\r\n    const item = getAbiItem({ abi, name: eventName })\r\n    if (!item) throw new AbiEventNotFoundError(eventName, { docsPath })\r\n    abiItem = item\r\n  }\r\n\r\n  if (abiItem.type !== 'event')\r\n    throw new AbiEventNotFoundError(undefined, { docsPath })\r\n\r\n  const definition = formatAbiItem(abiItem)\r\n  const signature = toEventSelector(definition as EventDefinition)\r\n\r\n  let topics: (Hex | Hex[] | null)[] = []\r\n  if (args && 'inputs' in abiItem) {\r\n    const indexedInputs = abiItem.inputs?.filter(\r\n      (param) => 'indexed' in param && param.indexed,\r\n    )\r\n    const args_ = Array.isArray(args)\r\n      ? args\r\n      : Object.values(args).length > 0\r\n        ? indexedInputs?.map((x: any) => (args as any)[x.name]) ?? []\r\n        : []\r\n\r\n    if (args_.length > 0) {\r\n      topics =\r\n        indexedInputs?.map((param, i) => {\r\n          if (Array.isArray(args_[i]))\r\n            return args_[i].map((_: any, j: number) =>\r\n              encodeArg({ param, value: args_[i][j] }),\r\n            )\r\n          return args_[i] ? encodeArg({ param, value: args_[i] }) : null\r\n        }) ?? []\r\n    }\r\n  }\r\n  return [signature, ...topics]\r\n}\r\n\r\nexport type EncodeArgErrorType =\r\n  | Keccak256ErrorType\r\n  | ToBytesErrorType\r\n  | EncodeAbiParametersErrorType\r\n  | FilterTypeNotSupportedErrorType\r\n  | ErrorType\r\n\r\nfunction encodeArg({\r\n  param,\r\n  value,\r\n}: { param: AbiParameter; value: AbiParameterToPrimitiveType<AbiParameter> }) {\r\n  if (param.type === 'string' || param.type === 'bytes')\r\n    return keccak256(toBytes(value as string))\r\n  if (param.type === 'tuple' || param.type.match(/^(.*)\\[(\\d+)?\\]$/))\r\n    throw new FilterTypeNotSupportedError(param.type)\r\n  return encodeAbiParameters([param], [value])\r\n}\r\n", "import type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { OnResponseFn } from '../../clients/transports/fallback.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { PublicRpcSchema } from '../../types/eip1193.js'\r\nimport type { EIP1193RequestFn } from '../../types/eip1193.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { Filter } from '../../types/utils.js'\r\n\r\ntype CreateFilterRequestScopeParameters = {\r\n  method:\r\n    | 'eth_newFilter'\r\n    | 'eth_newPendingTransactionFilter'\r\n    | 'eth_newBlockFilter'\r\n}\r\n\r\ntype FilterRpcSchema = Filter<\r\n  PublicRpcSchema,\r\n  { Method: 'eth_getFilterLogs' | 'eth_getFilterChanges' }\r\n>\r\n\r\ntype CreateFilterRequestScopeReturnType = (\r\n  id: Hex,\r\n) => EIP1193RequestFn<FilterRpcSchema>\r\n\r\n/**\r\n * Scopes `request` to the filter ID. If the client is a fallback, it will\r\n * listen for responses and scope the child transport `request` function\r\n * to the successful filter ID.\r\n */\r\nexport function createFilterRequestScope<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  { method }: CreateFilterRequestScopeParameters,\r\n): CreateFilterRequestScopeReturnType {\r\n  const requestMap: Record<Hex, EIP1193RequestFn> = {}\r\n\r\n  if (client.transport.type === 'fallback')\r\n    client.transport.onResponse?.(\r\n      ({\r\n        method: method_,\r\n        response: id,\r\n        status,\r\n        transport,\r\n      }: Parameters<OnResponseFn>[0]) => {\r\n        if (status === 'success' && method === method_)\r\n          requestMap[id as Hex] = transport.request\r\n      },\r\n    )\r\n\r\n  return ((id) =>\r\n    requestMap[id] || client.request) as CreateFilterRequestScopeReturnType\r\n}\r\n", "import type { Abi, Address } from 'abitype'\r\n\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type {\r\n  ContractEventName,\r\n  MaybeExtractEventArgsFromAbi,\r\n} from '../../types/contract.js'\r\nimport type { Filter } from '../../types/filter.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport {\r\n  type EncodeEventTopicsErrorType,\r\n  type EncodeEventTopicsParameters,\r\n  encodeEventTopics,\r\n} from '../../utils/abi/encodeEventTopics.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type NumberToHexErrorType,\r\n  numberToHex,\r\n} from '../../utils/encoding/toHex.js'\r\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js'\r\n\r\nexport type CreateContractEventFilterParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  eventName extends ContractEventName<abi> | undefined = undefined,\r\n  args extends\r\n    | MaybeExtractEventArgsFromAbi<abi, eventName>\r\n    | undefined = undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n> = {\r\n  address?: Address | Address[] | undefined\r\n  abi: abi\r\n  eventName?: eventName | ContractEventName<abi> | undefined\r\n  fromBlock?: fromBlock | BlockNumber | BlockTag | undefined\r\n  /**\r\n   * Whether or not the logs must match the indexed/non-indexed arguments in the event ABI item.\r\n   * @default false\r\n   */\r\n  strict?: strict | boolean | undefined\r\n  toBlock?: toBlock | BlockNumber | BlockTag | undefined\r\n} & (undefined extends eventName\r\n  ? {\r\n      args?: undefined\r\n    }\r\n  : MaybeExtractEventArgsFromAbi<abi, eventName> extends infer eventFilterArgs\r\n    ? {\r\n        args?:\r\n          | eventFilterArgs\r\n          | (args extends eventFilterArgs ? args : never)\r\n          | undefined\r\n      }\r\n    : {\r\n        args?: undefined\r\n      })\r\n\r\nexport type CreateContractEventFilterReturnType<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  eventName extends ContractEventName<abi> | undefined = undefined,\r\n  args extends\r\n    | MaybeExtractEventArgsFromAbi<abi, eventName>\r\n    | undefined = undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n> = Filter<'event', abi, eventName, args, strict, fromBlock, toBlock>\r\n\r\nexport type CreateContractEventFilterErrorType =\r\n  | EncodeEventTopicsErrorType\r\n  | RequestErrorType\r\n  | NumberToHexErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Creates a Filter to retrieve event logs that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges) or [`getFilterLogs`](https://viem.sh/docs/actions/public/getFilterLogs).\r\n *\r\n * - Docs: https://viem.sh/docs/contract/createContractEventFilter\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link CreateContractEventFilterParameters}\r\n * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateContractEventFilterReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http, parseAbi } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { createContractEventFilter } from 'viem/contract'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const filter = await createContractEventFilter(client, {\r\n *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\r\n * })\r\n */\r\nexport async function createContractEventFilter<\r\n  chain extends Chain | undefined,\r\n  const abi extends Abi | readonly unknown[],\r\n  eventName extends ContractEventName<abi> | undefined,\r\n  args extends MaybeExtractEventArgsFromAbi<abi, eventName> | undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n>(\r\n  client: Client<Transport, chain>,\r\n  parameters: CreateContractEventFilterParameters<\r\n    abi,\r\n    eventName,\r\n    args,\r\n    strict,\r\n    fromBlock,\r\n    toBlock\r\n  >,\r\n): Promise<\r\n  CreateContractEventFilterReturnType<\r\n    abi,\r\n    eventName,\r\n    args,\r\n    strict,\r\n    fromBlock,\r\n    toBlock\r\n  >\r\n> {\r\n  const { address, abi, args, eventName, fromBlock, strict, toBlock } =\r\n    parameters as CreateContractEventFilterParameters\r\n\r\n  const getRequest = createFilterRequestScope(client, {\r\n    method: 'eth_newFilter',\r\n  })\r\n\r\n  const topics = eventName\r\n    ? encodeEventTopics({\r\n        abi,\r\n        args,\r\n        eventName,\r\n      } as unknown as EncodeEventTopicsParameters)\r\n    : undefined\r\n  const id: Hex = await client.request({\r\n    method: 'eth_newFilter',\r\n    params: [\r\n      {\r\n        address,\r\n        fromBlock:\r\n          typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\r\n        toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock,\r\n        topics,\r\n      },\r\n    ],\r\n  })\r\n\r\n  return {\r\n    abi,\r\n    args,\r\n    eventName,\r\n    id,\r\n    request: getRequest(id),\r\n    strict: Boolean(strict),\r\n    type: 'event',\r\n  } as unknown as CreateContractEventFilterReturnType<\r\n    abi,\r\n    eventName,\r\n    args,\r\n    strict,\r\n    fromBlock,\r\n    toBlock\r\n  >\r\n}\r\n", "import type { Abi, Address } from 'abitype'\r\n\r\nimport { AbiDecodingZeroDataError } from '../../errors/abi.js'\r\nimport { BaseError } from '../../errors/base.js'\r\nimport {\r\n  ContractFunctionExecutionError,\r\n  type ContractFunctionExecutionErrorType,\r\n  ContractFunctionRevertedError,\r\n  type ContractFunctionRevertedErrorType,\r\n  ContractFunctionZeroDataError,\r\n  type ContractFunctionZeroDataErrorType,\r\n  RawContractError,\r\n} from '../../errors/contract.js'\r\nimport { InternalRpcError } from '../../errors/rpc.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\n\r\nconst EXECUTION_REVERTED_ERROR_CODE = 3\r\n\r\nexport type GetContractErrorReturnType<cause = ErrorType> = Omit<\r\n  ContractFunctionExecutionErrorType,\r\n  'cause'\r\n> & {\r\n  cause:\r\n    | cause\r\n    | ContractFunctionZeroDataErrorType\r\n    | ContractFunctionRevertedErrorType\r\n}\r\n\r\nexport function getContractError<err extends ErrorType<string>>(\r\n  err: err,\r\n  {\r\n    abi,\r\n    address,\r\n    args,\r\n    docsPath,\r\n    functionName,\r\n    sender,\r\n  }: {\r\n    abi: Abi\r\n    args: any\r\n    address?: Address | undefined\r\n    docsPath?: string | undefined\r\n    functionName: string\r\n    sender?: Address | undefined\r\n  },\r\n): GetContractErrorReturnType {\r\n  const { code, data, message, shortMessage } = (\r\n    err instanceof RawContractError\r\n      ? err\r\n      : err instanceof BaseError\r\n        ? err.walk((err) => 'data' in (err as Error)) || err.walk()\r\n        : {}\r\n  ) as RawContractError\r\n\r\n  const cause = (() => {\r\n    if (err instanceof AbiDecodingZeroDataError)\r\n      return new ContractFunctionZeroDataError({ functionName })\r\n    if (\r\n      [EXECUTION_REVERTED_ERROR_CODE, InternalRpcError.code].includes(code) &&\r\n      (data || message || shortMessage)\r\n    ) {\r\n      return new ContractFunctionRevertedError({\r\n        abi,\r\n        data: typeof data === 'object' ? data.data : data,\r\n        functionName,\r\n        message: shortMessage ?? message,\r\n      })\r\n    }\r\n    return err\r\n  })()\r\n\r\n  return new ContractFunctionExecutionError(cause as BaseError, {\r\n    abi,\r\n    args,\r\n    contractAddress: address,\r\n    docsPath,\r\n    functionName,\r\n    sender,\r\n  }) as GetContractErrorReturnType\r\n}\r\n", "import type { Abi } from 'abitype'\r\n\r\nimport type { Account } from '../../accounts/types.js'\r\nimport {\r\n  type ParseAccountErrorType,\r\n  parseAccount,\r\n} from '../../accounts/utils/parseAccount.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { BaseError } from '../../errors/base.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type {\r\n  ContractFunctionArgs,\r\n  ContractFunctionName,\r\n  ContractFunctionParameters,\r\n  GetValue,\r\n} from '../../types/contract.js'\r\nimport type { UnionOmit } from '../../types/utils.js'\r\nimport {\r\n  type EncodeFunctionDataErrorType,\r\n  type EncodeFunctionDataParameters,\r\n  encodeFunctionData,\r\n} from '../../utils/abi/encodeFunctionData.js'\r\nimport {\r\n  type GetContractErrorReturnType,\r\n  getContractError,\r\n} from '../../utils/errors/getContractError.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport {\r\n  type EstimateGasErrorType,\r\n  type EstimateGasParameters,\r\n  estimateGas,\r\n} from './estimateGas.js'\r\n\r\nexport type EstimateContractGasParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends ContractFunctionName<\r\n    abi,\r\n    'nonpayable' | 'payable'\r\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\r\n  chain extends Chain | undefined = Chain | undefined,\r\n> = ContractFunctionParameters<\r\n  abi,\r\n  'nonpayable' | 'payable',\r\n  functionName,\r\n  args\r\n> &\r\n  UnionOmit<EstimateGasParameters<chain>, 'data' | 'to' | 'value'> &\r\n  GetValue<\r\n    abi,\r\n    functionName,\r\n    EstimateGasParameters<chain> extends EstimateGasParameters\r\n      ? EstimateGasParameters<chain>['value']\r\n      : EstimateGasParameters['value']\r\n  >\r\n\r\nexport type EstimateContractGasReturnType = bigint\r\n\r\nexport type EstimateContractGasErrorType = GetContractErrorReturnType<\r\n  EncodeFunctionDataErrorType | EstimateGasErrorType | ParseAccountErrorType\r\n>\r\n\r\n/**\r\n * Estimates the gas required to successfully execute a contract write function call.\r\n *\r\n * - Docs: https://viem.sh/docs/contract/estimateContractGas\r\n *\r\n * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`estimateGas` action](https://viem.sh/docs/actions/public/estimateGas) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link EstimateContractGasParameters}\r\n * @returns The gas estimate (in wei). {@link EstimateContractGasReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http, parseAbi } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { estimateContractGas } from 'viem/contract'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const gas = await estimateContractGas(client, {\r\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n *   abi: parseAbi(['function mint() public']),\r\n *   functionName: 'mint',\r\n *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\r\n * })\r\n */\r\nexport async function estimateContractGas<\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined = undefined,\r\n>(\r\n  client: Client<Transport, chain, account>,\r\n  parameters: EstimateContractGasParameters<abi, functionName, args, chain>,\r\n): Promise<EstimateContractGasReturnType> {\r\n  const { abi, address, args, functionName, ...request } =\r\n    parameters as EstimateContractGasParameters\r\n  const data = encodeFunctionData({\r\n    abi,\r\n    args,\r\n    functionName,\r\n  } as EncodeFunctionDataParameters)\r\n  try {\r\n    const gas = await getAction(\r\n      client,\r\n      estimateGas,\r\n      'estimateGas',\r\n    )({\r\n      data,\r\n      to: address,\r\n      ...request,\r\n    } as unknown as EstimateGasParameters)\r\n    return gas\r\n  } catch (error) {\r\n    const account = request.account ? parseAccount(request.account) : undefined\r\n    throw getContractError(error as BaseError, {\r\n      abi,\r\n      address,\r\n      args,\r\n      docsPath: '/docs/contract/estimateContractGas',\r\n      functionName,\r\n      sender: account?.address,\r\n    })\r\n  }\r\n}\r\n", "import type { Abi, AbiParameter } from 'abitype'\r\n\r\nimport {\r\n  AbiDecodingDataSizeTooSmallError,\r\n  type AbiDecodingDataSizeTooSmallErrorType,\r\n  AbiEventSignatureEmptyTopicsError,\r\n  type AbiEventSignatureEmptyTopicsErrorType,\r\n  AbiEventSignatureNotFoundError,\r\n  type AbiEventSignatureNotFoundErrorType,\r\n  DecodeLogDataMismatch,\r\n  type DecodeLogDataMismatchErrorType,\r\n  DecodeLogTopicsMismatch,\r\n  type DecodeLogTopicsMismatchErrorType,\r\n} from '../../errors/abi.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type {\r\n  ContractEventArgsFromTopics,\r\n  ContractEventName,\r\n  EventDefinition,\r\n} from '../../types/contract.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type {\r\n  IsNarrowable,\r\n  Prettify,\r\n  UnionEvaluate,\r\n} from '../../types/utils.js'\r\nimport { size } from '../data/size.js'\r\nimport {\r\n  type ToEventSelectorErrorType,\r\n  toEventSelector,\r\n} from '../hash/toEventSelector.js'\r\n\r\nimport { PositionOutOfBoundsError } from '../../errors/cursor.js'\r\nimport {\r\n  type DecodeAbiParametersErrorType,\r\n  decodeAbiParameters,\r\n} from './decodeAbiParameters.js'\r\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\r\n\r\nexport type DecodeEventLogParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  eventName extends ContractEventName<abi> | undefined = ContractEventName<abi>,\r\n  topics extends Hex[] = Hex[],\r\n  data extends Hex | undefined = undefined,\r\n  strict extends boolean = true,\r\n> = {\r\n  abi: abi\r\n  data?: data | undefined\r\n  eventName?: eventName | ContractEventName<abi> | undefined\r\n  strict?: strict | boolean | undefined\r\n  topics: [signature: Hex, ...args: topics] | []\r\n}\r\n\r\nexport type DecodeEventLogReturnType<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  eventName extends ContractEventName<abi> | undefined = ContractEventName<abi>,\r\n  topics extends Hex[] = Hex[],\r\n  data extends Hex | undefined = undefined,\r\n  strict extends boolean = true,\r\n  ///\r\n  allEventNames extends\r\n    ContractEventName<abi> = eventName extends ContractEventName<abi>\r\n    ? eventName\r\n    : ContractEventName<abi>,\r\n> = IsNarrowable<abi, Abi> extends true\r\n  ? {\r\n      [name in allEventNames]: Prettify<\r\n        {\r\n          eventName: name\r\n        } & UnionEvaluate<\r\n          ContractEventArgsFromTopics<abi, name, strict> extends infer allArgs\r\n            ? topics extends readonly []\r\n              ? data extends undefined\r\n                ? { args?: undefined }\r\n                : { args?: allArgs | undefined }\r\n              : { args: allArgs }\r\n            : never\r\n        >\r\n      >\r\n    }[allEventNames]\r\n  : {\r\n      eventName: eventName\r\n      args: readonly unknown[] | undefined\r\n    }\r\n\r\nexport type DecodeEventLogErrorType =\r\n  | AbiDecodingDataSizeTooSmallErrorType\r\n  | AbiEventSignatureEmptyTopicsErrorType\r\n  | AbiEventSignatureNotFoundErrorType\r\n  | DecodeAbiParametersErrorType\r\n  | DecodeLogTopicsMismatchErrorType\r\n  | DecodeLogDataMismatchErrorType\r\n  | FormatAbiItemErrorType\r\n  | ToEventSelectorErrorType\r\n  | ErrorType\r\n\r\nconst docsPath = '/docs/contract/decodeEventLog'\r\n\r\nexport function decodeEventLog<\r\n  const abi extends Abi | readonly unknown[],\r\n  eventName extends ContractEventName<abi> | undefined = undefined,\r\n  topics extends Hex[] = Hex[],\r\n  data extends Hex | undefined = undefined,\r\n  strict extends boolean = true,\r\n>(\r\n  parameters: DecodeEventLogParameters<abi, eventName, topics, data, strict>,\r\n): DecodeEventLogReturnType<abi, eventName, topics, data, strict> {\r\n  const {\r\n    abi,\r\n    data,\r\n    strict: strict_,\r\n    topics,\r\n  } = parameters as DecodeEventLogParameters\r\n\r\n  const strict = strict_ ?? true\r\n  const [signature, ...argTopics] = topics\r\n  if (!signature) throw new AbiEventSignatureEmptyTopicsError({ docsPath })\r\n\r\n  const abiItem = (() => {\r\n    if (abi.length === 1) return abi[0]\r\n    return abi.find(\r\n      (x) =>\r\n        x.type === 'event' &&\r\n        signature === toEventSelector(formatAbiItem(x) as EventDefinition),\r\n    )\r\n  })()\r\n\r\n  if (!(abiItem && 'name' in abiItem) || abiItem.type !== 'event')\r\n    throw new AbiEventSignatureNotFoundError(signature, { docsPath })\r\n\r\n  const { name, inputs } = abiItem\r\n  const isUnnamed = inputs?.some((x) => !('name' in x && x.name))\r\n\r\n  let args: any = isUnnamed ? [] : {}\r\n\r\n  // Decode topics (indexed args).\r\n  const indexedInputs = inputs.filter((x) => 'indexed' in x && x.indexed)\r\n  for (let i = 0; i < indexedInputs.length; i++) {\r\n    const param = indexedInputs[i]\r\n    const topic = argTopics[i]\r\n    if (!topic)\r\n      throw new DecodeLogTopicsMismatch({\r\n        abiItem,\r\n        param: param as AbiParameter & { indexed: boolean },\r\n      })\r\n    args[isUnnamed ? i : param.name || i] = decodeTopic({ param, value: topic })\r\n  }\r\n\r\n  // Decode data (non-indexed args).\r\n  const nonIndexedInputs = inputs.filter((x) => !('indexed' in x && x.indexed))\r\n  if (nonIndexedInputs.length > 0) {\r\n    if (data && data !== '0x') {\r\n      try {\r\n        const decodedData = decodeAbiParameters(nonIndexedInputs, data)\r\n        if (decodedData) {\r\n          if (isUnnamed) args = [...args, ...decodedData]\r\n          else {\r\n            for (let i = 0; i < nonIndexedInputs.length; i++) {\r\n              args[nonIndexedInputs[i].name!] = decodedData[i]\r\n            }\r\n          }\r\n        }\r\n      } catch (err) {\r\n        if (strict) {\r\n          if (\r\n            err instanceof AbiDecodingDataSizeTooSmallError ||\r\n            err instanceof PositionOutOfBoundsError\r\n          )\r\n            throw new DecodeLogDataMismatch({\r\n              abiItem,\r\n              data: data,\r\n              params: nonIndexedInputs,\r\n              size: size(data),\r\n            })\r\n          throw err\r\n        }\r\n      }\r\n    } else if (strict) {\r\n      throw new DecodeLogDataMismatch({\r\n        abiItem,\r\n        data: '0x',\r\n        params: nonIndexedInputs,\r\n        size: 0,\r\n      })\r\n    }\r\n  }\r\n\r\n  return {\r\n    eventName: name,\r\n    args: Object.values(args).length > 0 ? args : undefined,\r\n  } as unknown as DecodeEventLogReturnType<abi, eventName, topics, data, strict>\r\n}\r\n\r\nfunction decodeTopic({ param, value }: { param: AbiParameter; value: Hex }) {\r\n  if (\r\n    param.type === 'string' ||\r\n    param.type === 'bytes' ||\r\n    param.type === 'tuple' ||\r\n    param.type.match(/^(.*)\\[(\\d+)?\\]$/)\r\n  )\r\n    return value\r\n  const decodedArg = decodeAbiParameters([param], value) || []\r\n  return decodedArg[0]\r\n}\r\n", "// TODO(v3): checksum address.\r\n\r\nimport type { Abi, AbiEvent, AbiEventParameter, Address } from 'abitype'\r\nimport {\r\n  AbiEventSignatureNotFoundError,\r\n  DecodeLogDataMismatch,\r\n  DecodeLogTopicsMismatch,\r\n} from '../../errors/abi.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { ContractEventName, GetEventArgs } from '../../types/contract.js'\r\nimport type { Log } from '../../types/log.js'\r\nimport type { RpcLog } from '../../types/rpc.js'\r\nimport { isAddressEqual } from '../address/isAddressEqual.js'\r\nimport { toBytes } from '../encoding/toBytes.js'\r\nimport { keccak256 } from '../hash/keccak256.js'\r\nimport { toEventSelector } from '../hash/toEventSelector.js'\r\nimport {\r\n  type DecodeEventLogErrorType,\r\n  decodeEventLog,\r\n} from './decodeEventLog.js'\r\n\r\nexport type ParseEventLogsParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  eventName extends\r\n    | ContractEventName<abi>\r\n    | ContractEventName<abi>[]\r\n    | undefined = ContractEventName<abi>,\r\n  strict extends boolean | undefined = boolean | undefined,\r\n  ///\r\n  allArgs = GetEventArgs<\r\n    abi,\r\n    eventName extends ContractEventName<abi>\r\n      ? eventName\r\n      : ContractEventName<abi>,\r\n    {\r\n      EnableUnion: true\r\n      IndexedOnly: false\r\n      Required: false\r\n    }\r\n  >,\r\n> = {\r\n  /** Contract ABI. */\r\n  abi: abi\r\n  /** Arguments for the event. */\r\n  args?: allArgs | undefined\r\n  /** Contract event. */\r\n  eventName?:\r\n    | eventName\r\n    | ContractEventName<abi>\r\n    | ContractEventName<abi>[]\r\n    | undefined\r\n  /** List of logs. */\r\n  logs: (Log | RpcLog)[]\r\n  strict?: strict | boolean | undefined\r\n}\r\n\r\nexport type ParseEventLogsReturnType<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  eventName extends\r\n    | ContractEventName<abi>\r\n    | ContractEventName<abi>[]\r\n    | undefined = ContractEventName<abi>,\r\n  strict extends boolean | undefined = boolean | undefined,\r\n  ///\r\n  derivedEventName extends\r\n    | ContractEventName<abi>\r\n    | undefined = eventName extends ContractEventName<abi>[]\r\n    ? eventName[number]\r\n    : eventName,\r\n> = Log<bigint, number, false, undefined, strict, abi, derivedEventName>[]\r\n\r\nexport type ParseEventLogsErrorType = DecodeEventLogErrorType | ErrorType\r\n\r\n/**\r\n * Extracts & decodes logs matching the provided signature(s) (`abi` + optional `eventName`)\r\n * from a set of opaque logs.\r\n *\r\n * @param parameters - {@link ParseEventLogsParameters}\r\n * @returns The logs. {@link ParseEventLogsReturnType}\r\n *\r\n * @example\r\n * import { createClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { parseEventLogs } from 'viem/op-stack'\r\n *\r\n * const client = createClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n *\r\n * const receipt = await getTransactionReceipt(client, {\r\n *   hash: '0xec23b2ba4bc59ba61554507c1b1bc91649e6586eb2dd00c728e8ed0db8bb37ea',\r\n * })\r\n *\r\n * const logs = parseEventLogs({ logs: receipt.logs })\r\n * // [{ args: { ... }, eventName: 'TransactionDeposited', ... }, ...]\r\n */\r\nexport function parseEventLogs<\r\n  abi extends Abi | readonly unknown[],\r\n  strict extends boolean | undefined = true,\r\n  eventName extends\r\n    | ContractEventName<abi>\r\n    | ContractEventName<abi>[]\r\n    | undefined = undefined,\r\n>(\r\n  parameters: ParseEventLogsParameters<abi, eventName, strict>,\r\n): ParseEventLogsReturnType<abi, eventName, strict> {\r\n  const { abi, args, logs, strict = true } = parameters\r\n\r\n  const eventName = (() => {\r\n    if (!parameters.eventName) return undefined\r\n    if (Array.isArray(parameters.eventName)) return parameters.eventName\r\n    return [parameters.eventName as string]\r\n  })()\r\n\r\n  return logs\r\n    .map((log) => {\r\n      try {\r\n        const abiItem = (abi as Abi).find(\r\n          (abiItem) =>\r\n            abiItem.type === 'event' &&\r\n            log.topics[0] === toEventSelector(abiItem),\r\n        ) as AbiEvent\r\n        if (!abiItem) return null\r\n\r\n        const event = decodeEventLog({\r\n          ...log,\r\n          abi: [abiItem],\r\n          strict,\r\n        })\r\n\r\n        // Check that the decoded event name matches the provided event name.\r\n        if (eventName && !eventName.includes(event.eventName)) return null\r\n\r\n        // Check that the decoded event args match the provided args.\r\n        if (\r\n          !includesArgs({\r\n            args: event.args,\r\n            inputs: abiItem.inputs,\r\n            matchArgs: args,\r\n          })\r\n        )\r\n          return null\r\n\r\n        return { ...event, ...log }\r\n      } catch (err) {\r\n        let eventName: string | undefined\r\n        let isUnnamed: boolean | undefined\r\n\r\n        if (err instanceof AbiEventSignatureNotFoundError) return null\r\n        if (\r\n          err instanceof DecodeLogDataMismatch ||\r\n          err instanceof DecodeLogTopicsMismatch\r\n        ) {\r\n          // If strict mode is on, and log data/topics do not match event definition, skip.\r\n          if (strict) return null\r\n          eventName = err.abiItem.name\r\n          isUnnamed = err.abiItem.inputs?.some((x) => !('name' in x && x.name))\r\n        }\r\n\r\n        // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\r\n        return { ...log, args: isUnnamed ? [] : {}, eventName }\r\n      }\r\n    })\r\n    .filter(Boolean) as unknown as ParseEventLogsReturnType<\r\n    abi,\r\n    eventName,\r\n    strict\r\n  >\r\n}\r\n\r\nfunction includesArgs(parameters: {\r\n  args: unknown\r\n  inputs: AbiEvent['inputs']\r\n  matchArgs: unknown\r\n}) {\r\n  const { args, inputs, matchArgs } = parameters\r\n\r\n  if (!matchArgs) return true\r\n  if (!args) return false\r\n\r\n  function isEqual(input: AbiEventParameter, value: unknown, arg: unknown) {\r\n    try {\r\n      if (input.type === 'address')\r\n        return isAddressEqual(value as Address, arg as Address)\r\n      if (input.type === 'string' || input.type === 'bytes')\r\n        return keccak256(toBytes(value as string)) === arg\r\n      return value === arg\r\n    } catch {\r\n      return false\r\n    }\r\n  }\r\n\r\n  if (Array.isArray(args) && Array.isArray(matchArgs)) {\r\n    return matchArgs.every((value, index) => {\r\n      if (value === null || value === undefined) return true\r\n      const input = inputs[index]\r\n      if (!input) return false\r\n      const value_ = Array.isArray(value) ? value : [value]\r\n      return value_.some((value) => isEqual(input, value, args[index]))\r\n    })\r\n  }\r\n\r\n  if (\r\n    typeof args === 'object' &&\r\n    !Array.isArray(args) &&\r\n    typeof matchArgs === 'object' &&\r\n    !Array.isArray(matchArgs)\r\n  )\r\n    return Object.entries(matchArgs).every(([key, value]) => {\r\n      if (value === null || value === undefined) return true\r\n      const input = inputs.find((input) => input.name === key)\r\n      if (!input) return false\r\n      const value_ = Array.isArray(value) ? value : [value]\r\n      return value_.some((value) =>\r\n        isEqual(input, value, (args as Record<string, unknown>)[key]),\r\n      )\r\n    })\r\n\r\n  return false\r\n}\r\n", "import type { AbiEvent, Address } from 'abitype'\r\n\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type {\r\n  MaybeAbiEventName,\r\n  MaybeExtractEventArgsFromAbi,\r\n} from '../../types/contract.js'\r\nimport type { Log } from '../../types/log.js'\r\nimport type { Hash, LogTopic } from '../../types/misc.js'\r\nimport type { RpcLog } from '../../types/rpc.js'\r\nimport type { DecodeEventLogErrorType } from '../../utils/abi/decodeEventLog.js'\r\nimport {\r\n  type EncodeEventTopicsErrorType,\r\n  type EncodeEventTopicsParameters,\r\n  encodeEventTopics,\r\n} from '../../utils/abi/encodeEventTopics.js'\r\nimport { parseEventLogs } from '../../utils/abi/parseEventLogs.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type NumberToHexErrorType,\r\n  numberToHex,\r\n} from '../../utils/encoding/toHex.js'\r\nimport {\r\n  type FormatLogErrorType,\r\n  formatLog,\r\n} from '../../utils/formatters/log.js'\r\n\r\nexport type GetLogsParameters<\r\n  abiEvent extends AbiEvent | undefined = undefined,\r\n  abiEvents extends\r\n    | readonly AbiEvent[]\r\n    | readonly unknown[]\r\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  //\r\n  _eventName extends string | undefined = MaybeAbiEventName<abiEvent>,\r\n> = {\r\n  /** Address or list of addresses from which logs originated */\r\n  address?: Address | Address[] | undefined\r\n} & (\r\n  | {\r\n      event: abiEvent\r\n      events?: undefined\r\n      args?: MaybeExtractEventArgsFromAbi<abiEvents, _eventName> | undefined\r\n      /**\r\n       * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\r\n       * @default false\r\n       */\r\n      strict?: strict | undefined\r\n    }\r\n  | {\r\n      event?: undefined\r\n      events: abiEvents\r\n      args?: undefined\r\n      /**\r\n       * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\r\n       * @default false\r\n       */\r\n      strict?: strict | undefined\r\n    }\r\n  | {\r\n      event?: undefined\r\n      events?: undefined\r\n      args?: undefined\r\n      strict?: undefined\r\n    }\r\n) &\r\n  (\r\n    | {\r\n        /** Block number or tag after which to include logs */\r\n        fromBlock?: fromBlock | BlockNumber | BlockTag | undefined\r\n        /** Block number or tag before which to include logs */\r\n        toBlock?: toBlock | BlockNumber | BlockTag | undefined\r\n        blockHash?: undefined\r\n      }\r\n    | {\r\n        fromBlock?: undefined\r\n        toBlock?: undefined\r\n        /** Hash of block to include logs from */\r\n        blockHash?: Hash | undefined\r\n      }\r\n  )\r\n\r\nexport type GetLogsReturnType<\r\n  abiEvent extends AbiEvent | undefined = undefined,\r\n  abiEvents extends\r\n    | readonly AbiEvent[]\r\n    | readonly unknown[]\r\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  //\r\n  _eventName extends string | undefined = MaybeAbiEventName<abiEvent>,\r\n  _pending extends boolean =\r\n    | (fromBlock extends 'pending' ? true : false)\r\n    | (toBlock extends 'pending' ? true : false),\r\n> = Log<bigint, number, _pending, abiEvent, strict, abiEvents, _eventName>[]\r\n\r\nexport type GetLogsErrorType =\r\n  | DecodeEventLogErrorType\r\n  | EncodeEventTopicsErrorType\r\n  | FormatLogErrorType\r\n  | NumberToHexErrorType\r\n  | RequestErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Returns a list of event logs matching the provided parameters.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/getLogs\r\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/filters-and-logs/event-logs\r\n * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetLogsParameters}\r\n * @returns A list of event logs. {@link GetLogsReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http, parseAbiItem } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getLogs } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const logs = await getLogs(client)\r\n */\r\nexport async function getLogs<\r\n  chain extends Chain | undefined,\r\n  const abiEvent extends AbiEvent | undefined = undefined,\r\n  const abiEvents extends\r\n    | readonly AbiEvent[]\r\n    | readonly unknown[]\r\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n>(\r\n  client: Client<Transport, chain>,\r\n  {\r\n    address,\r\n    blockHash,\r\n    fromBlock,\r\n    toBlock,\r\n    event,\r\n    events: events_,\r\n    args,\r\n    strict: strict_,\r\n  }: GetLogsParameters<abiEvent, abiEvents, strict, fromBlock, toBlock> = {},\r\n): Promise<GetLogsReturnType<abiEvent, abiEvents, strict, fromBlock, toBlock>> {\r\n  const strict = strict_ ?? false\r\n  const events = events_ ?? (event ? [event] : undefined)\r\n\r\n  let topics: LogTopic[] = []\r\n  if (events) {\r\n    const encoded = (events as AbiEvent[]).flatMap((event) =>\r\n      encodeEventTopics({\r\n        abi: [event],\r\n        eventName: (event as AbiEvent).name,\r\n        args: events_ ? undefined : args,\r\n      } as EncodeEventTopicsParameters),\r\n    )\r\n    // TODO: Clean up type casting\r\n    topics = [encoded as LogTopic]\r\n    if (event) topics = topics[0] as LogTopic[]\r\n  }\r\n\r\n  let logs: RpcLog[]\r\n  if (blockHash) {\r\n    logs = await client.request({\r\n      method: 'eth_getLogs',\r\n      params: [{ address, topics, blockHash }],\r\n    })\r\n  } else {\r\n    logs = await client.request({\r\n      method: 'eth_getLogs',\r\n      params: [\r\n        {\r\n          address,\r\n          topics,\r\n          fromBlock:\r\n            typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\r\n          toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock,\r\n        },\r\n      ],\r\n    })\r\n  }\r\n\r\n  const formattedLogs = logs.map((log) => formatLog(log))\r\n  if (!events)\r\n    return formattedLogs as GetLogsReturnType<\r\n      abiEvent,\r\n      abiEvents,\r\n      strict,\r\n      fromBlock,\r\n      toBlock\r\n    >\r\n  return parseEventLogs({\r\n    abi: events,\r\n    args: args as any,\r\n    logs: formattedLogs,\r\n    strict,\r\n  }) as unknown as GetLogsReturnType<\r\n    abiEvent,\r\n    abiEvents,\r\n    strict,\r\n    fromBlock,\r\n    toBlock\r\n  >\r\n}\r\n", "import type { Abi, Address } from 'abitype'\r\n\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type {\r\n  ContractEventArgs,\r\n  ContractEventName,\r\n} from '../../types/contract.js'\r\nimport type { Log } from '../../types/log.js'\r\nimport type { Hash } from '../../types/misc.js'\r\nimport {\r\n  type GetAbiItemErrorType,\r\n  type GetAbiItemParameters,\r\n  getAbiItem,\r\n} from '../../utils/abi/getAbiItem.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport {\r\n  type GetLogsErrorType,\r\n  type GetLogsParameters,\r\n  getLogs,\r\n} from './getLogs.js'\r\n\r\nexport type GetContractEventsParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  eventName extends ContractEventName<abi> | undefined =\r\n    | ContractEventName<abi>\r\n    | undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n> = {\r\n  /** The address of the contract. */\r\n  address?: Address | Address[] | undefined\r\n  /** Contract ABI. */\r\n  abi: abi\r\n  args?:\r\n    | ContractEventArgs<\r\n        abi,\r\n        eventName extends ContractEventName<abi>\r\n          ? eventName\r\n          : ContractEventName<abi>\r\n      >\r\n    | undefined\r\n  /** Contract event. */\r\n  eventName?: eventName | ContractEventName<abi> | undefined\r\n  /**\r\n   * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\r\n   * @default false\r\n   */\r\n  strict?: strict | boolean | undefined\r\n} & (\r\n  | {\r\n      /** Block number or tag after which to include logs */\r\n      fromBlock?: fromBlock | BlockNumber | BlockTag | undefined\r\n      /** Block number or tag before which to include logs */\r\n      toBlock?: toBlock | BlockNumber | BlockTag | undefined\r\n      blockHash?: undefined\r\n    }\r\n  | {\r\n      fromBlock?: undefined\r\n      toBlock?: undefined\r\n      /** Hash of block to include logs from */\r\n      blockHash?: Hash | undefined\r\n    }\r\n)\r\n\r\nexport type GetContractEventsReturnType<\r\n  abi extends Abi | readonly unknown[] = readonly unknown[],\r\n  eventName extends ContractEventName<abi> | undefined =\r\n    | ContractEventName<abi>\r\n    | undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  ///\r\n  isPending extends boolean =\r\n    | (fromBlock extends 'pending' ? true : false)\r\n    | (toBlock extends 'pending' ? true : false),\r\n> = Log<bigint, number, isPending, undefined, strict, abi, eventName>[]\r\n\r\nexport type GetContractEventsErrorType =\r\n  | GetAbiItemErrorType\r\n  | GetLogsErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Returns a list of event logs emitted by a contract.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/getContractEvents\r\n * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetContractEventsParameters}\r\n * @returns A list of event logs. {@link GetContractEventsReturnType}\r\n *\r\n * @example\r\n * import { createClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getContractEvents } from 'viem/public'\r\n * import { wagmiAbi } from './abi'\r\n *\r\n * const client = createClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const logs = await getContractEvents(client, {\r\n *  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n *  abi: wagmiAbi,\r\n *  eventName: 'Transfer'\r\n * })\r\n */\r\nexport async function getContractEvents<\r\n  chain extends Chain | undefined,\r\n  const abi extends Abi | readonly unknown[],\r\n  eventName extends ContractEventName<abi> | undefined = undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n>(\r\n  client: Client<Transport, chain>,\r\n  parameters: GetContractEventsParameters<\r\n    abi,\r\n    eventName,\r\n    strict,\r\n    fromBlock,\r\n    toBlock\r\n  >,\r\n): Promise<\r\n  GetContractEventsReturnType<abi, eventName, strict, fromBlock, toBlock>\r\n> {\r\n  const {\r\n    abi,\r\n    address,\r\n    args,\r\n    blockHash,\r\n    eventName,\r\n    fromBlock,\r\n    toBlock,\r\n    strict,\r\n  } = parameters\r\n  const event = eventName\r\n    ? getAbiItem({ abi, name: eventName } as GetAbiItemParameters)\r\n    : undefined\r\n  const events = !event\r\n    ? (abi as Abi).filter((x) => x.type === 'event')\r\n    : undefined\r\n  return getAction(\r\n    client,\r\n    getLogs,\r\n    'getLogs',\r\n  )({\r\n    address,\r\n    args,\r\n    blockHash,\r\n    event,\r\n    events,\r\n    fromBlock,\r\n    toBlock,\r\n    strict,\r\n  } as {} as GetLogsParameters) as unknown as GetContractEventsReturnType<\r\n    abi,\r\n    eventName,\r\n    strict,\r\n    fromBlock,\r\n    toBlock\r\n  >\r\n}\r\n", "import type { Abi } from 'abitype'\r\n\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { BaseError } from '../../errors/base.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type {\r\n  ContractFunctionArgs,\r\n  ContractFunctionName,\r\n  ContractFunctionParameters,\r\n  ContractFunctionReturnType,\r\n} from '../../types/contract.js'\r\nimport type { UnionEvaluate } from '../../types/utils.js'\r\nimport {\r\n  type DecodeFunctionResultErrorType,\r\n  decodeFunctionResult,\r\n} from '../../utils/abi/decodeFunctionResult.js'\r\nimport {\r\n  type EncodeFunctionDataErrorType,\r\n  type EncodeFunctionDataParameters,\r\n  encodeFunctionData,\r\n} from '../../utils/abi/encodeFunctionData.js'\r\nimport {\r\n  type GetContractErrorReturnType,\r\n  getContractError,\r\n} from '../../utils/errors/getContractError.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\n\r\nimport { type CallErrorType, type CallParameters, call } from './call.js'\r\n\r\nexport type ReadContractParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends ContractFunctionName<\r\n    abi,\r\n    'pure' | 'view'\r\n  > = ContractFunctionName<abi, 'pure' | 'view'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'pure' | 'view',\r\n    functionName\r\n  > = ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\r\n> = UnionEvaluate<\r\n  Pick<\r\n    CallParameters,\r\n    | 'account'\r\n    | 'blockNumber'\r\n    | 'blockTag'\r\n    | 'factory'\r\n    | 'factoryData'\r\n    | 'stateOverride'\r\n  >\r\n> &\r\n  ContractFunctionParameters<abi, 'pure' | 'view', functionName, args, boolean>\r\n\r\nexport type ReadContractReturnType<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends ContractFunctionName<\r\n    abi,\r\n    'pure' | 'view'\r\n  > = ContractFunctionName<abi, 'pure' | 'view'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'pure' | 'view',\r\n    functionName\r\n  > = ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\r\n> = ContractFunctionReturnType<abi, 'pure' | 'view', functionName, args>\r\n\r\nexport type ReadContractErrorType = GetContractErrorReturnType<\r\n  CallErrorType | EncodeFunctionDataErrorType | DecodeFunctionResultErrorType\r\n>\r\n\r\n/**\r\n * Calls a read-only function on a contract, and returns the response.\r\n *\r\n * - Docs: https://viem.sh/docs/contract/readContract\r\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/reading-contracts\r\n *\r\n * A \"read-only\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\r\n *\r\n * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link ReadContractParameters}\r\n * @returns The response from the contract. Type is inferred. {@link ReadContractReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http, parseAbi } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { readContract } from 'viem/contract'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const result = await readContract(client, {\r\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n *   abi: parseAbi(['function balanceOf(address) view returns (uint256)']),\r\n *   functionName: 'balanceOf',\r\n *   args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\r\n * })\r\n * // 424122n\r\n */\r\nexport async function readContract<\r\n  chain extends Chain | undefined,\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\r\n  const args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\r\n>(\r\n  client: Client<Transport, chain>,\r\n  parameters: ReadContractParameters<abi, functionName, args>,\r\n): Promise<ReadContractReturnType<abi, functionName, args>> {\r\n  const { abi, address, args, functionName, ...rest } =\r\n    parameters as ReadContractParameters\r\n  const calldata = encodeFunctionData({\r\n    abi,\r\n    args,\r\n    functionName,\r\n  } as EncodeFunctionDataParameters)\r\n  try {\r\n    const { data } = await getAction(\r\n      client,\r\n      call,\r\n      'call',\r\n    )({\r\n      ...(rest as CallParameters),\r\n      data: calldata,\r\n      to: address!,\r\n    })\r\n    return decodeFunctionResult({\r\n      abi,\r\n      args,\r\n      functionName,\r\n      data: data || '0x',\r\n    }) as ReadContractReturnType<abi, functionName>\r\n  } catch (error) {\r\n    throw getContractError(error as BaseError, {\r\n      abi,\r\n      address,\r\n      args,\r\n      docsPath: '/docs/contract/readContract',\r\n      functionName,\r\n    })\r\n  }\r\n}\r\n", "import type { Abi, AbiFunction, AbiStateMutability, Address } from 'abitype'\r\n\r\nimport {\r\n  type ParseAccountErrorType,\r\n  parseAccount,\r\n} from '../../accounts/utils/parseAccount.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { BaseError } from '../../errors/base.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Account, ParseAccount } from '../../types/account.js'\r\nimport type { Chain, DeriveChain } from '../../types/chain.js'\r\nimport type {\r\n  ContractFunctionArgs,\r\n  ContractFunctionName,\r\n  ContractFunctionParameters,\r\n  ContractFunctionReturnType,\r\n  ExtractAbiFunctionForArgs,\r\n} from '../../types/contract.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type {\r\n  IsNarrowable,\r\n  NoInfer,\r\n  Prettify,\r\n  UnionEvaluate,\r\n  UnionOmit,\r\n} from '../../types/utils.js'\r\nimport {\r\n  type DecodeFunctionResultErrorType,\r\n  decodeFunctionResult,\r\n} from '../../utils/abi/decodeFunctionResult.js'\r\nimport {\r\n  type EncodeFunctionDataErrorType,\r\n  encodeFunctionData,\r\n} from '../../utils/abi/encodeFunctionData.js'\r\nimport {\r\n  type GetContractErrorReturnType,\r\n  getContractError,\r\n} from '../../utils/errors/getContractError.js'\r\nimport type { WriteContractParameters } from '../wallet/writeContract.js'\r\n\r\nimport type { TransactionRequest } from '../../types/transaction.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport { type CallErrorType, type CallParameters, call } from './call.js'\r\n\r\nexport type GetMutabilityAwareValue<\r\n  abi extends Abi | readonly unknown[],\r\n  mutability extends AbiStateMutability = AbiStateMutability,\r\n  functionName extends ContractFunctionName<\r\n    abi,\r\n    mutability\r\n  > = ContractFunctionName<abi, mutability>,\r\n  valueType = TransactionRequest['value'],\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    mutability,\r\n    functionName\r\n  > = ContractFunctionArgs<abi, mutability, functionName>,\r\n  abiFunction extends AbiFunction = abi extends Abi\r\n    ? ExtractAbiFunctionForArgs<abi, mutability, functionName, args>\r\n    : AbiFunction,\r\n  _Narrowable extends boolean = IsNarrowable<abi, Abi>,\r\n> = _Narrowable extends true\r\n  ? abiFunction['stateMutability'] extends 'payable'\r\n    ? { value?: NoInfer<valueType> | undefined }\r\n    : abiFunction['payable'] extends true\r\n      ? { value?: NoInfer<valueType> | undefined }\r\n      : { value?: undefined }\r\n  : { value?: NoInfer<valueType> | undefined }\r\n\r\nexport type SimulateContractParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends ContractFunctionName<\r\n    abi,\r\n    'nonpayable' | 'payable'\r\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\r\n  chain extends Chain | undefined = Chain | undefined,\r\n  chainOverride extends Chain | undefined = Chain | undefined,\r\n  accountOverride extends Account | Address | undefined = undefined,\r\n  ///\r\n  derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\r\n> = {\r\n  account?: accountOverride | undefined\r\n  chain?: chainOverride | undefined\r\n  /** Data to append to the end of the calldata. Useful for adding a [\"domain\" tag](https://opensea.notion.site/opensea/Seaport-Order-Attributions-ec2d69bf455041a5baa490941aad307f). */\r\n  dataSuffix?: Hex | undefined\r\n} & ContractFunctionParameters<\r\n  abi,\r\n  'nonpayable' | 'payable',\r\n  functionName,\r\n  args\r\n> &\r\n  UnionOmit<\r\n    CallParameters<derivedChain>,\r\n    | 'account'\r\n    | 'batch'\r\n    | 'code'\r\n    | 'to'\r\n    | 'data'\r\n    | 'factory'\r\n    | 'factoryData'\r\n    | 'value'\r\n  > &\r\n  GetMutabilityAwareValue<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName,\r\n    CallParameters<derivedChain> extends CallParameters\r\n      ? CallParameters<derivedChain>['value']\r\n      : CallParameters['value'],\r\n    args\r\n  >\r\n\r\nexport type SimulateContractReturnType<\r\n  out abi extends Abi | readonly unknown[] = Abi,\r\n  in out functionName extends ContractFunctionName<\r\n    abi,\r\n    'nonpayable' | 'payable'\r\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  in out args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\r\n  /** @ts-expect-error cast variance */\r\n  out chain extends Chain | undefined = Chain | undefined,\r\n  out account extends Account | undefined = Account | undefined,\r\n  out chainOverride extends Chain | undefined = Chain | undefined,\r\n  out accountOverride extends Account | Address | undefined =\r\n    | Account\r\n    | Address\r\n    | undefined,\r\n  ///\r\n  in out minimizedAbi extends Abi = readonly [\r\n    ExtractAbiFunctionForArgs<\r\n      abi extends Abi ? abi : Abi,\r\n      'nonpayable' | 'payable',\r\n      functionName,\r\n      args\r\n    >,\r\n  ],\r\n  out resolvedAccount extends Account | undefined = accountOverride extends\r\n    | Account\r\n    | Address\r\n    ? ParseAccount<accountOverride>\r\n    : account,\r\n> = {\r\n  result: ContractFunctionReturnType<\r\n    minimizedAbi,\r\n    'nonpayable' | 'payable',\r\n    functionName,\r\n    args\r\n  >\r\n  request: Prettify<\r\n    UnionEvaluate<\r\n      UnionOmit<\r\n        WriteContractParameters<\r\n          minimizedAbi,\r\n          functionName,\r\n          args,\r\n          chain,\r\n          undefined,\r\n          chainOverride\r\n        >,\r\n        'account' | 'abi' | 'args' | 'chain' | 'functionName'\r\n      >\r\n    > &\r\n      ContractFunctionParameters<\r\n        minimizedAbi,\r\n        'nonpayable' | 'payable',\r\n        functionName,\r\n        args\r\n      > & {\r\n        chain: DeriveChain<chain, chainOverride>\r\n      } & (resolvedAccount extends Account\r\n        ? { account: resolvedAccount }\r\n        : { account?: undefined })\r\n  >\r\n}\r\n\r\nexport type SimulateContractErrorType =\r\n  | ParseAccountErrorType\r\n  | EncodeFunctionDataErrorType\r\n  | GetContractErrorReturnType<CallErrorType | DecodeFunctionResultErrorType>\r\n  | ErrorType\r\n\r\n/**\r\n * Simulates/validates a contract interaction. This is useful for retrieving **return data** and **revert reasons** of contract write functions.\r\n *\r\n * - Docs: https://viem.sh/docs/contract/simulateContract\r\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/writing-to-contracts\r\n *\r\n * This function does not require gas to execute and _**does not**_ change the state of the blockchain. It is almost identical to [`readContract`](https://viem.sh/docs/contract/readContract), but also supports contract write functions.\r\n *\r\n * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link SimulateContractParameters}\r\n * @returns The simulation result and write request. {@link SimulateContractReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { simulateContract } from 'viem/contract'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const result = await simulateContract(client, {\r\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n *   abi: parseAbi(['function mint(uint32) view returns (uint32)']),\r\n *   functionName: 'mint',\r\n *   args: ['69420'],\r\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\r\n * })\r\n */\r\nexport async function simulateContract<\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined,\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  const args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  >,\r\n  chainOverride extends Chain | undefined = undefined,\r\n  accountOverride extends Account | Address | undefined = undefined,\r\n>(\r\n  client: Client<Transport, chain, account>,\r\n  parameters: SimulateContractParameters<\r\n    abi,\r\n    functionName,\r\n    args,\r\n    chain,\r\n    chainOverride,\r\n    accountOverride\r\n  >,\r\n): Promise<\r\n  SimulateContractReturnType<\r\n    abi,\r\n    functionName,\r\n    args,\r\n    chain,\r\n    account,\r\n    chainOverride,\r\n    accountOverride\r\n  >\r\n> {\r\n  const { abi, address, args, dataSuffix, functionName, ...callRequest } =\r\n    parameters as SimulateContractParameters\r\n\r\n  const account = callRequest.account\r\n    ? parseAccount(callRequest.account)\r\n    : client.account\r\n  const calldata = encodeFunctionData({ abi, args, functionName })\r\n  try {\r\n    const { data } = await getAction(\r\n      client,\r\n      call,\r\n      'call',\r\n    )({\r\n      batch: false,\r\n      data: `${calldata}${dataSuffix ? dataSuffix.replace('0x', '') : ''}`,\r\n      to: address,\r\n      ...callRequest,\r\n      account,\r\n    })\r\n    const result = decodeFunctionResult({\r\n      abi,\r\n      args,\r\n      functionName,\r\n      data: data || '0x',\r\n    })\r\n    const minimizedAbi = abi.filter(\r\n      (abiItem) =>\r\n        'name' in abiItem && abiItem.name === parameters.functionName,\r\n    )\r\n    return {\r\n      result,\r\n      request: {\r\n        abi: minimizedAbi,\r\n        address,\r\n        args,\r\n        dataSuffix,\r\n        functionName,\r\n        ...callRequest,\r\n        account,\r\n      },\r\n    } as unknown as SimulateContractReturnType<\r\n      abi,\r\n      functionName,\r\n      args,\r\n      chain,\r\n      account,\r\n      chainOverride,\r\n      accountOverride\r\n    >\r\n  } catch (error) {\r\n    throw getContractError(error as BaseError, {\r\n      abi,\r\n      address,\r\n      args,\r\n      docsPath: '/docs/contract/simulateContract',\r\n      functionName,\r\n      sender: account?.address,\r\n    })\r\n  }\r\n}\r\n", "import type { ErrorType } from '../errors/utils.js'\r\nimport type { MaybePromise } from '../types/utils.js'\r\n\r\ntype Callback = ((...args: any[]) => any) | undefined\r\ntype Callbacks = Record<string, Callback>\r\n\r\nexport type ObserveErrorType = ErrorType\r\n\r\n/** @internal */\r\nexport const listenersCache = /*#__PURE__*/ new Map<\r\n  string,\r\n  { id: number; fns: Callbacks }[]\r\n>()\r\n/** @internal */\r\nexport const cleanupCache = /*#__PURE__*/ new Map<string, () => void>()\r\n\r\ntype EmitFunction<callbacks extends Callbacks> = (\r\n  emit: callbacks,\r\n) => MaybePromise<void | (() => void)>\r\n\r\nlet callbackCount = 0\r\n\r\n/**\r\n * @description Sets up an observer for a given function. If another function\r\n * is set up under the same observer id, the function will only be called once\r\n * for both instances of the observer.\r\n */\r\nexport function observe<callbacks extends Callbacks>(\r\n  observerId: string,\r\n  callbacks: callbacks,\r\n  fn: EmitFunction<callbacks>,\r\n) {\r\n  const callbackId = ++callbackCount\r\n\r\n  const getListeners = () => listenersCache.get(observerId) || []\r\n\r\n  const unsubscribe = () => {\r\n    const listeners = getListeners()\r\n    listenersCache.set(\r\n      observerId,\r\n      listeners.filter((cb: any) => cb.id !== callbackId),\r\n    )\r\n  }\r\n\r\n  const unwatch = () => {\r\n    const cleanup = cleanupCache.get(observerId)\r\n    if (getListeners().length === 1 && cleanup) cleanup()\r\n    unsubscribe()\r\n  }\r\n\r\n  const listeners = getListeners()\r\n  listenersCache.set(observerId, [\r\n    ...listeners,\r\n    { id: callbackId, fns: callbacks },\r\n  ])\r\n\r\n  if (listeners && listeners.length > 0) return unwatch\r\n\r\n  const emit: callbacks = {} as callbacks\r\n  for (const key in callbacks) {\r\n    emit[key] = ((\r\n      ...args: Parameters<NonNullable<callbacks[keyof callbacks]>>\r\n    ) => {\r\n      const listeners = getListeners()\r\n      if (listeners.length === 0) return\r\n      for (const listener of listeners) listener.fns[key]?.(...args)\r\n    }) as callbacks[Extract<keyof callbacks, string>]\r\n  }\r\n\r\n  const cleanup = fn(emit)\r\n  if (typeof cleanup === 'function') cleanupCache.set(observerId, cleanup)\r\n\r\n  return unwatch\r\n}\r\n", "import type { ErrorType } from '../errors/utils.js'\r\nimport { wait } from './wait.js'\r\n\r\ntype PollOptions<data> = {\r\n  // Whether or not to emit when the polling starts.\r\n  emitOnBegin?: boolean | undefined\r\n  // The initial wait time (in ms) before polling.\r\n  initialWaitTime?: ((data: data | void) => Promise<number>) | undefined\r\n  // The interval (in ms).\r\n  interval: number\r\n}\r\n\r\nexport type PollErrorType = ErrorType\r\n\r\n/**\r\n * @description Polls a function at a specified interval.\r\n */\r\nexport function poll<data>(\r\n  fn: ({ unpoll }: { unpoll: () => void }) => Promise<data | void>,\r\n  { emitOnBegin, initialWaitTime, interval }: PollOptions<data>,\r\n) {\r\n  let active = true\r\n\r\n  const unwatch = () => (active = false)\r\n\r\n  const watch = async () => {\r\n    let data: data | void = undefined\r\n    if (emitOnBegin) data = await fn({ unpoll: unwatch })\r\n\r\n    const initialWait = (await initialWaitTime?.(data)) ?? interval\r\n    await wait(initialWait)\r\n\r\n    const poll = async () => {\r\n      if (!active) return\r\n      await fn({ unpoll: unwatch })\r\n      await wait(interval)\r\n      poll()\r\n    }\r\n\r\n    poll()\r\n  }\r\n  watch()\r\n\r\n  return unwatch\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\n\r\n/** @internal */\r\nexport const promiseCache = /*#__PURE__*/ new Map()\r\n/** @internal */\r\nexport const responseCache = /*#__PURE__*/ new Map()\r\n\r\nexport type GetCacheErrorType = ErrorType\r\n\r\nexport function getCache<data>(cacheKey: string) {\r\n  const buildCache = <data>(cacheKey: string, cache: Map<string, data>) => ({\r\n    clear: () => cache.delete(cacheKey),\r\n    get: () => cache.get(cacheKey),\r\n    set: (data: data) => cache.set(cacheKey, data),\r\n  })\r\n\r\n  const promise = buildCache<Promise<data>>(cacheKey, promiseCache)\r\n  const response = buildCache<{ created: Date; data: data }>(\r\n    cacheKey,\r\n    responseCache,\r\n  )\r\n\r\n  return {\r\n    clear: () => {\r\n      promise.clear()\r\n      response.clear()\r\n    },\r\n    promise,\r\n    response,\r\n  }\r\n}\r\n\r\ntype WithCacheParameters = {\r\n  /** The key to cache the data against. */\r\n  cacheKey: string\r\n  /** The time that cached data will remain in memory. Default: Infinity (no expiry) */\r\n  cacheTime?: number | undefined\r\n}\r\n\r\n/**\r\n * @description Returns the result of a given promise, and caches the result for\r\n * subsequent invocations against a provided cache key.\r\n */\r\nexport async function withCache<data>(\r\n  fn: () => Promise<data>,\r\n  { cacheKey, cacheTime = Number.POSITIVE_INFINITY }: WithCacheParameters,\r\n) {\r\n  const cache = getCache<data>(cacheKey)\r\n\r\n  // If a response exists in the cache, and it's not expired, return it\r\n  // and do not invoke the promise.\r\n  // If the max age is 0, the cache is disabled.\r\n  const response = cache.response.get()\r\n  if (response && cacheTime > 0) {\r\n    const age = new Date().getTime() - response.created.getTime()\r\n    if (age < cacheTime) return response.data\r\n  }\r\n\r\n  let promise = cache.promise.get()\r\n  if (!promise) {\r\n    promise = fn()\r\n\r\n    // Store the promise in the cache so that subsequent invocations\r\n    // will wait for the same promise to resolve (deduping).\r\n    cache.promise.set(promise)\r\n  }\r\n\r\n  try {\r\n    const data = await promise\r\n\r\n    // Store the response in the cache so that subsequent invocations\r\n    // will return the same response.\r\n    cache.response.set({ created: new Date(), data })\r\n\r\n    return data\r\n  } finally {\r\n    // Clear the promise cache so that subsequent invocations will\r\n    // invoke the promise again.\r\n    cache.promise.clear()\r\n  }\r\n}\r\n", "import type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type GetCacheErrorType,\r\n  getCache,\r\n  withCache,\r\n} from '../../utils/promise/withCache.js'\r\n\r\nexport type GetBlockNumberParameters = {\r\n  /** Time (in ms) that cached block number will remain in memory. */\r\n  cacheTime?: number | undefined\r\n}\r\n\r\nexport type GetBlockNumberReturnType = bigint\r\n\r\nexport type GetBlockNumberErrorType = RequestErrorType | ErrorType\r\n\r\nconst cacheKey = (id: string) => `blockNumber.${id}`\r\n\r\n/** @internal */\r\nexport type GetBlockNumberCacheErrorType = GetCacheErrorType | ErrorType\r\n\r\n/** @internal */\r\nexport function getBlockNumberCache(id: string) {\r\n  return getCache(cacheKey(id))\r\n}\r\n\r\n/**\r\n * Returns the number of the most recent block seen.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/getBlockNumber\r\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/fetching-blocks\r\n * - JSON-RPC Methods: [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetBlockNumberParameters}\r\n * @returns The number of the block. {@link GetBlockNumberReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getBlockNumber } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const blockNumber = await getBlockNumber(client)\r\n * // 69420n\r\n */\r\nexport async function getBlockNumber<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  { cacheTime = client.cacheTime }: GetBlockNumberParameters = {},\r\n): Promise<GetBlockNumberReturnType> {\r\n  const blockNumberHex = await withCache(\r\n    () =>\r\n      client.request({\r\n        method: 'eth_blockNumber',\r\n      }),\r\n    { cacheKey: cacheKey(client.uid), cacheTime },\r\n  )\r\n  return BigInt(blockNumberHex)\r\n}\r\n", "import type { Abi, AbiEvent, ExtractAbiEvent } from 'abitype'\r\n\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { RpcLog } from '../../index.js'\r\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Filter, FilterType } from '../../types/filter.js'\r\nimport type { Log } from '../../types/log.js'\r\nimport type { Hash } from '../../types/misc.js'\r\nimport type { DecodeEventLogErrorType } from '../../utils/abi/decodeEventLog.js'\r\nimport { parseEventLogs } from '../../utils/abi/parseEventLogs.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type FormatLogErrorType,\r\n  formatLog,\r\n} from '../../utils/formatters/log.js'\r\n\r\nexport type GetFilterChangesParameters<\r\n  filterType extends FilterType = FilterType,\r\n  abi extends Abi | readonly unknown[] | undefined = undefined,\r\n  eventName extends string | undefined = undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n> = {\r\n  filter: Filter<filterType, abi, eventName, any, strict, fromBlock, toBlock>\r\n}\r\n\r\nexport type GetFilterChangesReturnType<\r\n  filterType extends FilterType = FilterType,\r\n  abi extends Abi | readonly unknown[] | undefined = undefined,\r\n  eventName extends string | undefined = undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  _AbiEvent extends AbiEvent | undefined = abi extends Abi\r\n    ? eventName extends string\r\n      ? ExtractAbiEvent<abi, eventName>\r\n      : undefined\r\n    : undefined,\r\n  _Pending extends boolean =\r\n    | (fromBlock extends 'pending' ? true : false)\r\n    | (toBlock extends 'pending' ? true : false),\r\n> = filterType extends 'event'\r\n  ? Log<bigint, number, _Pending, _AbiEvent, strict, abi, eventName>[]\r\n  : Hash[]\r\n\r\nexport type GetFilterChangesErrorType =\r\n  | RequestErrorType\r\n  | DecodeEventLogErrorType\r\n  | FormatLogErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Returns a list of logs or hashes based on a [Filter](/docs/glossary/terms#filter) since the last time it was called.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/getFilterChanges\r\n * - JSON-RPC Methods: [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges)\r\n *\r\n * A Filter can be created from the following actions:\r\n *\r\n * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\r\n * - [`createContractEventFilter`](https://viem.sh/docs/contract/createContractEventFilter)\r\n * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\r\n * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\r\n *\r\n * Depending on the type of filter, the return value will be different:\r\n *\r\n * - If the filter was created with `createContractEventFilter` or `createEventFilter`, it returns a list of logs.\r\n * - If the filter was created with `createPendingTransactionFilter`, it returns a list of transaction hashes.\r\n * - If the filter was created with `createBlockFilter`, it returns a list of block hashes.\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetFilterChangesParameters}\r\n * @returns Logs or hashes. {@link GetFilterChangesReturnType}\r\n *\r\n * @example\r\n * // Blocks\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { createBlockFilter, getFilterChanges } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const filter = await createBlockFilter(client)\r\n * const hashes = await getFilterChanges(client, { filter })\r\n *\r\n * @example\r\n * // Contract Events\r\n * import { createPublicClient, http, parseAbi } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { createContractEventFilter, getFilterChanges } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const filter = await createContractEventFilter(client, {\r\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\r\n *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\r\n *   eventName: 'Transfer',\r\n * })\r\n * const logs = await getFilterChanges(client, { filter })\r\n *\r\n * @example\r\n * // Raw Events\r\n * import { createPublicClient, http, parseAbiItem } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { createEventFilter, getFilterChanges } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const filter = await createEventFilter(client, {\r\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\r\n *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\r\n * })\r\n * const logs = await getFilterChanges(client, { filter })\r\n *\r\n * @example\r\n * // Transactions\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { createPendingTransactionFilter, getFilterChanges } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const filter = await createPendingTransactionFilter(client)\r\n * const hashes = await getFilterChanges(client, { filter })\r\n */\r\nexport async function getFilterChanges<\r\n  transport extends Transport,\r\n  chain extends Chain | undefined,\r\n  filterType extends FilterType,\r\n  const abi extends Abi | readonly unknown[] | undefined,\r\n  eventName extends string | undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n>(\r\n  _client: Client<transport, chain>,\r\n  {\r\n    filter,\r\n  }: GetFilterChangesParameters<\r\n    filterType,\r\n    abi,\r\n    eventName,\r\n    strict,\r\n    fromBlock,\r\n    toBlock\r\n  >,\r\n): Promise<\r\n  GetFilterChangesReturnType<\r\n    filterType,\r\n    abi,\r\n    eventName,\r\n    strict,\r\n    fromBlock,\r\n    toBlock\r\n  >\r\n> {\r\n  const strict = 'strict' in filter && filter.strict\r\n\r\n  const logs = await filter.request({\r\n    method: 'eth_getFilterChanges',\r\n    params: [filter.id],\r\n  })\r\n\r\n  if (typeof logs[0] === 'string')\r\n    return logs as GetFilterChangesReturnType<\r\n      filterType,\r\n      abi,\r\n      eventName,\r\n      strict,\r\n      fromBlock,\r\n      toBlock\r\n    >\r\n\r\n  const formattedLogs = logs.map((log) => formatLog(log as RpcLog))\r\n  if (!('abi' in filter) || !filter.abi)\r\n    return formattedLogs as GetFilterChangesReturnType<\r\n      filterType,\r\n      abi,\r\n      eventName,\r\n      strict,\r\n      fromBlock,\r\n      toBlock\r\n    >\r\n  return parseEventLogs({\r\n    abi: filter.abi,\r\n    logs: formattedLogs,\r\n    strict,\r\n  }) as unknown as GetFilterChangesReturnType<\r\n    filterType,\r\n    abi,\r\n    eventName,\r\n    strict,\r\n    fromBlock,\r\n    toBlock\r\n  >\r\n}\r\n", "import type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Filter } from '../../types/filter.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\n\r\nexport type UninstallFilterParameters = {\r\n  filter: Filter<any>\r\n}\r\nexport type UninstallFilterReturnType = boolean\r\n\r\nexport type UninstallFilterErrorType = RequestErrorType | ErrorType\r\n\r\n/**\r\n * Destroys a [`Filter`](https://viem.sh/docs/glossary/types#filter).\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/uninstallFilter\r\n * - JSON-RPC Methods: [`eth_uninstallFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_uninstallFilter)\r\n *\r\n * Destroys a Filter that was created from one of the following Actions:\r\n * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\r\n * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\r\n * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link UninstallFilterParameters}\r\n * @returns A boolean indicating if the Filter was successfully uninstalled. {@link UninstallFilterReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { createPendingTransactionFilter, uninstallFilter } from 'viem/public'\r\n *\r\n * const filter = await createPendingTransactionFilter(client)\r\n * const uninstalled = await uninstallFilter(client, { filter })\r\n * // true\r\n */\r\nexport async function uninstallFilter<\r\n  transport extends Transport,\r\n  chain extends Chain | undefined,\r\n>(\r\n  _client: Client<transport, chain>,\r\n  { filter }: UninstallFilterParameters,\r\n): Promise<UninstallFilterReturnType> {\r\n  return filter.request({\r\n    method: 'eth_uninstallFilter',\r\n    params: [filter.id],\r\n  })\r\n}\r\n", "import type { Abi, Address, ExtractAbiEvent } from 'abitype'\r\n\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Filter } from '../../types/filter.js'\r\nimport type { Log } from '../../types/log.js'\r\n\r\nimport {\r\n  DecodeLogDataMismatch,\r\n  DecodeLogTopicsMismatch,\r\n} from '../../errors/abi.js'\r\nimport { InvalidInputRpcError } from '../../errors/rpc.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { BlockNumber } from '../../types/block.js'\r\nimport type {\r\n  ContractEventArgs,\r\n  ContractEventName,\r\n} from '../../types/contract.js'\r\nimport type { LogTopic } from '../../types/misc.js'\r\nimport type { GetPollOptions } from '../../types/transport.js'\r\nimport { decodeEventLog } from '../../utils/abi/decodeEventLog.js'\r\nimport {\r\n  type EncodeEventTopicsParameters,\r\n  encodeEventTopics,\r\n} from '../../utils/abi/encodeEventTopics.js'\r\nimport { formatLog } from '../../utils/formatters/log.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\r\nimport { poll } from '../../utils/poll.js'\r\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\r\nimport { createContractEventFilter } from './createContractEventFilter.js'\r\nimport { getBlockNumber } from './getBlockNumber.js'\r\nimport {\r\n  type GetContractEventsParameters,\r\n  getContractEvents,\r\n} from './getContractEvents.js'\r\nimport { getFilterChanges } from './getFilterChanges.js'\r\nimport { uninstallFilter } from './uninstallFilter.js'\r\n\r\nexport type WatchContractEventOnLogsParameter<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  eventName extends ContractEventName<abi> = ContractEventName<abi>,\r\n  strict extends boolean | undefined = undefined,\r\n> = abi extends Abi\r\n  ? Abi extends abi\r\n    ? Log[]\r\n    : Log<bigint, number, false, ExtractAbiEvent<abi, eventName>, strict>[]\r\n  : Log[]\r\n\r\nexport type WatchContractEventOnLogsFn<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  eventName extends ContractEventName<abi> = ContractEventName<abi>,\r\n  strict extends boolean | undefined = undefined,\r\n> = (logs: WatchContractEventOnLogsParameter<abi, eventName, strict>) => void\r\n\r\nexport type WatchContractEventParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  eventName extends ContractEventName<abi> | undefined = ContractEventName<abi>,\r\n  strict extends boolean | undefined = undefined,\r\n  transport extends Transport = Transport,\r\n> = {\r\n  /** The address of the contract. */\r\n  address?: Address | Address[] | undefined\r\n  /** Contract ABI. */\r\n  abi: abi\r\n  args?:\r\n    | ContractEventArgs<\r\n        abi,\r\n        eventName extends ContractEventName<abi>\r\n          ? eventName\r\n          : ContractEventName<abi>\r\n      >\r\n    | undefined\r\n  /** Contract event. */\r\n  eventName?: eventName | ContractEventName<abi> | undefined\r\n  /** Block to start listening from. */\r\n  fromBlock?: BlockNumber<bigint> | undefined\r\n  /** The callback to call when an error occurred when trying to get for a new block. */\r\n  onError?: ((error: Error) => void) | undefined\r\n  /** The callback to call when new event logs are received. */\r\n  onLogs: WatchContractEventOnLogsFn<\r\n    abi,\r\n    eventName extends ContractEventName<abi>\r\n      ? eventName\r\n      : ContractEventName<abi>,\r\n    strict\r\n  >\r\n  /**\r\n   * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\r\n   * @default false\r\n   */\r\n  strict?: strict | boolean | undefined\r\n} & GetPollOptions<transport>\r\n\r\nexport type WatchContractEventReturnType = () => void\r\n\r\nexport type WatchContractEventErrorType =\r\n  | StringifyErrorType\r\n  | ObserveErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Watches and returns emitted contract event logs.\r\n *\r\n * - Docs: https://viem.sh/docs/contract/watchContractEvent\r\n *\r\n * This Action will batch up all the event logs found within the [`pollingInterval`](https://viem.sh/docs/contract/watchContractEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/contract/watchContractEvent#onLogs).\r\n *\r\n * `watchContractEvent` will attempt to create an [Event Filter](https://viem.sh/docs/contract/createContractEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchContractEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link WatchContractEventParameters}\r\n * @returns A function that can be invoked to stop watching for new event logs. {@link WatchContractEventReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http, parseAbi } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { watchContractEvent } from 'viem/contract'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const unwatch = watchContractEvent(client, {\r\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n *   abi: parseAbi(['event Transfer(address indexed from, address indexed to, uint256 value)']),\r\n *   eventName: 'Transfer',\r\n *   args: { from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b' },\r\n *   onLogs: (logs) => console.log(logs),\r\n * })\r\n */\r\nexport function watchContractEvent<\r\n  chain extends Chain | undefined,\r\n  const abi extends Abi | readonly unknown[],\r\n  eventName extends ContractEventName<abi> | undefined = undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  transport extends Transport = Transport,\r\n>(\r\n  client: Client<transport, chain>,\r\n  parameters: WatchContractEventParameters<abi, eventName, strict, transport>,\r\n): WatchContractEventReturnType {\r\n  const {\r\n    abi,\r\n    address,\r\n    args,\r\n    batch = true,\r\n    eventName,\r\n    fromBlock,\r\n    onError,\r\n    onLogs,\r\n    poll: poll_,\r\n    pollingInterval = client.pollingInterval,\r\n    strict: strict_,\r\n  } = parameters\r\n\r\n  const enablePolling = (() => {\r\n    if (typeof poll_ !== 'undefined') return poll_\r\n    if (typeof fromBlock === 'bigint') return true\r\n    if (client.transport.type === 'webSocket') return false\r\n    if (\r\n      client.transport.type === 'fallback' &&\r\n      client.transport.transports[0].config.type === 'webSocket'\r\n    )\r\n      return false\r\n    return true\r\n  })()\r\n\r\n  const pollContractEvent = () => {\r\n    const strict = strict_ ?? false\r\n    const observerId = stringify([\r\n      'watchContractEvent',\r\n      address,\r\n      args,\r\n      batch,\r\n      client.uid,\r\n      eventName,\r\n      pollingInterval,\r\n      strict,\r\n      fromBlock,\r\n    ])\r\n\r\n    return observe(observerId, { onLogs, onError }, (emit) => {\r\n      let previousBlockNumber: bigint\r\n      if (fromBlock !== undefined) previousBlockNumber = fromBlock - 1n\r\n      let filter: Filter<'event', abi, eventName> | undefined\r\n      let initialized = false\r\n\r\n      const unwatch = poll(\r\n        async () => {\r\n          if (!initialized) {\r\n            try {\r\n              filter = (await getAction(\r\n                client,\r\n                createContractEventFilter,\r\n                'createContractEventFilter',\r\n              )({\r\n                abi,\r\n                address,\r\n                args: args as any,\r\n                eventName: eventName as any,\r\n                strict: strict as any,\r\n                fromBlock,\r\n              })) as Filter<'event', abi, eventName>\r\n            } catch {}\r\n            initialized = true\r\n            return\r\n          }\r\n\r\n          try {\r\n            let logs: Log[]\r\n            if (filter) {\r\n              logs = await getAction(\r\n                client,\r\n                getFilterChanges,\r\n                'getFilterChanges',\r\n              )({ filter })\r\n            } else {\r\n              // If the filter doesn't exist, we will fall back to use `getLogs`.\r\n              // The fall back exists because some RPC Providers do not support filters.\r\n\r\n              // Fetch the block number to use for `getLogs`.\r\n              const blockNumber = await getAction(\r\n                client,\r\n                getBlockNumber,\r\n                'getBlockNumber',\r\n              )({})\r\n\r\n              // If the block number has changed, we will need to fetch the logs.\r\n              // If the block number doesn't exist, we are yet to reach the first poll interval,\r\n              // so do not emit any logs.\r\n              if (previousBlockNumber && previousBlockNumber < blockNumber) {\r\n                logs = await getAction(\r\n                  client,\r\n                  getContractEvents,\r\n                  'getContractEvents',\r\n                )({\r\n                  abi,\r\n                  address,\r\n                  args,\r\n                  eventName,\r\n                  fromBlock: previousBlockNumber + 1n,\r\n                  toBlock: blockNumber,\r\n                  strict,\r\n                } as {} as GetContractEventsParameters)\r\n              } else {\r\n                logs = []\r\n              }\r\n              previousBlockNumber = blockNumber\r\n            }\r\n\r\n            if (logs.length === 0) return\r\n            if (batch) emit.onLogs(logs as any)\r\n            else for (const log of logs) emit.onLogs([log] as any)\r\n          } catch (err) {\r\n            // If a filter has been set and gets uninstalled, providers will throw an InvalidInput error.\r\n            // Reinitialize the filter when this occurs\r\n            if (filter && err instanceof InvalidInputRpcError)\r\n              initialized = false\r\n            emit.onError?.(err as Error)\r\n          }\r\n        },\r\n        {\r\n          emitOnBegin: true,\r\n          interval: pollingInterval,\r\n        },\r\n      )\r\n\r\n      return async () => {\r\n        if (filter)\r\n          await getAction(\r\n            client,\r\n            uninstallFilter,\r\n            'uninstallFilter',\r\n          )({ filter })\r\n        unwatch()\r\n      }\r\n    })\r\n  }\r\n\r\n  const subscribeContractEvent = () => {\r\n    const strict = strict_ ?? false\r\n    const observerId = stringify([\r\n      'watchContractEvent',\r\n      address,\r\n      args,\r\n      batch,\r\n      client.uid,\r\n      eventName,\r\n      pollingInterval,\r\n      strict,\r\n    ])\r\n\r\n    let active = true\r\n    let unsubscribe = () => (active = false)\r\n    return observe(observerId, { onLogs, onError }, (emit) => {\r\n      ;(async () => {\r\n        try {\r\n          const transport = (() => {\r\n            if (client.transport.type === 'fallback') {\r\n              const transport = client.transport.transports.find(\r\n                (transport: ReturnType<Transport>) =>\r\n                  transport.config.type === 'webSocket',\r\n              )\r\n              if (!transport) return client.transport\r\n              return transport.value\r\n            }\r\n            return client.transport\r\n          })()\r\n\r\n          const topics: LogTopic[] = eventName\r\n            ? encodeEventTopics({\r\n                abi: abi,\r\n                eventName: eventName,\r\n                args,\r\n              } as EncodeEventTopicsParameters)\r\n            : []\r\n\r\n          const { unsubscribe: unsubscribe_ } = await transport.subscribe({\r\n            params: ['logs', { address, topics }],\r\n            onData(data: any) {\r\n              if (!active) return\r\n              const log = data.result\r\n              try {\r\n                const { eventName, args } = decodeEventLog({\r\n                  abi: abi,\r\n                  data: log.data,\r\n                  topics: log.topics as any,\r\n                  strict: strict_,\r\n                })\r\n                const formatted = formatLog(log, {\r\n                  args,\r\n                  eventName: eventName as string,\r\n                })\r\n                emit.onLogs([formatted] as any)\r\n              } catch (err) {\r\n                let eventName: string | undefined\r\n                let isUnnamed: boolean | undefined\r\n                if (\r\n                  err instanceof DecodeLogDataMismatch ||\r\n                  err instanceof DecodeLogTopicsMismatch\r\n                ) {\r\n                  // If strict mode is on, and log data/topics do not match event definition, skip.\r\n                  if (strict_) return\r\n                  eventName = err.abiItem.name\r\n                  isUnnamed = err.abiItem.inputs?.some(\r\n                    (x) => !('name' in x && x.name),\r\n                  )\r\n                }\r\n\r\n                // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\r\n                const formatted = formatLog(log, {\r\n                  args: isUnnamed ? [] : {},\r\n                  eventName,\r\n                })\r\n                emit.onLogs([formatted] as any)\r\n              }\r\n            },\r\n            onError(error: Error) {\r\n              emit.onError?.(error)\r\n            },\r\n          })\r\n          unsubscribe = unsubscribe_\r\n          if (!active) unsubscribe()\r\n        } catch (err) {\r\n          onError?.(err as Error)\r\n        }\r\n      })()\r\n      return () => unsubscribe()\r\n    })\r\n  }\r\n\r\n  return enablePolling ? pollContractEvent() : subscribeContractEvent()\r\n}\r\n", "import type { Account } from '../../accounts/types.js'\r\nimport type { SendTransactionParameters } from '../../actions/wallet/sendTransaction.js'\r\nimport type { BaseError } from '../../errors/base.js'\r\nimport { UnknownNodeError } from '../../errors/node.js'\r\nimport {\r\n  TransactionExecutionError,\r\n  type TransactionExecutionErrorType,\r\n} from '../../errors/transaction.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\n\r\nimport {\r\n  type GetNodeErrorParameters,\r\n  type GetNodeErrorReturnType,\r\n  getNodeError,\r\n} from './getNodeError.js'\r\n\r\nexport type GetTransactionErrorParameters = Omit<\r\n  SendTransactionParameters,\r\n  'account' | 'chain'\r\n> & {\r\n  account: Account\r\n  chain?: Chain | undefined\r\n  docsPath?: string | undefined\r\n}\r\n\r\nexport type GetTransactionErrorReturnType<cause = ErrorType> = Omit<\r\n  TransactionExecutionErrorType,\r\n  'cause'\r\n> & { cause: cause | GetNodeErrorReturnType }\r\n\r\nexport function getTransactionError<err extends ErrorType<string>>(\r\n  err: err,\r\n  { docsPath, ...args }: GetTransactionErrorParameters,\r\n): GetTransactionErrorReturnType<err> {\r\n  const cause = (() => {\r\n    const cause = getNodeError(\r\n      err as {} as BaseError,\r\n      args as GetNodeErrorParameters,\r\n    )\r\n    if (cause instanceof UnknownNodeError) return err as {} as BaseError\r\n    return cause\r\n  })()\r\n  return new TransactionExecutionError(cause, {\r\n    docsPath,\r\n    ...args,\r\n  }) as GetTransactionErrorReturnType<err>\r\n}\r\n", "import type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Hash } from '../../types/misc.js'\r\nimport type { TransactionSerializedGeneric } from '../../types/transaction.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\n\r\nexport type SendRawTransactionParameters = {\r\n  /** The signed serialized transaction. */\r\n  serializedTransaction: TransactionSerializedGeneric\r\n}\r\n\r\nexport type SendRawTransactionReturnType = Hash\r\n\r\nexport type SendRawTransactionErrorType = RequestErrorType | ErrorType\r\n\r\n/**\r\n * Sends a **signed** transaction to the network\r\n *\r\n * - Docs: https://viem.sh/docs/actions/wallet/sendRawTransaction\r\n * - JSON-RPC Method: [`eth_sendRawTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link SendRawTransactionParameters}\r\n * @returns The transaction hash. {@link SendRawTransactionReturnType}\r\n *\r\n * @example\r\n * import { createWalletClient, custom } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { sendRawTransaction } from 'viem/wallet'\r\n *\r\n * const client = createWalletClient({\r\n *   chain: mainnet,\r\n *   transport: custom(window.ethereum),\r\n * })\r\n *\r\n * const hash = await sendRawTransaction(client, {\r\n *   serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\r\n * })\r\n */\r\nexport async function sendRawTransaction<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  { serializedTransaction }: SendRawTransactionParameters,\r\n): Promise<SendRawTransactionReturnType> {\r\n  return client.request(\r\n    {\r\n      method: 'eth_sendRawTransaction',\r\n      params: [serializedTransaction],\r\n    },\r\n    { retryCount: 0 },\r\n  )\r\n}\r\n", "import type { Account } from '../../accounts/types.js'\r\nimport {\r\n  type ParseAccountErrorType,\r\n  parseAccount,\r\n} from '../../accounts/utils/parseAccount.js'\r\nimport type { SignTransactionErrorType } from '../../accounts/utils/signTransaction.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport {\r\n  AccountNotFoundError,\r\n  type AccountNotFoundErrorType,\r\n  AccountTypeNotSupportedError,\r\n  type AccountTypeNotSupportedErrorType,\r\n} from '../../errors/account.js'\r\nimport { BaseError } from '../../errors/base.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport {\r\n  type RecoverAuthorizationAddressErrorType,\r\n  recoverAuthorizationAddress,\r\n} from '../../experimental/eip7702/utils/recoverAuthorizationAddress.js'\r\nimport type { GetAccountParameter } from '../../types/account.js'\r\nimport type { Chain, DeriveChain } from '../../types/chain.js'\r\nimport type { GetChainParameter } from '../../types/chain.js'\r\nimport type { GetTransactionRequestKzgParameter } from '../../types/kzg.js'\r\nimport type { Hash } from '../../types/misc.js'\r\nimport type { TransactionRequest } from '../../types/transaction.js'\r\nimport type { UnionOmit } from '../../types/utils.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type AssertCurrentChainErrorType,\r\n  assertCurrentChain,\r\n} from '../../utils/chain/assertCurrentChain.js'\r\nimport {\r\n  type GetTransactionErrorReturnType,\r\n  getTransactionError,\r\n} from '../../utils/errors/getTransactionError.js'\r\nimport { extract } from '../../utils/formatters/extract.js'\r\nimport {\r\n  type FormattedTransactionRequest,\r\n  formatTransactionRequest,\r\n} from '../../utils/formatters/transactionRequest.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport {\r\n  type AssertRequestErrorType,\r\n  type AssertRequestParameters,\r\n  assertRequest,\r\n} from '../../utils/transaction/assertRequest.js'\r\nimport { type GetChainIdErrorType, getChainId } from '../public/getChainId.js'\r\nimport {\r\n  type PrepareTransactionRequestErrorType,\r\n  defaultParameters,\r\n  prepareTransactionRequest,\r\n} from './prepareTransactionRequest.js'\r\nimport {\r\n  type SendRawTransactionErrorType,\r\n  sendRawTransaction,\r\n} from './sendRawTransaction.js'\r\n\r\nexport type SendTransactionRequest<\r\n  chain extends Chain | undefined = Chain | undefined,\r\n  chainOverride extends Chain | undefined = Chain | undefined,\r\n  ///\r\n  _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\r\n> = UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'> &\r\n  GetTransactionRequestKzgParameter\r\n\r\nexport type SendTransactionParameters<\r\n  chain extends Chain | undefined = Chain | undefined,\r\n  account extends Account | undefined = Account | undefined,\r\n  chainOverride extends Chain | undefined = Chain | undefined,\r\n  request extends SendTransactionRequest<\r\n    chain,\r\n    chainOverride\r\n  > = SendTransactionRequest<chain, chainOverride>,\r\n> = request &\r\n  GetAccountParameter<account> &\r\n  GetChainParameter<chain, chainOverride> &\r\n  GetTransactionRequestKzgParameter<request>\r\n\r\nexport type SendTransactionReturnType = Hash\r\n\r\nexport type SendTransactionErrorType =\r\n  | ParseAccountErrorType\r\n  | GetTransactionErrorReturnType<\r\n      | AccountNotFoundErrorType\r\n      | AccountTypeNotSupportedErrorType\r\n      | AssertCurrentChainErrorType\r\n      | AssertRequestErrorType\r\n      | GetChainIdErrorType\r\n      | PrepareTransactionRequestErrorType\r\n      | SendRawTransactionErrorType\r\n      | RecoverAuthorizationAddressErrorType\r\n      | SignTransactionErrorType\r\n      | RequestErrorType\r\n    >\r\n  | ErrorType\r\n\r\n/**\r\n * Creates, signs, and sends a new transaction to the network.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/wallet/sendTransaction\r\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/sending-transactions\r\n * - JSON-RPC Methods:\r\n *   - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\r\n *   - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link SendTransactionParameters}\r\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link SendTransactionReturnType}\r\n *\r\n * @example\r\n * import { createWalletClient, custom } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { sendTransaction } from 'viem/wallet'\r\n *\r\n * const client = createWalletClient({\r\n *   chain: mainnet,\r\n *   transport: custom(window.ethereum),\r\n * })\r\n * const hash = await sendTransaction(client, {\r\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\r\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\r\n *   value: 1000000000000000000n,\r\n * })\r\n *\r\n * @example\r\n * // Account Hoisting\r\n * import { createWalletClient, http } from 'viem'\r\n * import { privateKeyToAccount } from 'viem/accounts'\r\n * import { mainnet } from 'viem/chains'\r\n * import { sendTransaction } from 'viem/wallet'\r\n *\r\n * const client = createWalletClient({\r\n *   account: privateKeyToAccount('0x…'),\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const hash = await sendTransaction(client, {\r\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\r\n *   value: 1000000000000000000n,\r\n * })\r\n */\r\nexport async function sendTransaction<\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined,\r\n  const request extends SendTransactionRequest<chain, chainOverride>,\r\n  chainOverride extends Chain | undefined = undefined,\r\n>(\r\n  client: Client<Transport, chain, account>,\r\n  parameters: SendTransactionParameters<chain, account, chainOverride, request>,\r\n): Promise<SendTransactionReturnType> {\r\n  const {\r\n    account: account_ = client.account,\r\n    chain = client.chain,\r\n    accessList,\r\n    authorizationList,\r\n    blobs,\r\n    data,\r\n    gas,\r\n    gasPrice,\r\n    maxFeePerBlobGas,\r\n    maxFeePerGas,\r\n    maxPriorityFeePerGas,\r\n    nonce,\r\n    value,\r\n    ...rest\r\n  } = parameters\r\n\r\n  if (!account_)\r\n    throw new AccountNotFoundError({\r\n      docsPath: '/docs/actions/wallet/sendTransaction',\r\n    })\r\n  const account = parseAccount(account_)\r\n\r\n  try {\r\n    assertRequest(parameters as AssertRequestParameters)\r\n\r\n    const to = await (async () => {\r\n      // If `to` exists on the parameters, use that.\r\n      if (parameters.to) return parameters.to\r\n\r\n      // If no `to` exists, and we are sending a EIP-7702 transaction, use the\r\n      // address of the first authorization in the list.\r\n      if (authorizationList && authorizationList.length > 0)\r\n        return await recoverAuthorizationAddress({\r\n          authorization: authorizationList[0],\r\n        }).catch(() => {\r\n          throw new BaseError(\r\n            '`to` is required. Could not infer from `authorizationList`.',\r\n          )\r\n        })\r\n\r\n      // Otherwise, we are sending a deployment transaction.\r\n      return undefined\r\n    })()\r\n\r\n    if (account.type === 'json-rpc') {\r\n      let chainId: number | undefined\r\n      if (chain !== null) {\r\n        chainId = await getAction(client, getChainId, 'getChainId')({})\r\n        assertCurrentChain({\r\n          currentChainId: chainId,\r\n          chain,\r\n        })\r\n      }\r\n\r\n      const chainFormat = client.chain?.formatters?.transactionRequest?.format\r\n      const format = chainFormat || formatTransactionRequest\r\n\r\n      const request = format({\r\n        // Pick out extra data that might exist on the chain's transaction request type.\r\n        ...extract(rest, { format: chainFormat }),\r\n        accessList,\r\n        authorizationList,\r\n        blobs,\r\n        chainId,\r\n        data,\r\n        from: account.address,\r\n        gas,\r\n        gasPrice,\r\n        maxFeePerBlobGas,\r\n        maxFeePerGas,\r\n        maxPriorityFeePerGas,\r\n        nonce,\r\n        to,\r\n        value,\r\n      } as TransactionRequest)\r\n      return await client.request(\r\n        {\r\n          method: 'eth_sendTransaction',\r\n          params: [request],\r\n        },\r\n        { retryCount: 0 },\r\n      )\r\n    }\r\n\r\n    if (account.type === 'local') {\r\n      // Prepare the request for signing (assign appropriate fees, etc.)\r\n      const request = await getAction(\r\n        client,\r\n        prepareTransactionRequest,\r\n        'prepareTransactionRequest',\r\n      )({\r\n        account,\r\n        accessList,\r\n        authorizationList,\r\n        blobs,\r\n        chain,\r\n        data,\r\n        gas,\r\n        gasPrice,\r\n        maxFeePerBlobGas,\r\n        maxFeePerGas,\r\n        maxPriorityFeePerGas,\r\n        nonce,\r\n        nonceManager: account.nonceManager,\r\n        parameters: [...defaultParameters, 'sidecars'],\r\n        value,\r\n        ...rest,\r\n        to,\r\n      } as any)\r\n\r\n      const serializer = chain?.serializers?.transaction\r\n      const serializedTransaction = (await account.signTransaction(request, {\r\n        serializer,\r\n      })) as Hash\r\n      return await getAction(\r\n        client,\r\n        sendRawTransaction,\r\n        'sendRawTransaction',\r\n      )({\r\n        serializedTransaction,\r\n      })\r\n    }\r\n\r\n    if (account.type === 'smart')\r\n      throw new AccountTypeNotSupportedError({\r\n        metaMessages: [\r\n          'Consider using the `sendUserOperation` Action instead.',\r\n        ],\r\n        docsPath: '/docs/actions/bundler/sendUserOperation',\r\n        type: 'smart',\r\n      })\r\n\r\n    throw new AccountTypeNotSupportedError({\r\n      docsPath: '/docs/actions/wallet/sendTransaction',\r\n      type: (account as { type: string }).type,\r\n    })\r\n  } catch (err) {\r\n    if (err instanceof AccountTypeNotSupportedError) throw err\r\n    throw getTransactionError(err as BaseError, {\r\n      ...parameters,\r\n      account,\r\n      chain: parameters.chain || undefined,\r\n    })\r\n  }\r\n}\r\n", "import type { Abi } from 'abitype'\r\n\r\nimport type { Account } from '../../accounts/types.js'\r\nimport {\r\n  type ParseAccountErrorType,\r\n  parseAccount,\r\n} from '../../accounts/utils/parseAccount.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport {\r\n  AccountNotFoundError,\r\n  type AccountNotFoundErrorType,\r\n} from '../../errors/account.js'\r\nimport type { BaseError } from '../../errors/base.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { GetAccountParameter } from '../../types/account.js'\r\nimport type {\r\n  Chain,\r\n  DeriveChain,\r\n  GetChainParameter,\r\n} from '../../types/chain.js'\r\nimport type {\r\n  ContractFunctionArgs,\r\n  ContractFunctionName,\r\n  ContractFunctionParameters,\r\n} from '../../types/contract.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { Prettify, UnionEvaluate, UnionOmit } from '../../types/utils.js'\r\nimport {\r\n  type EncodeFunctionDataErrorType,\r\n  type EncodeFunctionDataParameters,\r\n  encodeFunctionData,\r\n} from '../../utils/abi/encodeFunctionData.js'\r\nimport {\r\n  type GetContractErrorReturnType,\r\n  getContractError,\r\n} from '../../utils/errors/getContractError.js'\r\nimport type { FormattedTransactionRequest } from '../../utils/formatters/transactionRequest.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport type { GetMutabilityAwareValue } from '../public/simulateContract.js'\r\nimport {\r\n  type SendTransactionErrorType,\r\n  type SendTransactionReturnType,\r\n  sendTransaction,\r\n} from './sendTransaction.js'\r\n\r\nexport type WriteContractParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  functionName extends ContractFunctionName<\r\n    abi,\r\n    'nonpayable' | 'payable'\r\n  > = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  > = ContractFunctionArgs<abi, 'nonpayable' | 'payable', functionName>,\r\n  chain extends Chain | undefined = Chain | undefined,\r\n  account extends Account | undefined = Account | undefined,\r\n  chainOverride extends Chain | undefined = Chain | undefined,\r\n  ///\r\n  allFunctionNames = ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\r\n> = ContractFunctionParameters<\r\n  abi,\r\n  'nonpayable' | 'payable',\r\n  functionName,\r\n  args,\r\n  false,\r\n  allFunctionNames\r\n> &\r\n  GetChainParameter<chain, chainOverride> &\r\n  Prettify<\r\n    GetAccountParameter<account> &\r\n      GetMutabilityAwareValue<\r\n        abi,\r\n        'nonpayable' | 'payable',\r\n        functionName,\r\n        FormattedTransactionRequest<derivedChain>['value'],\r\n        args\r\n      > & {\r\n        /** Data to append to the end of the calldata. Useful for adding a [\"domain\" tag](https://opensea.notion.site/opensea/Seaport-Order-Attributions-ec2d69bf455041a5baa490941aad307f). */\r\n        dataSuffix?: Hex | undefined\r\n      }\r\n  > &\r\n  UnionEvaluate<\r\n    UnionOmit<\r\n      FormattedTransactionRequest<derivedChain>,\r\n      'data' | 'from' | 'to' | 'value'\r\n    >\r\n  >\r\n\r\nexport type WriteContractReturnType = SendTransactionReturnType\r\n\r\nexport type WriteContractErrorType =\r\n  | EncodeFunctionDataErrorType\r\n  | AccountNotFoundErrorType\r\n  | ParseAccountErrorType\r\n  | GetContractErrorReturnType<SendTransactionErrorType>\r\n  | ErrorType\r\n\r\n/**\r\n * Executes a write function on a contract.\r\n *\r\n * - Docs: https://viem.sh/docs/contract/writeContract\r\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/writing-to-contracts\r\n *\r\n * A \"write\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms) is needed to be broadcast in order to change the state.\r\n *\r\n * Internally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\r\n *\r\n * __Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract#usage) before you execute it.__\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link WriteContractParameters}\r\n * @returns A [Transaction Hash](https://viem.sh/docs/glossary/terms#hash). {@link WriteContractReturnType}\r\n *\r\n * @example\r\n * import { createWalletClient, custom, parseAbi } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { writeContract } from 'viem/contract'\r\n *\r\n * const client = createWalletClient({\r\n *   chain: mainnet,\r\n *   transport: custom(window.ethereum),\r\n * })\r\n * const hash = await writeContract(client, {\r\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\r\n *   functionName: 'mint',\r\n *   args: [69420],\r\n * })\r\n *\r\n * @example\r\n * // With Validation\r\n * import { createWalletClient, http, parseAbi } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { simulateContract, writeContract } from 'viem/contract'\r\n *\r\n * const client = createWalletClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const { request } = await simulateContract(client, {\r\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\r\n *   functionName: 'mint',\r\n *   args: [69420],\r\n * }\r\n * const hash = await writeContract(client, request)\r\n */\r\nexport async function writeContract<\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined,\r\n  const abi extends Abi | readonly unknown[],\r\n  functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n  args extends ContractFunctionArgs<\r\n    abi,\r\n    'nonpayable' | 'payable',\r\n    functionName\r\n  >,\r\n  chainOverride extends Chain | undefined,\r\n>(\r\n  client: Client<Transport, chain, account>,\r\n  parameters: WriteContractParameters<\r\n    abi,\r\n    functionName,\r\n    args,\r\n    chain,\r\n    account,\r\n    chainOverride\r\n  >,\r\n): Promise<WriteContractReturnType> {\r\n  const {\r\n    abi,\r\n    account: account_ = client.account,\r\n    address,\r\n    args,\r\n    dataSuffix,\r\n    functionName,\r\n    ...request\r\n  } = parameters as WriteContractParameters\r\n\r\n  if (!account_)\r\n    throw new AccountNotFoundError({\r\n      docsPath: '/docs/contract/writeContract',\r\n    })\r\n  const account = parseAccount(account_)\r\n\r\n  const data = encodeFunctionData({\r\n    abi,\r\n    args,\r\n    functionName,\r\n  } as EncodeFunctionDataParameters)\r\n\r\n  try {\r\n    return await getAction(\r\n      client,\r\n      sendTransaction,\r\n      'sendTransaction',\r\n    )({\r\n      data: `${data}${dataSuffix ? dataSuffix.replace('0x', '') : ''}`,\r\n      to: address,\r\n      account,\r\n      ...request,\r\n    })\r\n  } catch (error) {\r\n    throw getContractError(error as BaseError, {\r\n      abi,\r\n      address,\r\n      args,\r\n      docsPath: '/docs/contract/writeContract',\r\n      functionName,\r\n      sender: account.address,\r\n    })\r\n  }\r\n}\r\n", "import type { Address } from 'abitype'\r\nimport { BaseError } from './base.js'\r\n\r\nexport type Eip712DomainNotFoundErrorType = Eip712DomainNotFoundError & {\r\n  name: 'Eip712DomainNotFoundError'\r\n}\r\nexport class Eip712DomainNotFoundError extends BaseError {\r\n  constructor({ address }: { address: Address }) {\r\n    super(`No EIP-712 domain found on contract \"${address}\".`, {\r\n      metaMessages: [\r\n        'Ensure that:',\r\n        `- The contract is deployed at the address \"${address}\".`,\r\n        '- `eip712Domain()` function exists on the contract.',\r\n        '- `eip712Domain()` function matches signature to ERC-5267 specification.',\r\n      ],\r\n      name: 'Eip712DomainNotFoundError',\r\n    })\r\n  }\r\n}\r\n", "import type { Address, TypedDataDomain } from 'abitype'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport {\r\n  Eip712DomainNotFoundError,\r\n  type Eip712DomainNotFoundErrorType,\r\n} from '../../errors/eip712.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { RequiredBy } from '../../types/utils.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport {\r\n  type ReadContractErrorType,\r\n  type ReadContractParameters,\r\n  readContract,\r\n} from './readContract.js'\r\n\r\nexport type GetEip712DomainParameters = {\r\n  address: Address\r\n} & Pick<ReadContractParameters, 'factory' | 'factoryData'>\r\n\r\nexport type GetEip712DomainReturnType = {\r\n  domain: RequiredBy<\r\n    TypedDataDomain,\r\n    'chainId' | 'name' | 'verifyingContract' | 'version'\r\n  >\r\n  fields: Hex\r\n  extensions: readonly bigint[]\r\n}\r\n\r\nexport type GetEip712DomainErrorType =\r\n  | Eip712DomainNotFoundErrorType\r\n  | ReadContractErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Reads the EIP-712 domain from a contract, based on the ERC-5267 specification.\r\n *\r\n * @param client - A {@link Client} instance.\r\n * @param parameters - The parameters of the action. {@link GetEip712DomainParameters}\r\n * @returns The EIP-712 domain, fields, and extensions. {@link GetEip712DomainReturnType}\r\n *\r\n * @example\r\n * ```ts\r\n * import { createPublicClient, http, getEip712Domain } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n *\r\n * const domain = await getEip712Domain(client, {\r\n *   address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\r\n * })\r\n * // {\r\n * //   domain: {\r\n * //     name: 'ExampleContract',\r\n * //     version: '1',\r\n * //     chainId: 1,\r\n * //     verifyingContract: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\r\n * //   },\r\n * //   fields: '0x0f',\r\n * //   extensions: [],\r\n * // }\r\n * ```\r\n */\r\nexport async function getEip712Domain(\r\n  client: Client<Transport>,\r\n  parameters: GetEip712DomainParameters,\r\n): Promise<GetEip712DomainReturnType> {\r\n  const { address, factory, factoryData } = parameters\r\n\r\n  try {\r\n    const [\r\n      fields,\r\n      name,\r\n      version,\r\n      chainId,\r\n      verifyingContract,\r\n      salt,\r\n      extensions,\r\n    ] = await getAction(\r\n      client,\r\n      readContract,\r\n      'readContract',\r\n    )({\r\n      abi,\r\n      address,\r\n      functionName: 'eip712Domain',\r\n      factory,\r\n      factoryData,\r\n    })\r\n\r\n    return {\r\n      domain: {\r\n        name,\r\n        version,\r\n        chainId: Number(chainId),\r\n        verifyingContract,\r\n        salt,\r\n      },\r\n      extensions,\r\n      fields,\r\n    }\r\n  } catch (e) {\r\n    const error = e as ReadContractErrorType\r\n    if (\r\n      error.name === 'ContractFunctionExecutionError' &&\r\n      error.cause.name === 'ContractFunctionZeroDataError'\r\n    ) {\r\n      throw new Eip712DomainNotFoundError({ address })\r\n    }\r\n    throw error\r\n  }\r\n}\r\n\r\nconst abi = [\r\n  {\r\n    inputs: [],\r\n    name: 'eip712Domain',\r\n    outputs: [\r\n      { name: 'fields', type: 'bytes1' },\r\n      { name: 'name', type: 'string' },\r\n      { name: 'version', type: 'string' },\r\n      { name: 'chainId', type: 'uint256' },\r\n      { name: 'verifyingContract', type: 'address' },\r\n      { name: 'salt', type: 'bytes32' },\r\n      { name: 'extensions', type: 'uint256[]' },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n] as const\r\n", "import type { Account } from '../../accounts/types.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type NumberToHexErrorType,\r\n  numberToHex,\r\n} from '../../utils/encoding/toHex.js'\r\n\r\nexport type AddChainParameters = {\r\n  /** The chain to add to the wallet. */\r\n  chain: Chain\r\n}\r\n\r\nexport type AddChainErrorType =\r\n  | RequestErrorType\r\n  | NumberToHexErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Adds an EVM chain to the wallet.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/wallet/addChain\r\n * - JSON-RPC Methods: [`eth_addEthereumChain`](https://eips.ethereum.org/EIPS/eip-3085)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link AddChainParameters}\r\n *\r\n * @example\r\n * import { createWalletClient, custom } from 'viem'\r\n * import { optimism } from 'viem/chains'\r\n * import { addChain } from 'viem/wallet'\r\n *\r\n * const client = createWalletClient({\r\n *   transport: custom(window.ethereum),\r\n * })\r\n * await addChain(client, { chain: optimism })\r\n */\r\nexport async function addChain<\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined,\r\n>(client: Client<Transport, chain, account>, { chain }: AddChainParameters) {\r\n  const { id, name, nativeCurrency, rpcUrls, blockExplorers } = chain\r\n  await client.request(\r\n    {\r\n      method: 'wallet_addEthereumChain',\r\n      params: [\r\n        {\r\n          chainId: numberToHex(id),\r\n          chainName: name,\r\n          nativeCurrency,\r\n          rpcUrls: rpcUrls.default.http,\r\n          blockExplorerUrls: blockExplorers\r\n            ? Object.values(blockExplorers).map(({ url }) => url)\r\n            : undefined,\r\n        },\r\n      ],\r\n    },\r\n    { dedupe: true, retryCount: 0 },\r\n  )\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport type { JsonRpcAccount } from '../accounts/types.js'\r\nimport {\r\n  type ParseAccountErrorType,\r\n  parseAccount,\r\n} from '../accounts/utils/parseAccount.js'\r\nimport type { ErrorType } from '../errors/utils.js'\r\nimport type { Account } from '../types/account.js'\r\nimport type { Chain } from '../types/chain.js'\r\nimport type {\r\n  EIP1193RequestFn,\r\n  EIP1474Methods,\r\n  RpcSchema,\r\n} from '../types/eip1193.js'\r\nimport type { ExactPartial, Prettify } from '../types/utils.js'\r\nimport type {\r\n  CcipRequestParameters,\r\n  CcipRequestReturnType,\r\n} from '../utils/ccip.js'\r\nimport { uid } from '../utils/uid.js'\r\nimport type { PublicActions } from './decorators/public.js'\r\nimport type { WalletActions } from './decorators/wallet.js'\r\nimport type { Transport } from './transports/createTransport.js'\r\n\r\nexport type ClientConfig<\r\n  transport extends Transport = Transport,\r\n  chain extends Chain | undefined = Chain | undefined,\r\n  accountOrAddress extends Account | Address | undefined =\r\n    | Account\r\n    | Address\r\n    | undefined,\r\n  rpcSchema extends RpcSchema | undefined = undefined,\r\n> = {\r\n  /** The Account to use for the Client. This will be used for Actions that require an account as an argument. */\r\n  account?: accountOrAddress | Account | Address | undefined\r\n  /** Flags for batch settings. */\r\n  batch?:\r\n    | {\r\n        /** Toggle to enable `eth_call` multicall aggregation. */\r\n        multicall?: boolean | Prettify<MulticallBatchOptions> | undefined\r\n      }\r\n    | undefined\r\n  /**\r\n   * Time (in ms) that cached data will remain in memory.\r\n   * @default 4_000\r\n   */\r\n  cacheTime?: number | undefined\r\n  /**\r\n   * [CCIP Read](https://eips.ethereum.org/EIPS/eip-3668) configuration.\r\n   * If `false`, the client will not support offchain CCIP lookups.\r\n   */\r\n  ccipRead?:\r\n    | {\r\n        /**\r\n         * A function that will be called to make the offchain CCIP lookup request.\r\n         * @see https://eips.ethereum.org/EIPS/eip-3668#client-lookup-protocol\r\n         */\r\n        request?: (\r\n          parameters: CcipRequestParameters,\r\n        ) => Promise<CcipRequestReturnType>\r\n      }\r\n    | false\r\n    | undefined\r\n  /** Chain for the client. */\r\n  chain?: Chain | undefined | chain\r\n  /** A key for the client. */\r\n  key?: string | undefined\r\n  /** A name for the client. */\r\n  name?: string | undefined\r\n  /**\r\n   * Frequency (in ms) for polling enabled actions & events.\r\n   * @default 4_000\r\n   */\r\n  pollingInterval?: number | undefined\r\n  /**\r\n   * Typed JSON-RPC schema for the client.\r\n   */\r\n  rpcSchema?: rpcSchema | undefined\r\n  /** The RPC transport */\r\n  transport: transport\r\n  /** The type of client. */\r\n  type?: string | undefined\r\n}\r\n\r\n// Actions that are used internally by other Actions (ie. `call` is used by `readContract`).\r\n// They are allowed to be extended, but must conform to their parameter & return type interfaces.\r\n// Example: an extended `call` action must accept `CallParameters` as parameters,\r\n// and conform to the `CallReturnType` return type.\r\ntype ExtendableProtectedActions<\r\n  transport extends Transport = Transport,\r\n  chain extends Chain | undefined = Chain | undefined,\r\n  account extends Account | undefined = Account | undefined,\r\n> = Pick<\r\n  PublicActions<transport, chain, account>,\r\n  | 'call'\r\n  | 'createContractEventFilter'\r\n  | 'createEventFilter'\r\n  | 'estimateContractGas'\r\n  | 'estimateGas'\r\n  | 'getBlock'\r\n  | 'getBlockNumber'\r\n  | 'getChainId'\r\n  | 'getContractEvents'\r\n  | 'getEnsText'\r\n  | 'getFilterChanges'\r\n  | 'getGasPrice'\r\n  | 'getLogs'\r\n  | 'getTransaction'\r\n  | 'getTransactionCount'\r\n  | 'getTransactionReceipt'\r\n  | 'prepareTransactionRequest'\r\n  | 'readContract'\r\n  | 'sendRawTransaction'\r\n  | 'simulateContract'\r\n  | 'uninstallFilter'\r\n  | 'watchBlockNumber'\r\n  | 'watchContractEvent'\r\n> &\r\n  Pick<WalletActions<chain, account>, 'sendTransaction' | 'writeContract'>\r\n\r\n// TODO: Move `transport` to slot index 2 since `chain` and `account` used more frequently.\r\n// Otherwise, we end up with a lot of `Client<Transport, chain, account>` in actions.\r\nexport type Client<\r\n  transport extends Transport = Transport,\r\n  chain extends Chain | undefined = Chain | undefined,\r\n  account extends Account | undefined = Account | undefined,\r\n  rpcSchema extends RpcSchema | undefined = undefined,\r\n  extended extends Extended | undefined = Extended | undefined,\r\n> = Client_Base<transport, chain, account, rpcSchema> &\r\n  (extended extends Extended ? extended : unknown) & {\r\n    extend: <\r\n      const client extends Extended &\r\n        ExactPartial<ExtendableProtectedActions<transport, chain, account>>,\r\n    >(\r\n      fn: (\r\n        client: Client<transport, chain, account, rpcSchema, extended>,\r\n      ) => client,\r\n    ) => Client<\r\n      transport,\r\n      chain,\r\n      account,\r\n      rpcSchema,\r\n      Prettify<client> & (extended extends Extended ? extended : unknown)\r\n    >\r\n  }\r\n\r\ntype Client_Base<\r\n  transport extends Transport = Transport,\r\n  chain extends Chain | undefined = Chain | undefined,\r\n  account extends Account | undefined = Account | undefined,\r\n  rpcSchema extends RpcSchema | undefined = undefined,\r\n> = {\r\n  /** The Account of the Client. */\r\n  account: account\r\n  /** Flags for batch settings. */\r\n  batch?: ClientConfig['batch'] | undefined\r\n  /** Time (in ms) that cached data will remain in memory. */\r\n  cacheTime: number\r\n  /** [CCIP Read](https://eips.ethereum.org/EIPS/eip-3668) configuration. */\r\n  ccipRead?: ClientConfig['ccipRead'] | undefined\r\n  /** Chain for the client. */\r\n  chain: chain\r\n  /** A key for the client. */\r\n  key: string\r\n  /** A name for the client. */\r\n  name: string\r\n  /** Frequency (in ms) for polling enabled actions & events. Defaults to 4_000 milliseconds. */\r\n  pollingInterval: number\r\n  /** Request function wrapped with friendly error handling */\r\n  request: EIP1193RequestFn<\r\n    rpcSchema extends undefined ? EIP1474Methods : rpcSchema\r\n  >\r\n  /** The RPC transport */\r\n  transport: ReturnType<transport>['config'] & ReturnType<transport>['value']\r\n  /** The type of client. */\r\n  type: string\r\n  /** A unique ID for the client. */\r\n  uid: string\r\n}\r\n\r\ntype Extended = Prettify<\r\n  // disallow redefining base properties\r\n  { [_ in keyof Client_Base]?: undefined } & {\r\n    [key: string]: unknown\r\n  }\r\n>\r\n\r\nexport type MulticallBatchOptions = {\r\n  /** The maximum size (in bytes) for each calldata chunk. @default 1_024 */\r\n  batchSize?: number | undefined\r\n  /** The maximum number of milliseconds to wait before sending a batch. @default 0 */\r\n  wait?: number | undefined\r\n}\r\n\r\nexport type CreateClientErrorType = ParseAccountErrorType | ErrorType\r\n\r\nexport function createClient<\r\n  transport extends Transport,\r\n  chain extends Chain | undefined = undefined,\r\n  accountOrAddress extends Account | Address | undefined = undefined,\r\n  rpcSchema extends RpcSchema | undefined = undefined,\r\n>(\r\n  parameters: ClientConfig<transport, chain, accountOrAddress, rpcSchema>,\r\n): Prettify<\r\n  Client<\r\n    transport,\r\n    chain,\r\n    accountOrAddress extends Address\r\n      ? Prettify<JsonRpcAccount<accountOrAddress>>\r\n      : accountOrAddress,\r\n    rpcSchema\r\n  >\r\n>\r\n\r\nexport function createClient(parameters: ClientConfig): Client {\r\n  const {\r\n    batch,\r\n    cacheTime = parameters.pollingInterval ?? 4_000,\r\n    ccipRead,\r\n    key = 'base',\r\n    name = 'Base Client',\r\n    pollingInterval = 4_000,\r\n    type = 'base',\r\n  } = parameters\r\n\r\n  const chain = parameters.chain\r\n  const account = parameters.account\r\n    ? parseAccount(parameters.account)\r\n    : undefined\r\n  const { config, request, value } = parameters.transport({\r\n    chain,\r\n    pollingInterval,\r\n  })\r\n  const transport = { ...config, ...value }\r\n\r\n  const client = {\r\n    account,\r\n    batch,\r\n    cacheTime,\r\n    ccipRead,\r\n    chain,\r\n    key,\r\n    name,\r\n    pollingInterval,\r\n    request,\r\n    transport,\r\n    type,\r\n    uid: uid(),\r\n  }\r\n\r\n  function extend(base: typeof client) {\r\n    type ExtendFn = (base: typeof client) => unknown\r\n    return (extendFn: ExtendFn) => {\r\n      const extended = extendFn(base) as Extended\r\n      for (const key in client) delete extended[key]\r\n      const combined = { ...base, ...extended }\r\n      return Object.assign(combined, { extend: extend(combined as any) })\r\n    }\r\n  }\r\n\r\n  return Object.assign(client, { extend: extend(client) as any })\r\n}\r\n\r\n/**\r\n * Defines a typed JSON-RPC schema for the client.\r\n * Note: This is a runtime noop function.\r\n */\r\nexport function rpcSchema<rpcSchema extends RpcSchema>(): rpcSchema {\r\n  return null as any\r\n}\r\n", "import {\r\n  TransactionRejectedRpcError,\r\n  UserRejectedRequestError,\r\n} from '../../errors/rpc.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport { wait } from '../../utils/wait.js'\r\n\r\nimport {\r\n  type CreateTransportErrorType,\r\n  type Transport,\r\n  type TransportConfig,\r\n  createTransport,\r\n} from './createTransport.js'\r\n// TODO: Narrow `method` & `params` types.\r\nexport type OnResponseFn = (\r\n  args: {\r\n    method: string\r\n    params: unknown[]\r\n    transport: ReturnType<Transport>\r\n  } & (\r\n    | {\r\n        error?: undefined\r\n        response: unknown\r\n        status: 'success'\r\n      }\r\n    | {\r\n        error: Error\r\n        response?: undefined\r\n        status: 'error'\r\n      }\r\n  ),\r\n) => void\r\n\r\ntype RankOptions = {\r\n  /**\r\n   * The polling interval (in ms) at which the ranker should ping the RPC URL.\r\n   * @default client.pollingInterval\r\n   */\r\n  interval?: number | undefined\r\n  /**\r\n   * The number of previous samples to perform ranking on.\r\n   * @default 10\r\n   */\r\n  sampleCount?: number | undefined\r\n  /**\r\n   * Timeout when sampling transports.\r\n   * @default 1_000\r\n   */\r\n  timeout?: number | undefined\r\n  /**\r\n   * Weights to apply to the scores. Weight values are proportional.\r\n   */\r\n  weights?:\r\n    | {\r\n        /**\r\n         * The weight to apply to the latency score.\r\n         * @default 0.3\r\n         */\r\n        latency?: number | undefined\r\n        /**\r\n         * The weight to apply to the stability score.\r\n         * @default 0.7\r\n         */\r\n        stability?: number | undefined\r\n      }\r\n    | undefined\r\n}\r\n\r\nexport type FallbackTransportConfig = {\r\n  /** The key of the Fallback transport. */\r\n  key?: TransportConfig['key'] | undefined\r\n  /** The name of the Fallback transport. */\r\n  name?: TransportConfig['name'] | undefined\r\n  /** Toggle to enable ranking, or rank options. */\r\n  rank?: boolean | RankOptions | undefined\r\n  /** The max number of times to retry. */\r\n  retryCount?: TransportConfig['retryCount'] | undefined\r\n  /** The base delay (in ms) between retries. */\r\n  retryDelay?: TransportConfig['retryDelay'] | undefined\r\n}\r\n\r\nexport type FallbackTransport<\r\n  transports extends readonly Transport[] = readonly Transport[],\r\n> = Transport<\r\n  'fallback',\r\n  {\r\n    onResponse: (fn: OnResponseFn) => void\r\n    transports: {\r\n      [key in keyof transports]: ReturnType<transports[key]>\r\n    }\r\n  }\r\n>\r\n\r\nexport type FallbackTransportErrorType = CreateTransportErrorType | ErrorType\r\n\r\nexport function fallback<const transports extends readonly Transport[]>(\r\n  transports_: transports,\r\n  config: FallbackTransportConfig = {},\r\n): FallbackTransport<transports> {\r\n  const {\r\n    key = 'fallback',\r\n    name = 'Fallback',\r\n    rank = false,\r\n    retryCount,\r\n    retryDelay,\r\n  } = config\r\n  return (({ chain, pollingInterval = 4_000, timeout, ...rest }) => {\r\n    let transports = transports_\r\n\r\n    let onResponse: OnResponseFn = () => {}\r\n\r\n    const transport = createTransport(\r\n      {\r\n        key,\r\n        name,\r\n        async request({ method, params }) {\r\n          const fetch = async (i = 0): Promise<any> => {\r\n            const transport = transports[i]({\r\n              ...rest,\r\n              chain,\r\n              retryCount: 0,\r\n              timeout,\r\n            })\r\n            try {\r\n              const response = await transport.request({\r\n                method,\r\n                params,\r\n              } as any)\r\n\r\n              onResponse({\r\n                method,\r\n                params: params as unknown[],\r\n                response,\r\n                transport,\r\n                status: 'success',\r\n              })\r\n\r\n              return response\r\n            } catch (err) {\r\n              onResponse({\r\n                error: err as Error,\r\n                method,\r\n                params: params as unknown[],\r\n                transport,\r\n                status: 'error',\r\n              })\r\n\r\n              if (shouldThrow(err as Error)) throw err\r\n\r\n              // If we've reached the end of the fallbacks, throw the error.\r\n              if (i === transports.length - 1) throw err\r\n\r\n              // Otherwise, try the next fallback.\r\n              return fetch(i + 1)\r\n            }\r\n          }\r\n          return fetch()\r\n        },\r\n        retryCount,\r\n        retryDelay,\r\n        type: 'fallback',\r\n      },\r\n      {\r\n        onResponse: (fn: OnResponseFn) => (onResponse = fn),\r\n        transports: transports.map((fn) => fn({ chain, retryCount: 0 })),\r\n      },\r\n    )\r\n\r\n    if (rank) {\r\n      const rankOptions = (typeof rank === 'object' ? rank : {}) as RankOptions\r\n      rankTransports({\r\n        chain,\r\n        interval: rankOptions.interval ?? pollingInterval,\r\n        onTransports: (transports_) => (transports = transports_ as transports),\r\n        sampleCount: rankOptions.sampleCount,\r\n        timeout: rankOptions.timeout,\r\n        transports,\r\n        weights: rankOptions.weights,\r\n      })\r\n    }\r\n    return transport\r\n  }) as FallbackTransport<transports>\r\n}\r\n\r\nfunction shouldThrow(error: Error) {\r\n  if ('code' in error && typeof error.code === 'number') {\r\n    if (\r\n      error.code === TransactionRejectedRpcError.code ||\r\n      error.code === UserRejectedRequestError.code ||\r\n      error.code === 5000 // CAIP UserRejectedRequestError\r\n    )\r\n      return true\r\n  }\r\n  return false\r\n}\r\n\r\n/** @internal */\r\nexport function rankTransports({\r\n  chain,\r\n  interval = 4_000,\r\n  onTransports,\r\n  sampleCount = 10,\r\n  timeout = 1_000,\r\n  transports,\r\n  weights = {},\r\n}: {\r\n  chain?: Chain | undefined\r\n  interval: RankOptions['interval']\r\n  onTransports: (transports: readonly Transport[]) => void\r\n  sampleCount?: RankOptions['sampleCount'] | undefined\r\n  timeout?: RankOptions['timeout'] | undefined\r\n  transports: readonly Transport[]\r\n  weights?: RankOptions['weights'] | undefined\r\n}) {\r\n  const { stability: stabilityWeight = 0.7, latency: latencyWeight = 0.3 } =\r\n    weights\r\n\r\n  type SampleData = { latency: number; success: number }\r\n  type Sample = SampleData[]\r\n  const samples: Sample[] = []\r\n\r\n  const rankTransports_ = async () => {\r\n    // 1. Take a sample from each Transport.\r\n    const sample: Sample = await Promise.all(\r\n      transports.map(async (transport) => {\r\n        const transport_ = transport({ chain, retryCount: 0, timeout })\r\n\r\n        const start = Date.now()\r\n        let end: number\r\n        let success: number\r\n        try {\r\n          await transport_.request({ method: 'net_listening' })\r\n          success = 1\r\n        } catch {\r\n          success = 0\r\n        } finally {\r\n          end = Date.now()\r\n        }\r\n        const latency = end - start\r\n        return { latency, success }\r\n      }),\r\n    )\r\n\r\n    // 2. Store the sample. If we have more than `sampleCount` samples, remove\r\n    // the oldest sample.\r\n    samples.push(sample)\r\n    if (samples.length > sampleCount) samples.shift()\r\n\r\n    // 3. Calculate the max latency from samples.\r\n    const maxLatency = Math.max(\r\n      ...samples.map((sample) =>\r\n        Math.max(...sample.map(({ latency }) => latency)),\r\n      ),\r\n    )\r\n\r\n    // 4. Calculate the score for each Transport.\r\n    const scores = transports\r\n      .map((_, i) => {\r\n        const latencies = samples.map((sample) => sample[i].latency)\r\n        const meanLatency =\r\n          latencies.reduce((acc, latency) => acc + latency, 0) /\r\n          latencies.length\r\n        const latencyScore = 1 - meanLatency / maxLatency\r\n\r\n        const successes = samples.map((sample) => sample[i].success)\r\n        const stabilityScore =\r\n          successes.reduce((acc, success) => acc + success, 0) /\r\n          successes.length\r\n\r\n        if (stabilityScore === 0) return [0, i]\r\n        return [\r\n          latencyWeight * latencyScore + stabilityWeight * stabilityScore,\r\n          i,\r\n        ]\r\n      })\r\n      .sort((a, b) => b[0] - a[0])\r\n\r\n    // 5. Sort the Transports by score.\r\n    onTransports(scores.map(([, i]) => transports[i]))\r\n\r\n    // 6. Wait, and then rank again.\r\n    await wait(interval)\r\n    rankTransports_()\r\n  }\r\n  rankTransports_()\r\n}\r\n", "import { panicReasons } from '../../constants/solidity.js'\r\nimport { BaseError } from '../../errors/base.js'\r\nimport { ContractFunctionRevertedError } from '../../errors/contract.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\n\r\n/** @internal */\r\nexport type IsNullUniversalResolverErrorErrorType = ErrorType\r\n\r\n/*\r\n * @description Checks if error is a valid null result UniversalResolver error\r\n */\r\nexport function isNullUniversalResolverError(\r\n  err: unknown,\r\n  callType: 'resolve' | 'reverse',\r\n): boolean {\r\n  if (!(err instanceof BaseError)) return false\r\n  const cause = err.walk((e) => e instanceof ContractFunctionRevertedError)\r\n  if (!(cause instanceof ContractFunctionRevertedError)) return false\r\n  if (cause.data?.errorName === 'ResolverNotFound') return true\r\n  if (cause.data?.errorName === 'ResolverWildcardNotSupported') return true\r\n  if (cause.data?.errorName === 'ResolverNotContract') return true\r\n  if (cause.data?.errorName === 'ResolverError') return true\r\n  if (cause.data?.errorName === 'HttpError') return true\r\n  // Backwards compatibility for older UniversalResolver contracts\r\n  if (\r\n    cause.reason?.includes(\r\n      'Wildcard on non-extended resolvers is not supported',\r\n    )\r\n  )\r\n    return true\r\n  // No primary name set for address.\r\n  if (callType === 'reverse' && cause.reason === panicReasons[50]) return true\r\n  return false\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\r\n\r\nexport type EncodedLabelToLabelhashErrorType = IsHexErrorType | ErrorType\r\n\r\nexport function encodedLabelToLabelhash(label: string): Hex | null {\r\n  if (label.length !== 66) return null\r\n  if (label.indexOf('[') !== 0) return null\r\n  if (label.indexOf(']') !== 65) return null\r\n  const hash = `0x${label.slice(1, 65)}`\r\n  if (!isHex(hash)) return null\r\n  return hash\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport { type ConcatErrorType, concat } from '../data/concat.js'\r\nimport {\r\n  type StringToBytesErrorType,\r\n  type ToBytesErrorType,\r\n  stringToBytes,\r\n  toBytes,\r\n} from '../encoding/toBytes.js'\r\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\r\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\r\nimport {\r\n  type EncodedLabelToLabelhashErrorType,\r\n  encodedLabelToLabelhash,\r\n} from './encodedLabelToLabelhash.js'\r\n\r\nexport type NamehashErrorType =\r\n  | BytesToHexErrorType\r\n  | EncodedLabelToLabelhashErrorType\r\n  | ToBytesErrorType\r\n  | Keccak256ErrorType\r\n  | StringToBytesErrorType\r\n  | ConcatErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * @description Hashes ENS name\r\n *\r\n * - Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `namehash`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\r\n *\r\n * @example\r\n * namehash('wevm.eth')\r\n * '0xf246651c1b9a6b141d19c2604e9a58f567973833990f830d882534a747801359'\r\n *\r\n * @link https://eips.ethereum.org/EIPS/eip-137\r\n */\r\nexport function namehash(name: string) {\r\n  let result = new Uint8Array(32).fill(0)\r\n  if (!name) return bytesToHex(result)\r\n\r\n  const labels = name.split('.')\r\n  // Iterate in reverse order building up hash\r\n  for (let i = labels.length - 1; i >= 0; i -= 1) {\r\n    const hashFromEncodedLabel = encodedLabelToLabelhash(labels[i])\r\n    const hashed = hashFromEncodedLabel\r\n      ? toBytes(hashFromEncodedLabel)\r\n      : keccak256(stringToBytes(labels[i]), 'bytes')\r\n    result = keccak256(concat([result, hashed]), 'bytes')\r\n  }\r\n\r\n  return bytesToHex(result)\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport type { Hex } from '../../types/misc.js'\r\n\r\nexport type EncodeLabelhashErrorType = ErrorType\r\n\r\nexport function encodeLabelhash(hash: Hex): `[${string}]` {\r\n  return `[${hash.slice(2)}]`\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport {\r\n  type StringToBytesErrorType,\r\n  stringToBytes,\r\n} from '../encoding/toBytes.js'\r\nimport { type BytesToHexErrorType, bytesToHex } from '../encoding/toHex.js'\r\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\r\nimport {\r\n  type EncodedLabelToLabelhashErrorType,\r\n  encodedLabelToLabelhash,\r\n} from './encodedLabelToLabelhash.js'\r\n\r\nexport type LabelhashErrorType =\r\n  | BytesToHexErrorType\r\n  | EncodedLabelToLabelhashErrorType\r\n  | Keccak256ErrorType\r\n  | StringToBytesErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * @description Hashes ENS label\r\n *\r\n * - Since ENS labels prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS labels](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `labelhash`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\r\n *\r\n * @example\r\n * labelhash('eth')\r\n * '0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0'\r\n */\r\nexport function labelhash(label: string) {\r\n  const result = new Uint8Array(32).fill(0)\r\n  if (!label) return bytesToHex(result)\r\n  return encodedLabelToLabelhash(label) || keccak256(stringToBytes(label))\r\n}\r\n", "// Adapted from https://github.com/mafintosh/dns-packet\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { ByteArray } from '../../types/misc.js'\r\nimport {\r\n  type StringToBytesErrorType,\r\n  stringToBytes,\r\n} from '../encoding/toBytes.js'\r\nimport {\r\n  type EncodeLabelhashErrorType,\r\n  encodeLabelhash,\r\n} from './encodeLabelhash.js'\r\nimport { type LabelhashErrorType, labelhash } from './labelhash.js'\r\n\r\nexport type PacketToBytesErrorType =\r\n  | EncodeLabelhashErrorType\r\n  | LabelhashErrorType\r\n  | StringToBytesErrorType\r\n  | ErrorType\r\n\r\n/*\r\n * @description Encodes a DNS packet into a ByteArray containing a UDP payload.\r\n *\r\n * @example\r\n * packetToBytes('awkweb.eth')\r\n * '0x0661776b7765620365746800'\r\n *\r\n * @see https://docs.ens.domains/resolution/names#dns\r\n *\r\n */\r\nexport function packetToBytes(packet: string): ByteArray {\r\n  // strip leading and trailing `.`\r\n  const value = packet.replace(/^\\.|\\.$/gm, '')\r\n  if (value.length === 0) return new Uint8Array(1)\r\n\r\n  const bytes = new Uint8Array(stringToBytes(value).byteLength + 2)\r\n\r\n  let offset = 0\r\n  const list = value.split('.')\r\n  for (let i = 0; i < list.length; i++) {\r\n    let encoded = stringToBytes(list[i])\r\n    // if the length is > 255, make the encoded label value a labelhash\r\n    // this is compatible with the universal resolver\r\n    if (encoded.byteLength > 255)\r\n      encoded = stringToBytes(encodeLabelhash(labelhash(list[i])))\r\n    bytes[offset] = encoded.length\r\n    bytes.set(encoded, offset + 1)\r\n    offset += encoded.length + 1\r\n  }\r\n\r\n  if (bytes.byteLength !== offset + 1) return bytes.slice(0, offset + 1)\r\n\r\n  return bytes\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport {\r\n  addressResolverAbi,\r\n  universalResolverResolveAbi,\r\n} from '../../constants/abis.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Prettify } from '../../types/utils.js'\r\nimport {\r\n  type DecodeFunctionResultErrorType,\r\n  decodeFunctionResult,\r\n} from '../../utils/abi/decodeFunctionResult.js'\r\nimport {\r\n  type EncodeFunctionDataErrorType,\r\n  encodeFunctionData,\r\n} from '../../utils/abi/encodeFunctionData.js'\r\nimport {\r\n  type GetChainContractAddressErrorType,\r\n  getChainContractAddress,\r\n} from '../../utils/chain/getChainContractAddress.js'\r\nimport { type TrimErrorType, trim } from '../../utils/data/trim.js'\r\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\r\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js'\r\nimport { type NamehashErrorType, namehash } from '../../utils/ens/namehash.js'\r\nimport {\r\n  type PacketToBytesErrorType,\r\n  packetToBytes,\r\n} from '../../utils/ens/packetToBytes.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport {\r\n  type ReadContractParameters,\r\n  readContract,\r\n} from '../public/readContract.js'\r\n\r\nexport type GetEnsAddressParameters = Prettify<\r\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\r\n    /** ENSIP-9 compliant coinType used to resolve addresses for other chains */\r\n    coinType?: number | undefined\r\n    /** Universal Resolver gateway URLs to use for resolving CCIP-read requests. */\r\n    gatewayUrls?: string[] | undefined\r\n    /** Name to get the address for. */\r\n    name: string\r\n    /** Whether or not to throw errors propagated from the ENS Universal Resolver Contract. */\r\n    strict?: boolean | undefined\r\n    /** Address of ENS Universal Resolver Contract. */\r\n    universalResolverAddress?: Address | undefined\r\n  }\r\n>\r\n\r\nexport type GetEnsAddressReturnType = Address | null\r\n\r\nexport type GetEnsAddressErrorType =\r\n  | GetChainContractAddressErrorType\r\n  | EncodeFunctionDataErrorType\r\n  | NamehashErrorType\r\n  | ToHexErrorType\r\n  | PacketToBytesErrorType\r\n  | DecodeFunctionResultErrorType\r\n  | TrimErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Gets address for ENS name.\r\n *\r\n * - Docs: https://viem.sh/docs/ens/actions/getEnsAddress\r\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\r\n *\r\n * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\r\n *\r\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetEnsAddressParameters}\r\n * @returns Address for ENS name or `null` if not found. {@link GetEnsAddressReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getEnsAddress, normalize } from 'viem/ens'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const ensAddress = await getEnsAddress(client, {\r\n *   name: normalize('wevm.eth'),\r\n * })\r\n * // '0xd2135CfB216b74109775236E36d4b433F1DF507B'\r\n */\r\nexport async function getEnsAddress<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  {\r\n    blockNumber,\r\n    blockTag,\r\n    coinType,\r\n    name,\r\n    gatewayUrls,\r\n    strict,\r\n    universalResolverAddress: universalResolverAddress_,\r\n  }: GetEnsAddressParameters,\r\n): Promise<GetEnsAddressReturnType> {\r\n  let universalResolverAddress = universalResolverAddress_\r\n  if (!universalResolverAddress) {\r\n    if (!client.chain)\r\n      throw new Error(\r\n        'client chain not configured. universalResolverAddress is required.',\r\n      )\r\n\r\n    universalResolverAddress = getChainContractAddress({\r\n      blockNumber,\r\n      chain: client.chain,\r\n      contract: 'ensUniversalResolver',\r\n    })\r\n  }\r\n\r\n  try {\r\n    const functionData = encodeFunctionData({\r\n      abi: addressResolverAbi,\r\n      functionName: 'addr',\r\n      ...(coinType != null\r\n        ? { args: [namehash(name), BigInt(coinType)] }\r\n        : { args: [namehash(name)] }),\r\n    })\r\n\r\n    const readContractParameters = {\r\n      address: universalResolverAddress,\r\n      abi: universalResolverResolveAbi,\r\n      functionName: 'resolve',\r\n      args: [toHex(packetToBytes(name)), functionData],\r\n      blockNumber,\r\n      blockTag,\r\n    } as const\r\n\r\n    const readContractAction = getAction(client, readContract, 'readContract')\r\n\r\n    const res = gatewayUrls\r\n      ? await readContractAction({\r\n          ...readContractParameters,\r\n          args: [...readContractParameters.args, gatewayUrls],\r\n        })\r\n      : await readContractAction(readContractParameters)\r\n\r\n    if (res[0] === '0x') return null\r\n\r\n    const address = decodeFunctionResult({\r\n      abi: addressResolverAbi,\r\n      args: coinType != null ? [namehash(name), BigInt(coinType)] : undefined,\r\n      functionName: 'addr',\r\n      data: res[0],\r\n    })\r\n\r\n    if (address === '0x') return null\r\n    if (trim(address) === '0x00') return null\r\n    return address\r\n  } catch (err) {\r\n    if (strict) throw err\r\n    if (isNullUniversalResolverError(err, 'resolve')) return null\r\n    throw err\r\n  }\r\n}\r\n", "import { BaseError } from './base.js'\r\n\r\nexport type EnsAvatarInvalidMetadataErrorType =\r\n  EnsAvatarInvalidMetadataError & {\r\n    name: 'EnsAvatarInvalidMetadataError'\r\n  }\r\nexport class EnsAvatarInvalidMetadataError extends BaseError {\r\n  constructor({ data }: { data: any }) {\r\n    super(\r\n      'Unable to extract image from metadata. The metadata may be malformed or invalid.',\r\n      {\r\n        metaMessages: [\r\n          '- Metadata must be a JSON object with at least an `image`, `image_url` or `image_data` property.',\r\n          '',\r\n          `Provided data: ${JSON.stringify(data)}`,\r\n        ],\r\n        name: 'EnsAvatarInvalidMetadataError',\r\n      },\r\n    )\r\n  }\r\n}\r\n\r\nexport type EnsAvatarInvalidNftUriErrorType = EnsAvatarInvalidNftUriError & {\r\n  name: 'EnsAvatarInvalidNftUriError'\r\n}\r\nexport class EnsAvatarInvalidNftUriError extends BaseError {\r\n  constructor({ reason }: { reason: string }) {\r\n    super(`ENS NFT avatar URI is invalid. ${reason}`, {\r\n      name: 'EnsAvatarInvalidNftUriError',\r\n    })\r\n  }\r\n}\r\n\r\nexport type EnsAvatarUriResolutionErrorType = EnsAvatarUriResolutionError & {\r\n  name: 'EnsAvatarUriResolutionError'\r\n}\r\nexport class EnsAvatarUriResolutionError extends BaseError {\r\n  constructor({ uri }: { uri: string }) {\r\n    super(\r\n      `Unable to resolve ENS avatar URI \"${uri}\". The URI may be malformed, invalid, or does not respond with a valid image.`,\r\n      { name: 'EnsAvatarUriResolutionError' },\r\n    )\r\n  }\r\n}\r\n\r\nexport type EnsAvatarUnsupportedNamespaceErrorType =\r\n  EnsAvatarUnsupportedNamespaceError & {\r\n    name: 'EnsAvatarUnsupportedNamespaceError'\r\n  }\r\nexport class EnsAvatarUnsupportedNamespaceError extends BaseError {\r\n  constructor({ namespace }: { namespace: string }) {\r\n    super(\r\n      `ENS NFT avatar namespace \"${namespace}\" is not supported. Must be \"erc721\" or \"erc1155\".`,\r\n      { name: 'EnsAvatarUnsupportedNamespaceError' },\r\n    )\r\n  }\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport {\r\n  type ReadContractErrorType,\r\n  readContract,\r\n} from '../../../actions/public/readContract.js'\r\nimport type { Client } from '../../../clients/createClient.js'\r\nimport type { Transport } from '../../../clients/transports/createTransport.js'\r\nimport {\r\n  EnsAvatarInvalidMetadataError,\r\n  type EnsAvatarInvalidMetadataErrorType,\r\n  EnsAvatarInvalidNftUriError,\r\n  type EnsAvatarInvalidNftUriErrorType,\r\n  EnsAvatarUnsupportedNamespaceError,\r\n  type EnsAvatarUnsupportedNamespaceErrorType,\r\n  EnsAvatarUriResolutionError,\r\n  type EnsAvatarUriResolutionErrorType,\r\n} from '../../../errors/ens.js'\r\nimport type { ErrorType } from '../../../errors/utils.js'\r\nimport type { Chain } from '../../../types/chain.js'\r\nimport type { AssetGatewayUrls } from '../../../types/ens.js'\r\n\r\ntype UriItem = {\r\n  uri: string\r\n  isOnChain: boolean\r\n  isEncoded: boolean\r\n}\r\n\r\nconst networkRegex =\r\n  /(?<protocol>https?:\\/\\/[^\\/]*|ipfs:\\/|ipns:\\/|ar:\\/)?(?<root>\\/)?(?<subpath>ipfs\\/|ipns\\/)?(?<target>[\\w\\-.]+)(?<subtarget>\\/.*)?/\r\nconst ipfsHashRegex =\r\n  /^(Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,})(\\/(?<target>[\\w\\-.]+))?(?<subtarget>\\/.*)?$/\r\nconst base64Regex = /^data:([a-zA-Z\\-/+]*);base64,([^\"].*)/\r\nconst dataURIRegex = /^data:([a-zA-Z\\-/+]*)?(;[a-zA-Z0-9].*?)?(,)/\r\n\r\ntype IsImageUriErrorType = ErrorType\r\n\r\n/** @internal */\r\nexport async function isImageUri(uri: string) {\r\n  try {\r\n    const res = await fetch(uri, { method: 'HEAD' })\r\n    // retrieve content type header to check if content is image\r\n    if (res.status === 200) {\r\n      const contentType = res.headers.get('content-type')\r\n      return contentType?.startsWith('image/')\r\n    }\r\n    return false\r\n  } catch (error: any) {\r\n    // if error is not cors related then fail\r\n    if (typeof error === 'object' && typeof error.response !== 'undefined') {\r\n      return false\r\n    }\r\n    // fail in NodeJS, since the error is not cors but any other network issue\r\n    // biome-ignore lint/suspicious/noPrototypeBuiltins:\r\n    if (!globalThis.hasOwnProperty('Image')) return false\r\n    // in case of cors, use image api to validate if given url is an actual image\r\n    return new Promise((resolve) => {\r\n      const img = new Image()\r\n      img.onload = () => {\r\n        resolve(true)\r\n      }\r\n      img.onerror = () => {\r\n        resolve(false)\r\n      }\r\n      img.src = uri\r\n    })\r\n  }\r\n}\r\n\r\ntype GetGatewayErrorType = ErrorType\r\n\r\n/** @internal */\r\nexport function getGateway(custom: string | undefined, defaultGateway: string) {\r\n  if (!custom) return defaultGateway\r\n  if (custom.endsWith('/')) return custom.slice(0, -1)\r\n  return custom\r\n}\r\n\r\nexport type ResolveAvatarUriErrorType =\r\n  | GetGatewayErrorType\r\n  | EnsAvatarUriResolutionErrorType\r\n  | ErrorType\r\n\r\nexport function resolveAvatarUri({\r\n  uri,\r\n  gatewayUrls,\r\n}: {\r\n  uri: string\r\n  gatewayUrls?: AssetGatewayUrls | undefined\r\n}): UriItem {\r\n  const isEncoded = base64Regex.test(uri)\r\n  if (isEncoded) return { uri, isOnChain: true, isEncoded }\r\n\r\n  const ipfsGateway = getGateway(gatewayUrls?.ipfs, 'https://ipfs.io')\r\n  const arweaveGateway = getGateway(gatewayUrls?.arweave, 'https://arweave.net')\r\n\r\n  const networkRegexMatch = uri.match(networkRegex)\r\n  const {\r\n    protocol,\r\n    subpath,\r\n    target,\r\n    subtarget = '',\r\n  } = networkRegexMatch?.groups || {}\r\n\r\n  const isIPNS = protocol === 'ipns:/' || subpath === 'ipns/'\r\n  const isIPFS =\r\n    protocol === 'ipfs:/' || subpath === 'ipfs/' || ipfsHashRegex.test(uri)\r\n\r\n  if (uri.startsWith('http') && !isIPNS && !isIPFS) {\r\n    let replacedUri = uri\r\n    if (gatewayUrls?.arweave)\r\n      replacedUri = uri.replace(/https:\\/\\/arweave.net/g, gatewayUrls?.arweave)\r\n    return { uri: replacedUri, isOnChain: false, isEncoded: false }\r\n  }\r\n\r\n  if ((isIPNS || isIPFS) && target) {\r\n    return {\r\n      uri: `${ipfsGateway}/${isIPNS ? 'ipns' : 'ipfs'}/${target}${subtarget}`,\r\n      isOnChain: false,\r\n      isEncoded: false,\r\n    }\r\n  }\r\n\r\n  if (protocol === 'ar:/' && target) {\r\n    return {\r\n      uri: `${arweaveGateway}/${target}${subtarget || ''}`,\r\n      isOnChain: false,\r\n      isEncoded: false,\r\n    }\r\n  }\r\n\r\n  let parsedUri = uri.replace(dataURIRegex, '')\r\n  if (parsedUri.startsWith('<svg')) {\r\n    // if svg, base64 encode\r\n    parsedUri = `data:image/svg+xml;base64,${btoa(parsedUri)}`\r\n  }\r\n\r\n  if (parsedUri.startsWith('data:') || parsedUri.startsWith('{')) {\r\n    return {\r\n      uri: parsedUri,\r\n      isOnChain: true,\r\n      isEncoded: false,\r\n    }\r\n  }\r\n\r\n  throw new EnsAvatarUriResolutionError({ uri })\r\n}\r\n\r\nexport type GetJsonImageErrorType =\r\n  | EnsAvatarInvalidMetadataErrorType\r\n  | ErrorType\r\n\r\nexport function getJsonImage(data: any) {\r\n  // validation check for json data, must include one of theses properties\r\n  if (\r\n    typeof data !== 'object' ||\r\n    (!('image' in data) && !('image_url' in data) && !('image_data' in data))\r\n  ) {\r\n    throw new EnsAvatarInvalidMetadataError({ data })\r\n  }\r\n\r\n  return data.image || data.image_url || data.image_data\r\n}\r\n\r\nexport type GetMetadataAvatarUriErrorType =\r\n  | EnsAvatarUriResolutionErrorType\r\n  | ParseAvatarUriErrorType\r\n  | GetJsonImageErrorType\r\n  | ErrorType\r\n\r\nexport async function getMetadataAvatarUri({\r\n  gatewayUrls,\r\n  uri,\r\n}: {\r\n  gatewayUrls?: AssetGatewayUrls | undefined\r\n  uri: string\r\n}): Promise<string> {\r\n  try {\r\n    const res = await fetch(uri).then((res) => res.json())\r\n    const image = await parseAvatarUri({\r\n      gatewayUrls,\r\n      uri: getJsonImage(res),\r\n    })\r\n    return image\r\n  } catch {\r\n    throw new EnsAvatarUriResolutionError({ uri })\r\n  }\r\n}\r\n\r\nexport type ParseAvatarUriErrorType =\r\n  | ResolveAvatarUriErrorType\r\n  | IsImageUriErrorType\r\n  | EnsAvatarUriResolutionErrorType\r\n  | ErrorType\r\n\r\nexport async function parseAvatarUri({\r\n  gatewayUrls,\r\n  uri,\r\n}: {\r\n  gatewayUrls?: AssetGatewayUrls | undefined\r\n  uri: string\r\n}): Promise<string> {\r\n  const { uri: resolvedURI, isOnChain } = resolveAvatarUri({ uri, gatewayUrls })\r\n  if (isOnChain) return resolvedURI\r\n\r\n  // check if resolvedURI is an image, if it is return the url\r\n  const isImage = await isImageUri(resolvedURI)\r\n  if (isImage) return resolvedURI\r\n\r\n  throw new EnsAvatarUriResolutionError({ uri })\r\n}\r\n\r\ntype ParsedNft = {\r\n  chainID: number\r\n  namespace: string\r\n  contractAddress: Address\r\n  tokenID: string\r\n}\r\n\r\nexport type ParseNftUriErrorType = EnsAvatarInvalidNftUriErrorType | ErrorType\r\n\r\nexport function parseNftUri(uri_: string): ParsedNft {\r\n  let uri = uri_\r\n  // parse valid nft spec (CAIP-22/CAIP-29)\r\n  // @see: https://github.com/ChainAgnostic/CAIPs/tree/master/CAIPs\r\n  if (uri.startsWith('did:nft:')) {\r\n    // convert DID to CAIP\r\n    uri = uri.replace('did:nft:', '').replace(/_/g, '/')\r\n  }\r\n\r\n  const [reference, asset_namespace, tokenID] = uri.split('/')\r\n  const [eip_namespace, chainID] = reference.split(':')\r\n  const [erc_namespace, contractAddress] = asset_namespace.split(':')\r\n\r\n  if (!eip_namespace || eip_namespace.toLowerCase() !== 'eip155')\r\n    throw new EnsAvatarInvalidNftUriError({ reason: 'Only EIP-155 supported' })\r\n  if (!chainID)\r\n    throw new EnsAvatarInvalidNftUriError({ reason: 'Chain ID not found' })\r\n  if (!contractAddress)\r\n    throw new EnsAvatarInvalidNftUriError({\r\n      reason: 'Contract address not found',\r\n    })\r\n  if (!tokenID)\r\n    throw new EnsAvatarInvalidNftUriError({ reason: 'Token ID not found' })\r\n  if (!erc_namespace)\r\n    throw new EnsAvatarInvalidNftUriError({ reason: 'ERC namespace not found' })\r\n\r\n  return {\r\n    chainID: Number.parseInt(chainID),\r\n    namespace: erc_namespace.toLowerCase(),\r\n    contractAddress: contractAddress as Address,\r\n    tokenID,\r\n  }\r\n}\r\n\r\nexport type GetNftTokenUriErrorType =\r\n  | ReadContractErrorType\r\n  | EnsAvatarUnsupportedNamespaceErrorType\r\n  | ErrorType\r\n\r\nexport async function getNftTokenUri<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  { nft }: { nft: ParsedNft },\r\n) {\r\n  if (nft.namespace === 'erc721') {\r\n    return readContract(client, {\r\n      address: nft.contractAddress,\r\n      abi: [\r\n        {\r\n          name: 'tokenURI',\r\n          type: 'function',\r\n          stateMutability: 'view',\r\n          inputs: [{ name: 'tokenId', type: 'uint256' }],\r\n          outputs: [{ name: '', type: 'string' }],\r\n        },\r\n      ],\r\n      functionName: 'tokenURI',\r\n      args: [BigInt(nft.tokenID)],\r\n    })\r\n  }\r\n  if (nft.namespace === 'erc1155') {\r\n    return readContract(client, {\r\n      address: nft.contractAddress,\r\n      abi: [\r\n        {\r\n          name: 'uri',\r\n          type: 'function',\r\n          stateMutability: 'view',\r\n          inputs: [{ name: '_id', type: 'uint256' }],\r\n          outputs: [{ name: '', type: 'string' }],\r\n        },\r\n      ],\r\n      functionName: 'uri',\r\n      args: [BigInt(nft.tokenID)],\r\n    })\r\n  }\r\n  throw new EnsAvatarUnsupportedNamespaceError({ namespace: nft.namespace })\r\n}\r\n", "import type { Client } from '../../../clients/createClient.js'\r\nimport type { Transport } from '../../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../../errors/utils.js'\r\nimport type { Chain } from '../../../types/chain.js'\r\nimport type { AssetGatewayUrls } from '../../../types/ens.js'\r\n\r\nimport {\r\n  type GetJsonImageErrorType,\r\n  type GetMetadataAvatarUriErrorType,\r\n  type GetNftTokenUriErrorType,\r\n  type ParseAvatarUriErrorType,\r\n  type ParseNftUriErrorType,\r\n  type ResolveAvatarUriErrorType,\r\n  getJsonImage,\r\n  getMetadataAvatarUri,\r\n  getNftTokenUri,\r\n  parseAvatarUri,\r\n  parseNftUri,\r\n  resolveAvatarUri,\r\n} from './utils.js'\r\n\r\nexport type ParseAvatarRecordErrorType =\r\n  | ParseNftAvatarUriErrorType\r\n  | ParseAvatarUriErrorType\r\n  | ErrorType\r\n\r\n/*\r\n * @description Parses an ENS avatar record.\r\n *\r\n * @example\r\n * parseAvatarRecord('eip155:1/erc1155:0xb32979486938aa9694bfc898f35dbed459f44424/10063')\r\n * 'https://ipfs.io/ipfs/QmSP4nq9fnN9dAiCj42ug9Wa79rqmQerZXZch82VqpiH7U/image.gif'\r\n *\r\n * @see https://docs.ens.domains/web/avatars\r\n *\r\n */\r\nexport async function parseAvatarRecord<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  {\r\n    gatewayUrls,\r\n    record,\r\n  }: {\r\n    gatewayUrls?: AssetGatewayUrls | undefined\r\n    record: string\r\n  },\r\n): Promise<string> {\r\n  if (/eip155:/i.test(record))\r\n    return parseNftAvatarUri(client, { gatewayUrls, record })\r\n  return parseAvatarUri({ uri: record, gatewayUrls })\r\n}\r\n\r\ntype ParseNftAvatarUriErrorType =\r\n  | ParseNftUriErrorType\r\n  | GetNftTokenUriErrorType\r\n  | ResolveAvatarUriErrorType\r\n  | ParseAvatarUriErrorType\r\n  | GetJsonImageErrorType\r\n  | GetMetadataAvatarUriErrorType\r\n  | ErrorType\r\n\r\nasync function parseNftAvatarUri<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  {\r\n    gatewayUrls,\r\n    record,\r\n  }: {\r\n    gatewayUrls?: AssetGatewayUrls | undefined\r\n    record: string\r\n  },\r\n): Promise<string> {\r\n  // parse NFT URI into properties\r\n  const nft = parseNftUri(record)\r\n  // fetch tokenURI from the NFT contract\r\n  const nftUri = await getNftTokenUri(client, { nft })\r\n  // resolve the URI from the fetched tokenURI\r\n  const {\r\n    uri: resolvedNftUri,\r\n    isOnChain,\r\n    isEncoded,\r\n  } = resolveAvatarUri({ uri: nftUri, gatewayUrls })\r\n\r\n  // if the resolved URI is on chain, return the data\r\n  if (\r\n    isOnChain &&\r\n    (resolvedNftUri.includes('data:application/json;base64,') ||\r\n      resolvedNftUri.startsWith('{'))\r\n  ) {\r\n    const encodedJson = isEncoded\r\n      ? // if it is encoded, decode it\r\n        atob(resolvedNftUri.replace('data:application/json;base64,', ''))\r\n      : // if it isn't encoded assume it is a JSON string, but it could be anything (it will error if it is)\r\n        resolvedNftUri\r\n\r\n    const decoded = JSON.parse(encodedJson)\r\n    return parseAvatarUri({ uri: getJsonImage(decoded), gatewayUrls })\r\n  }\r\n\r\n  let uriTokenId = nft.tokenID\r\n  if (nft.namespace === 'erc1155')\r\n    uriTokenId = uriTokenId.replace('0x', '').padStart(64, '0')\r\n\r\n  return getMetadataAvatarUri({\r\n    gatewayUrls,\r\n    uri: resolvedNftUri.replace(/(?:0x)?{id}/, uriTokenId),\r\n  })\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport {\r\n  textResolverAbi,\r\n  universalResolverResolveAbi,\r\n} from '../../constants/abis.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Prettify } from '../../types/utils.js'\r\nimport {\r\n  type DecodeFunctionResultErrorType,\r\n  decodeFunctionResult,\r\n} from '../../utils/abi/decodeFunctionResult.js'\r\nimport {\r\n  type EncodeFunctionDataErrorType,\r\n  encodeFunctionData,\r\n} from '../../utils/abi/encodeFunctionData.js'\r\nimport {\r\n  type GetChainContractAddressErrorType,\r\n  getChainContractAddress,\r\n} from '../../utils/chain/getChainContractAddress.js'\r\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\r\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js'\r\nimport { type NamehashErrorType, namehash } from '../../utils/ens/namehash.js'\r\nimport {\r\n  type PacketToBytesErrorType,\r\n  packetToBytes,\r\n} from '../../utils/ens/packetToBytes.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport {\r\n  type ReadContractErrorType,\r\n  type ReadContractParameters,\r\n  readContract,\r\n} from '../public/readContract.js'\r\n\r\nexport type GetEnsTextParameters = Prettify<\r\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\r\n    /** ENS name to get Text for. */\r\n    name: string\r\n    /** Universal Resolver gateway URLs to use for resolving CCIP-read requests. */\r\n    gatewayUrls?: string[] | undefined\r\n    /** Text record to retrieve. */\r\n    key: string\r\n    /** Whether or not to throw errors propagated from the ENS Universal Resolver Contract. */\r\n    strict?: boolean | undefined\r\n    /** Address of ENS Universal Resolver Contract. */\r\n    universalResolverAddress?: Address | undefined\r\n  }\r\n>\r\n\r\nexport type GetEnsTextReturnType = string | null\r\n\r\nexport type GetEnsTextErrorType =\r\n  | GetChainContractAddressErrorType\r\n  | ReadContractErrorType\r\n  | ToHexErrorType\r\n  | PacketToBytesErrorType\r\n  | EncodeFunctionDataErrorType\r\n  | NamehashErrorType\r\n  | DecodeFunctionResultErrorType\r\n\r\n/**\r\n * Gets a text record for specified ENS name.\r\n *\r\n * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver\r\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\r\n *\r\n * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\r\n *\r\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetEnsTextParameters}\r\n * @returns Address for ENS resolver. {@link GetEnsTextReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getEnsText, normalize } from 'viem/ens'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const twitterRecord = await getEnsText(client, {\r\n *   name: normalize('wevm.eth'),\r\n *   key: 'com.twitter',\r\n * })\r\n * // 'wevm_dev'\r\n */\r\nexport async function getEnsText<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  {\r\n    blockNumber,\r\n    blockTag,\r\n    name,\r\n    key,\r\n    gatewayUrls,\r\n    strict,\r\n    universalResolverAddress: universalResolverAddress_,\r\n  }: GetEnsTextParameters,\r\n): Promise<GetEnsTextReturnType> {\r\n  let universalResolverAddress = universalResolverAddress_\r\n  if (!universalResolverAddress) {\r\n    if (!client.chain)\r\n      throw new Error(\r\n        'client chain not configured. universalResolverAddress is required.',\r\n      )\r\n\r\n    universalResolverAddress = getChainContractAddress({\r\n      blockNumber,\r\n      chain: client.chain,\r\n      contract: 'ensUniversalResolver',\r\n    })\r\n  }\r\n\r\n  try {\r\n    const readContractParameters = {\r\n      address: universalResolverAddress,\r\n      abi: universalResolverResolveAbi,\r\n      functionName: 'resolve',\r\n      args: [\r\n        toHex(packetToBytes(name)),\r\n        encodeFunctionData({\r\n          abi: textResolverAbi,\r\n          functionName: 'text',\r\n          args: [namehash(name), key],\r\n        }),\r\n      ],\r\n      blockNumber,\r\n      blockTag,\r\n    } as const\r\n\r\n    const readContractAction = getAction(client, readContract, 'readContract')\r\n\r\n    const res = gatewayUrls\r\n      ? await readContractAction({\r\n          ...readContractParameters,\r\n          args: [...readContractParameters.args, gatewayUrls],\r\n        })\r\n      : await readContractAction(readContractParameters)\r\n\r\n    if (res[0] === '0x') return null\r\n\r\n    const record = decodeFunctionResult({\r\n      abi: textResolverAbi,\r\n      functionName: 'text',\r\n      data: res[0],\r\n    })\r\n\r\n    return record === '' ? null : record\r\n  } catch (err) {\r\n    if (strict) throw err\r\n    if (isNullUniversalResolverError(err, 'resolve')) return null\r\n    throw err\r\n  }\r\n}\r\n", "import type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { AssetGatewayUrls } from '../../types/ens.js'\r\nimport type { Prettify } from '../../types/utils.js'\r\nimport {\r\n  type ParseAvatarRecordErrorType,\r\n  parseAvatarRecord,\r\n} from '../../utils/ens/avatar/parseAvatarRecord.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\n\r\nimport {\r\n  type GetEnsTextErrorType,\r\n  type GetEnsTextParameters,\r\n  getEnsText,\r\n} from './getEnsText.js'\r\n\r\nexport type GetEnsAvatarParameters = Prettify<\r\n  Omit<GetEnsTextParameters, 'key'> & {\r\n    /** Gateway urls to resolve IPFS and/or Arweave assets. */\r\n    assetGatewayUrls?: AssetGatewayUrls | undefined\r\n  }\r\n>\r\n\r\nexport type GetEnsAvatarReturnType = string | null\r\n\r\nexport type GetEnsAvatarErrorType =\r\n  | GetEnsTextErrorType\r\n  | ParseAvatarRecordErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Gets the avatar of an ENS name.\r\n *\r\n * - Docs: https://viem.sh/docs/ens/actions/getEnsAvatar\r\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\r\n *\r\n * Calls [`getEnsText`](https://viem.sh/docs/ens/actions/getEnsText) with `key` set to `'avatar'`.\r\n *\r\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetEnsAvatarParameters}\r\n * @returns Avatar URI or `null` if not found. {@link GetEnsAvatarReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getEnsAvatar, normalize } from 'viem/ens'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const ensAvatar = await getEnsAvatar(client, {\r\n *   name: normalize('wevm.eth'),\r\n * })\r\n * // 'https://ipfs.io/ipfs/Qma8mnp6xV3J2cRNf3mTth5C8nV11CAnceVinc3y8jSbio'\r\n */\r\nexport async function getEnsAvatar<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  {\r\n    blockNumber,\r\n    blockTag,\r\n    assetGatewayUrls,\r\n    name,\r\n    gatewayUrls,\r\n    strict,\r\n    universalResolverAddress,\r\n  }: GetEnsAvatarParameters,\r\n): Promise<GetEnsAvatarReturnType> {\r\n  const record = await getAction(\r\n    client,\r\n    getEnsText,\r\n    'getEnsText',\r\n  )({\r\n    blockNumber,\r\n    blockTag,\r\n    key: 'avatar',\r\n    name,\r\n    universalResolverAddress,\r\n    gatewayUrls,\r\n    strict,\r\n  })\r\n  if (!record) return null\r\n  try {\r\n    return await parseAvatarRecord(client, {\r\n      record,\r\n      gatewayUrls: assetGatewayUrls,\r\n    })\r\n  } catch {\r\n    return null\r\n  }\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport { universalResolverReverseAbi } from '../../constants/abis.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Prettify } from '../../types/utils.js'\r\nimport {\r\n  type GetChainContractAddressErrorType,\r\n  getChainContractAddress,\r\n} from '../../utils/chain/getChainContractAddress.js'\r\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\r\nimport { isNullUniversalResolverError } from '../../utils/ens/errors.js'\r\nimport {\r\n  type PacketToBytesErrorType,\r\n  packetToBytes,\r\n} from '../../utils/ens/packetToBytes.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport {\r\n  type ReadContractErrorType,\r\n  type ReadContractParameters,\r\n  readContract,\r\n} from '../public/readContract.js'\r\n\r\nexport type GetEnsNameParameters = Prettify<\r\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\r\n    /** Address to get ENS name for. */\r\n    address: Address\r\n    /** Universal Resolver gateway URLs to use for resolving CCIP-read requests. */\r\n    gatewayUrls?: string[] | undefined\r\n    /** Whether or not to throw errors propagated from the ENS Universal Resolver Contract. */\r\n    strict?: boolean | undefined\r\n    /** Address of ENS Universal Resolver Contract. */\r\n    universalResolverAddress?: Address | undefined\r\n  }\r\n>\r\n\r\nexport type GetEnsNameReturnType = string | null\r\n\r\nexport type GetEnsNameErrorType =\r\n  | GetChainContractAddressErrorType\r\n  | ReadContractErrorType\r\n  | ToHexErrorType\r\n  | PacketToBytesErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Gets primary name for specified address.\r\n *\r\n * - Docs: https://viem.sh/docs/ens/actions/getEnsName\r\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\r\n *\r\n * Calls `reverse(bytes)` on ENS Universal Resolver Contract to \"reverse resolve\" the address to the primary ENS name.\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetEnsNameParameters}\r\n * @returns Name or `null` if not found. {@link GetEnsNameReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getEnsName } from 'viem/ens'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const ensName = await getEnsName(client, {\r\n *   address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\r\n * })\r\n * // 'wevm.eth'\r\n */\r\nexport async function getEnsName<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  {\r\n    address,\r\n    blockNumber,\r\n    blockTag,\r\n    gatewayUrls,\r\n    strict,\r\n    universalResolverAddress: universalResolverAddress_,\r\n  }: GetEnsNameParameters,\r\n): Promise<GetEnsNameReturnType> {\r\n  let universalResolverAddress = universalResolverAddress_\r\n  if (!universalResolverAddress) {\r\n    if (!client.chain)\r\n      throw new Error(\r\n        'client chain not configured. universalResolverAddress is required.',\r\n      )\r\n\r\n    universalResolverAddress = getChainContractAddress({\r\n      blockNumber,\r\n      chain: client.chain,\r\n      contract: 'ensUniversalResolver',\r\n    })\r\n  }\r\n\r\n  const reverseNode = `${address.toLowerCase().substring(2)}.addr.reverse`\r\n  try {\r\n    const readContractParameters = {\r\n      address: universalResolverAddress,\r\n      abi: universalResolverReverseAbi,\r\n      functionName: 'reverse',\r\n      args: [toHex(packetToBytes(reverseNode))],\r\n      blockNumber,\r\n      blockTag,\r\n    } as const\r\n\r\n    const readContractAction = getAction(client, readContract, 'readContract')\r\n\r\n    const [name, resolvedAddress] = gatewayUrls\r\n      ? await readContractAction({\r\n          ...readContractParameters,\r\n          args: [...readContractParameters.args, gatewayUrls],\r\n        })\r\n      : await readContractAction(readContractParameters)\r\n\r\n    if (address.toLowerCase() !== resolvedAddress.toLowerCase()) return null\r\n    return name\r\n  } catch (err) {\r\n    if (strict) throw err\r\n    if (isNullUniversalResolverError(err, 'reverse')) return null\r\n    throw err\r\n  }\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Prettify } from '../../types/utils.js'\r\nimport {\r\n  type GetChainContractAddressErrorType,\r\n  getChainContractAddress,\r\n} from '../../utils/chain/getChainContractAddress.js'\r\nimport { type ToHexErrorType, toHex } from '../../utils/encoding/toHex.js'\r\nimport {\r\n  type PacketToBytesErrorType,\r\n  packetToBytes,\r\n} from '../../utils/ens/packetToBytes.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport {\r\n  type ReadContractParameters,\r\n  readContract,\r\n} from '../public/readContract.js'\r\n\r\nexport type GetEnsResolverParameters = Prettify<\r\n  Pick<ReadContractParameters, 'blockNumber' | 'blockTag'> & {\r\n    /** Name to get the address for. */\r\n    name: string\r\n    /** Address of ENS Universal Resolver Contract. */\r\n    universalResolverAddress?: Address | undefined\r\n  }\r\n>\r\n\r\nexport type GetEnsResolverReturnType = Address\r\n\r\nexport type GetEnsResolverErrorType =\r\n  | GetChainContractAddressErrorType\r\n  | ToHexErrorType\r\n  | PacketToBytesErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Gets resolver for ENS name.\r\n *\r\n * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver\r\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\r\n *\r\n * Calls `findResolver(bytes)` on ENS Universal Resolver Contract to retrieve the resolver of an ENS name.\r\n *\r\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetEnsResolverParameters}\r\n * @returns Address for ENS resolver. {@link GetEnsResolverReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getEnsResolver, normalize } from 'viem/ens'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const resolverAddress = await getEnsResolver(client, {\r\n *   name: normalize('wevm.eth'),\r\n * })\r\n * // '0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41'\r\n */\r\nexport async function getEnsResolver<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  {\r\n    blockNumber,\r\n    blockTag,\r\n    name,\r\n    universalResolverAddress: universalResolverAddress_,\r\n  }: GetEnsResolverParameters,\r\n) {\r\n  let universalResolverAddress = universalResolverAddress_\r\n  if (!universalResolverAddress) {\r\n    if (!client.chain)\r\n      throw new Error(\r\n        'client chain not configured. universalResolverAddress is required.',\r\n      )\r\n\r\n    universalResolverAddress = getChainContractAddress({\r\n      blockNumber,\r\n      chain: client.chain,\r\n      contract: 'ensUniversalResolver',\r\n    })\r\n  }\r\n\r\n  const [resolverAddress] = await getAction(\r\n    client,\r\n    readContract,\r\n    'readContract',\r\n  )({\r\n    address: universalResolverAddress,\r\n    abi: [\r\n      {\r\n        inputs: [{ type: 'bytes' }],\r\n        name: 'findResolver',\r\n        outputs: [{ type: 'address' }, { type: 'bytes32' }],\r\n        stateMutability: 'view',\r\n        type: 'function',\r\n      },\r\n    ],\r\n    functionName: 'findResolver',\r\n    args: [toHex(packetToBytes(name))],\r\n    blockNumber,\r\n    blockTag,\r\n  })\r\n  return resolverAddress\r\n}\r\n", "import type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Filter } from '../../types/filter.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js'\r\n\r\nexport type CreateBlockFilterReturnType = Filter<'block'>\r\n\r\nexport type CreateBlockFilterErrorType = RequestErrorType | ErrorType\r\n\r\n/**\r\n * Creates a [`Filter`](https://viem.sh/docs/glossary/types#filter) to listen for new block hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/createBlockFilter\r\n * - JSON-RPC Methods: [`eth_newBlockFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newBlockFilter)\r\n *\r\n * @param client - Client to use\r\n * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateBlockFilterReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { createBlockFilter } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const filter = await createBlockFilter(client)\r\n * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'block' }\r\n */\r\nexport async function createBlockFilter<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n): Promise<CreateBlockFilterReturnType> {\r\n  const getRequest = createFilterRequestScope(client, {\r\n    method: 'eth_newBlockFilter',\r\n  })\r\n  const id = await client.request({\r\n    method: 'eth_newBlockFilter',\r\n  })\r\n  return { id, request: getRequest(id), type: 'block' }\r\n}\r\n", "import type { AbiEvent, Address } from 'abitype'\r\n\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type {\r\n  MaybeAbiEventName,\r\n  MaybeExtractEventArgsFromAbi,\r\n} from '../../types/contract.js'\r\nimport type { Filter } from '../../types/filter.js'\r\nimport type { Hex, LogTopic } from '../../types/misc.js'\r\nimport type { Prettify } from '../../types/utils.js'\r\nimport {\r\n  type EncodeEventTopicsErrorType,\r\n  type EncodeEventTopicsParameters,\r\n  encodeEventTopics,\r\n} from '../../utils/abi/encodeEventTopics.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type NumberToHexErrorType,\r\n  numberToHex,\r\n} from '../../utils/encoding/toHex.js'\r\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js'\r\n\r\nexport type CreateEventFilterParameters<\r\n  abiEvent extends AbiEvent | undefined = undefined,\r\n  abiEvents extends\r\n    | readonly AbiEvent[]\r\n    | readonly unknown[]\r\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  //\r\n  _eventName extends string | undefined = MaybeAbiEventName<abiEvent>,\r\n  _args extends\r\n    | MaybeExtractEventArgsFromAbi<abiEvents, _eventName>\r\n    | undefined = undefined,\r\n> = {\r\n  address?: Address | Address[] | undefined\r\n  fromBlock?: fromBlock | BlockNumber | BlockTag | undefined\r\n  toBlock?: toBlock | BlockNumber | BlockTag | undefined\r\n} & (MaybeExtractEventArgsFromAbi<\r\n  abiEvents,\r\n  _eventName\r\n> extends infer eventFilterArgs\r\n  ?\r\n      | {\r\n          args:\r\n            | eventFilterArgs\r\n            | (_args extends eventFilterArgs ? _args : never)\r\n          event: abiEvent\r\n          events?: undefined\r\n          /**\r\n           * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\r\n           * @default false\r\n           */\r\n          strict?: strict | undefined\r\n        }\r\n      | {\r\n          args?: undefined\r\n          event?: abiEvent | undefined\r\n          events?: undefined\r\n          /**\r\n           * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\r\n           * @default false\r\n           */\r\n          strict?: strict | undefined\r\n        }\r\n      | {\r\n          args?: undefined\r\n          event?: undefined\r\n          events: abiEvents | undefined\r\n          /**\r\n           * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\r\n           * @default false\r\n           */\r\n          strict?: strict | undefined\r\n        }\r\n      | {\r\n          args?: undefined\r\n          event?: undefined\r\n          events?: undefined\r\n          strict?: undefined\r\n        }\r\n  : {\r\n      args?: undefined\r\n      event?: undefined\r\n      events?: undefined\r\n      strict?: undefined\r\n    })\r\n\r\nexport type CreateEventFilterReturnType<\r\n  abiEvent extends AbiEvent | undefined = undefined,\r\n  abiEvents extends\r\n    | readonly AbiEvent[]\r\n    | readonly unknown[]\r\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  _eventName extends string | undefined = MaybeAbiEventName<abiEvent>,\r\n  _args extends\r\n    | MaybeExtractEventArgsFromAbi<abiEvents, _eventName>\r\n    | undefined = undefined,\r\n> = Prettify<\r\n  Filter<'event', abiEvents, _eventName, _args, strict, fromBlock, toBlock>\r\n>\r\n\r\nexport type CreateEventFilterErrorType =\r\n  | EncodeEventTopicsErrorType\r\n  | RequestErrorType\r\n  | NumberToHexErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Creates a [`Filter`](https://viem.sh/docs/glossary/types#filter) to listen for new events that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/createEventFilter\r\n * - JSON-RPC Methods: [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link CreateEventFilterParameters}\r\n * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateEventFilterReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { createEventFilter } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const filter = await createEventFilter(client, {\r\n *   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\r\n * })\r\n */\r\nexport async function createEventFilter<\r\n  chain extends Chain | undefined,\r\n  const abiEvent extends AbiEvent | undefined = undefined,\r\n  const abiEvents extends\r\n    | readonly AbiEvent[]\r\n    | readonly unknown[]\r\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  fromBlock extends BlockNumber<bigint> | BlockTag | undefined = undefined,\r\n  toBlock extends BlockNumber<bigint> | BlockTag | undefined = undefined,\r\n  _eventName extends string | undefined = MaybeAbiEventName<abiEvent>,\r\n  _args extends\r\n    | MaybeExtractEventArgsFromAbi<abiEvents, _eventName>\r\n    | undefined = undefined,\r\n>(\r\n  client: Client<Transport, chain>,\r\n  {\r\n    address,\r\n    args,\r\n    event,\r\n    events: events_,\r\n    fromBlock,\r\n    strict,\r\n    toBlock,\r\n  }: CreateEventFilterParameters<\r\n    abiEvent,\r\n    abiEvents,\r\n    strict,\r\n    fromBlock,\r\n    toBlock,\r\n    _eventName,\r\n    _args\r\n  > = {} as any,\r\n): Promise<\r\n  CreateEventFilterReturnType<\r\n    abiEvent,\r\n    abiEvents,\r\n    strict,\r\n    fromBlock,\r\n    toBlock,\r\n    _eventName,\r\n    _args\r\n  >\r\n> {\r\n  const events = events_ ?? (event ? [event] : undefined)\r\n\r\n  const getRequest = createFilterRequestScope(client, {\r\n    method: 'eth_newFilter',\r\n  })\r\n\r\n  let topics: LogTopic[] = []\r\n  if (events) {\r\n    const encoded = (events as AbiEvent[]).flatMap((event) =>\r\n      encodeEventTopics({\r\n        abi: [event],\r\n        eventName: (event as AbiEvent).name,\r\n        args,\r\n      } as EncodeEventTopicsParameters),\r\n    )\r\n    // TODO: Clean up type casting\r\n    topics = [encoded as LogTopic]\r\n    if (event) topics = topics[0] as LogTopic[]\r\n  }\r\n\r\n  const id: Hex = await client.request({\r\n    method: 'eth_newFilter',\r\n    params: [\r\n      {\r\n        address,\r\n        fromBlock:\r\n          typeof fromBlock === 'bigint' ? numberToHex(fromBlock) : fromBlock,\r\n        toBlock: typeof toBlock === 'bigint' ? numberToHex(toBlock) : toBlock,\r\n        ...(topics.length ? { topics } : {}),\r\n      },\r\n    ],\r\n  })\r\n\r\n  return {\r\n    abi: events,\r\n    args,\r\n    eventName: event ? (event as AbiEvent).name : undefined,\r\n    fromBlock,\r\n    id,\r\n    request: getRequest(id),\r\n    strict: Boolean(strict),\r\n    toBlock,\r\n    type: 'event',\r\n  } as unknown as CreateEventFilterReturnType<\r\n    abiEvent,\r\n    abiEvents,\r\n    strict,\r\n    fromBlock,\r\n    toBlock,\r\n    _eventName,\r\n    _args\r\n  >\r\n}\r\n", "import type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Filter } from '../../types/filter.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport { createFilterRequestScope } from '../../utils/filters/createFilterRequestScope.js'\r\n\r\nexport type CreatePendingTransactionFilterReturnType = Filter<'transaction'>\r\n\r\nexport type CreatePendingTransactionFilterErrorType =\r\n  | RequestErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Creates a Filter to listen for new pending transaction hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/createPendingTransactionFilter\r\n * - JSON-RPC Methods: [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter)\r\n *\r\n * @param client - Client to use\r\n * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateBlockFilterReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { createPendingTransactionFilter } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const filter = await createPendingTransactionFilter(client)\r\n * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'transaction' }\r\n */\r\nexport async function createPendingTransactionFilter<\r\n  transport extends Transport,\r\n  chain extends Chain | undefined,\r\n>(\r\n  client: Client<transport, chain>,\r\n): Promise<CreatePendingTransactionFilterReturnType> {\r\n  const getRequest = createFilterRequestScope(client, {\r\n    method: 'eth_newPendingTransactionFilter',\r\n  })\r\n  const id = await client.request({\r\n    method: 'eth_newPendingTransactionFilter',\r\n  })\r\n  return { id, request: getRequest(id), type: 'transaction' }\r\n}\r\n", "import type { Account } from '../../accounts/types.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\n\r\nexport type GetBlobBaseFeeReturnType = bigint\r\n\r\nexport type GetBlobBaseFeeErrorType = RequestErrorType | ErrorType\r\n\r\n/**\r\n * Returns the base fee per blob gas in wei.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/getBlobBaseFee\r\n * - JSON-RPC Methods: [`eth_blobBaseFee`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blobBaseFee)\r\n *\r\n * @param client - Client to use\r\n * @returns The blob base fee (in wei). {@link GetBlobBaseFeeReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getBlobBaseFee } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const blobBaseFee = await getBlobBaseFee(client)\r\n */\r\nexport async function getBlobBaseFee<\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined,\r\n>(\r\n  client: Client<Transport, chain, account>,\r\n): Promise<GetBlobBaseFeeReturnType> {\r\n  const baseFee = await client.request({\r\n    method: 'eth_blobBaseFee',\r\n  })\r\n  return BigInt(baseFee)\r\n}\r\n", "import type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { BlockTag } from '../../types/block.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Hash } from '../../types/misc.js'\r\nimport type { Quantity } from '../../types/rpc.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type HexToNumberErrorType,\r\n  hexToNumber,\r\n} from '../../utils/encoding/fromHex.js'\r\nimport {\r\n  type NumberToHexErrorType,\r\n  numberToHex,\r\n} from '../../utils/encoding/toHex.js'\r\n\r\nexport type GetBlockTransactionCountParameters =\r\n  | {\r\n      /** Hash of the block. */\r\n      blockHash?: Hash | undefined\r\n      blockNumber?: undefined\r\n      blockTag?: undefined\r\n    }\r\n  | {\r\n      blockHash?: undefined\r\n      /** The block number. */\r\n      blockNumber?: bigint | undefined\r\n      blockTag?: undefined\r\n    }\r\n  | {\r\n      blockHash?: undefined\r\n      blockNumber?: undefined\r\n      /** The block tag. Defaults to 'latest'. */\r\n      blockTag?: BlockTag | undefined\r\n    }\r\n\r\nexport type GetBlockTransactionCountReturnType = number\r\n\r\nexport type GetBlockTransactionCountErrorType =\r\n  | NumberToHexErrorType\r\n  | HexToNumberErrorType\r\n  | RequestErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Returns the number of Transactions at a block number, hash, or tag.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/getBlockTransactionCount\r\n * - JSON-RPC Methods:\r\n *   - Calls [`eth_getBlockTransactionCountByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbynumber) for `blockNumber` & `blockTag`.\r\n *   - Calls [`eth_getBlockTransactionCountByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbyhash) for `blockHash`.\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetBlockTransactionCountParameters}\r\n * @returns The block transaction count. {@link GetBlockTransactionCountReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getBlockTransactionCount } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const count = await getBlockTransactionCount(client)\r\n */\r\nexport async function getBlockTransactionCount<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  {\r\n    blockHash,\r\n    blockNumber,\r\n    blockTag = 'latest',\r\n  }: GetBlockTransactionCountParameters = {},\r\n): Promise<GetBlockTransactionCountReturnType> {\r\n  const blockNumberHex =\r\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\r\n\r\n  let count: Quantity\r\n  if (blockHash) {\r\n    count = await client.request(\r\n      {\r\n        method: 'eth_getBlockTransactionCountByHash',\r\n        params: [blockHash],\r\n      },\r\n      { dedupe: true },\r\n    )\r\n  } else {\r\n    count = await client.request(\r\n      {\r\n        method: 'eth_getBlockTransactionCountByNumber',\r\n        params: [blockNumberHex || blockTag],\r\n      },\r\n      { dedupe: Boolean(blockNumberHex) },\r\n    )\r\n  }\r\n\r\n  return hexToNumber(count)\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { BlockTag } from '../../types/block.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type NumberToHexErrorType,\r\n  numberToHex,\r\n} from '../../utils/encoding/toHex.js'\r\n\r\nexport type GetCodeParameters = {\r\n  address: Address\r\n} & (\r\n  | {\r\n      blockNumber?: undefined\r\n      blockTag?: BlockTag | undefined\r\n    }\r\n  | {\r\n      blockNumber?: bigint | undefined\r\n      blockTag?: undefined\r\n    }\r\n)\r\n\r\nexport type GetCodeReturnType = Hex | undefined\r\n\r\nexport type GetCodeErrorType =\r\n  | NumberToHexErrorType\r\n  | RequestErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Retrieves the bytecode at an address.\r\n *\r\n * - Docs: https://viem.sh/docs/contract/getCode\r\n * - JSON-RPC Methods: [`eth_getCode`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getcode)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetCodeParameters}\r\n * @returns The contract's bytecode. {@link GetCodeReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getCode } from 'viem/contract'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const code = await getCode(client, {\r\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n * })\r\n */\r\nexport async function getCode<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  { address, blockNumber, blockTag = 'latest' }: GetCodeParameters,\r\n): Promise<GetCodeReturnType> {\r\n  const blockNumberHex =\r\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\r\n  const hex = await client.request(\r\n    {\r\n      method: 'eth_getCode',\r\n      params: [address, blockNumberHex || blockTag],\r\n    },\r\n    { dedupe: Boolean(blockNumberHex) },\r\n  )\r\n  if (hex === '0x') return undefined\r\n  return hex\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport type { FeeHistory } from '../../types/fee.js'\r\nimport type { RpcFeeHistory } from '../../types/rpc.js'\r\n\r\nexport type FormatFeeHistoryErrorType = ErrorType\r\n\r\nexport function formatFeeHistory(feeHistory: RpcFeeHistory): FeeHistory {\r\n  return {\r\n    baseFeePerGas: feeHistory.baseFeePerGas.map((value) => BigInt(value)),\r\n    gasUsedRatio: feeHistory.gasUsedRatio,\r\n    oldestBlock: BigInt(feeHistory.oldestBlock),\r\n    reward: feeHistory.reward?.map((reward) =>\r\n      reward.map((value) => BigInt(value)),\r\n    ),\r\n  }\r\n}\r\n", "import type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { BlockTag } from '../../types/block.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { FeeHistory } from '../../types/fee.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type NumberToHexErrorType,\r\n  numberToHex,\r\n} from '../../utils/encoding/toHex.js'\r\nimport {\r\n  type FormatFeeHistoryErrorType,\r\n  formatFeeHistory,\r\n} from '../../utils/formatters/feeHistory.js'\r\n\r\nexport type GetFeeHistoryParameters = {\r\n  /**\r\n   * Number of blocks in the requested range. Between 1 and 1024 blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.\r\n   */\r\n  blockCount: number\r\n  /**\r\n   * A monotonically increasing list of percentile values to sample from each block's effective priority fees per gas in ascending order, weighted by gas used.\r\n   */\r\n  rewardPercentiles: number[]\r\n} & (\r\n  | {\r\n      blockNumber?: undefined\r\n      /**\r\n       * Highest number block of the requested range.\r\n       * @default 'latest'\r\n       */\r\n      blockTag?: BlockTag | undefined\r\n    }\r\n  | {\r\n      /** Highest number block of the requested range. */\r\n      blockNumber?: bigint | undefined\r\n      blockTag?: undefined\r\n    }\r\n)\r\nexport type GetFeeHistoryReturnType = FeeHistory\r\n\r\nexport type GetFeeHistoryErrorType =\r\n  | NumberToHexErrorType\r\n  | RequestErrorType\r\n  | FormatFeeHistoryErrorType\r\n\r\n/**\r\n * Returns a collection of historical gas information.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/getFeeHistory\r\n * - JSON-RPC Methods: [`eth_feeHistory`](https://docs.alchemy.com/reference/eth-feehistory)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetFeeHistoryParameters}\r\n * @returns The gas estimate (in wei). {@link GetFeeHistoryReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getFeeHistory } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const feeHistory = await getFeeHistory(client, {\r\n *   blockCount: 4,\r\n *   rewardPercentiles: [25, 75],\r\n * })\r\n */\r\nexport async function getFeeHistory<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  {\r\n    blockCount,\r\n    blockNumber,\r\n    blockTag = 'latest',\r\n    rewardPercentiles,\r\n  }: GetFeeHistoryParameters,\r\n): Promise<GetFeeHistoryReturnType> {\r\n  const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\r\n  const feeHistory = await client.request(\r\n    {\r\n      method: 'eth_feeHistory',\r\n      params: [\r\n        numberToHex(blockCount),\r\n        blockNumberHex || blockTag,\r\n        rewardPercentiles,\r\n      ],\r\n    },\r\n    { dedupe: Boolean(blockNumberHex) },\r\n  )\r\n  return formatFeeHistory(feeHistory)\r\n}\r\n", "import type { Abi, AbiEvent, ExtractAbiEvent } from 'abitype'\r\n\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Filter } from '../../types/filter.js'\r\nimport type { Log } from '../../types/log.js'\r\nimport type { DecodeEventLogErrorType } from '../../utils/abi/decodeEventLog.js'\r\nimport { parseEventLogs } from '../../utils/abi/parseEventLogs.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type FormatLogErrorType,\r\n  formatLog,\r\n} from '../../utils/formatters/log.js'\r\n\r\nexport type GetFilterLogsParameters<\r\n  abi extends Abi | readonly unknown[] | undefined = undefined,\r\n  eventName extends string | undefined = undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n> = {\r\n  filter: Filter<'event', abi, eventName, any, strict, fromBlock, toBlock>\r\n}\r\nexport type GetFilterLogsReturnType<\r\n  abi extends Abi | readonly unknown[] | undefined = undefined,\r\n  eventName extends string | undefined = undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  _AbiEvent extends AbiEvent | undefined = abi extends Abi\r\n    ? eventName extends string\r\n      ? ExtractAbiEvent<abi, eventName>\r\n      : undefined\r\n    : undefined,\r\n  _Pending extends boolean =\r\n    | (fromBlock extends 'pending' ? true : false)\r\n    | (toBlock extends 'pending' ? true : false),\r\n> = Log<bigint, number, _Pending, _AbiEvent, strict, abi, eventName>[]\r\n\r\nexport type GetFilterLogsErrorType =\r\n  | RequestErrorType\r\n  | DecodeEventLogErrorType\r\n  | FormatLogErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Returns a list of event logs since the filter was created.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/getFilterLogs\r\n * - JSON-RPC Methods: [`eth_getFilterLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterlogs)\r\n *\r\n * `getFilterLogs` is only compatible with **event filters**.\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetFilterLogsParameters}\r\n * @returns A list of event logs. {@link GetFilterLogsReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http, parseAbiItem } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { createEventFilter, getFilterLogs } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const filter = await createEventFilter(client, {\r\n *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\r\n *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\r\n * })\r\n * const logs = await getFilterLogs(client, { filter })\r\n */\r\nexport async function getFilterLogs<\r\n  chain extends Chain | undefined,\r\n  const abi extends Abi | readonly unknown[] | undefined,\r\n  eventName extends string | undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n>(\r\n  _client: Client<Transport, chain>,\r\n  {\r\n    filter,\r\n  }: GetFilterLogsParameters<abi, eventName, strict, fromBlock, toBlock>,\r\n): Promise<\r\n  GetFilterLogsReturnType<abi, eventName, strict, fromBlock, toBlock>\r\n> {\r\n  const strict = filter.strict ?? false\r\n\r\n  const logs = await filter.request({\r\n    method: 'eth_getFilterLogs',\r\n    params: [filter.id],\r\n  })\r\n\r\n  const formattedLogs = logs.map((log) => formatLog(log))\r\n  if (!filter.abi)\r\n    return formattedLogs as GetFilterLogsReturnType<\r\n      abi,\r\n      eventName,\r\n      strict,\r\n      fromBlock,\r\n      toBlock\r\n    >\r\n  return parseEventLogs({\r\n    abi: filter.abi,\r\n    logs: formattedLogs,\r\n    strict,\r\n  }) as unknown as GetFilterLogsReturnType<\r\n    abi,\r\n    eventName,\r\n    strict,\r\n    fromBlock,\r\n    toBlock\r\n  >\r\n}\r\n", "export const arrayRegex = /^(.*)\\[([0-9]*)\\]$/\r\n\r\n// `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\r\n// https://regexr.com/6va55\r\nexport const bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/\r\n\r\n// `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\r\n// https://regexr.com/6v8hp\r\nexport const integerRegex =\r\n  /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/\r\n", "// Implementation forked and adapted from https://github.com/MetaMask/eth-sig-util/blob/main/src/sign-typed-data.ts\r\n\r\nimport type { AbiParameter, TypedData, TypedDataDomain } from 'abitype'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { TypedDataDefinition } from '../../types/typedData.js'\r\nimport {\r\n  type EncodeAbiParametersErrorType,\r\n  encodeAbiParameters,\r\n} from '../abi/encodeAbiParameters.js'\r\nimport { concat } from '../data/concat.js'\r\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\r\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\r\nimport {\r\n  type GetTypesForEIP712DomainErrorType,\r\n  type ValidateTypedDataErrorType,\r\n  getTypesForEIP712Domain,\r\n  validateTypedData,\r\n} from '../typedData.js'\r\n\r\ntype MessageTypeProperty = {\r\n  name: string\r\n  type: string\r\n}\r\n\r\nexport type HashTypedDataParameters<\r\n  typedData extends TypedData | Record<string, unknown> = TypedData,\r\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\r\n> = TypedDataDefinition<typedData, primaryType>\r\n\r\nexport type HashTypedDataReturnType = Hex\r\n\r\nexport type HashTypedDataErrorType =\r\n  | GetTypesForEIP712DomainErrorType\r\n  | HashDomainErrorType\r\n  | HashStructErrorType\r\n  | ValidateTypedDataErrorType\r\n  | ErrorType\r\n\r\nexport function hashTypedData<\r\n  const typedData extends TypedData | Record<string, unknown>,\r\n  primaryType extends keyof typedData | 'EIP712Domain',\r\n>(\r\n  parameters: HashTypedDataParameters<typedData, primaryType>,\r\n): HashTypedDataReturnType {\r\n  const {\r\n    domain = {},\r\n    message,\r\n    primaryType,\r\n  } = parameters as HashTypedDataParameters\r\n  const types = {\r\n    EIP712Domain: getTypesForEIP712Domain({ domain }),\r\n    ...parameters.types,\r\n  }\r\n\r\n  // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\r\n  // as we can't statically check this with TypeScript.\r\n  validateTypedData({\r\n    domain,\r\n    message,\r\n    primaryType,\r\n    types,\r\n  })\r\n\r\n  const parts: Hex[] = ['0x1901']\r\n  if (domain)\r\n    parts.push(\r\n      hashDomain({\r\n        domain,\r\n        types: types as Record<string, MessageTypeProperty[]>,\r\n      }),\r\n    )\r\n\r\n  if (primaryType !== 'EIP712Domain')\r\n    parts.push(\r\n      hashStruct({\r\n        data: message,\r\n        primaryType,\r\n        types: types as Record<string, MessageTypeProperty[]>,\r\n      }),\r\n    )\r\n\r\n  return keccak256(concat(parts))\r\n}\r\n\r\nexport type HashDomainErrorType = HashStructErrorType | ErrorType\r\n\r\nexport function hashDomain({\r\n  domain,\r\n  types,\r\n}: {\r\n  domain: TypedDataDomain\r\n  types: Record<string, MessageTypeProperty[]>\r\n}) {\r\n  return hashStruct({\r\n    data: domain,\r\n    primaryType: 'EIP712Domain',\r\n    types,\r\n  })\r\n}\r\n\r\ntype HashStructErrorType = EncodeDataErrorType | Keccak256ErrorType | ErrorType\r\n\r\nexport function hashStruct({\r\n  data,\r\n  primaryType,\r\n  types,\r\n}: {\r\n  data: Record<string, unknown>\r\n  primaryType: string\r\n  types: Record<string, readonly MessageTypeProperty[]>\r\n}) {\r\n  const encoded = encodeData({\r\n    data,\r\n    primaryType,\r\n    types,\r\n  })\r\n  return keccak256(encoded)\r\n}\r\n\r\ntype EncodeDataErrorType =\r\n  | EncodeAbiParametersErrorType\r\n  | EncodeFieldErrorType\r\n  | HashTypeErrorType\r\n  | ErrorType\r\n\r\nfunction encodeData({\r\n  data,\r\n  primaryType,\r\n  types,\r\n}: {\r\n  data: Record<string, unknown>\r\n  primaryType: string\r\n  types: Record<string, readonly MessageTypeProperty[]>\r\n}) {\r\n  const encodedTypes: AbiParameter[] = [{ type: 'bytes32' }]\r\n  const encodedValues: unknown[] = [hashType({ primaryType, types })]\r\n\r\n  for (const field of types[primaryType]) {\r\n    const [type, value] = encodeField({\r\n      types,\r\n      name: field.name,\r\n      type: field.type,\r\n      value: data[field.name],\r\n    })\r\n    encodedTypes.push(type)\r\n    encodedValues.push(value)\r\n  }\r\n\r\n  return encodeAbiParameters(encodedTypes, encodedValues)\r\n}\r\n\r\ntype HashTypeErrorType =\r\n  | ToHexErrorType\r\n  | EncodeTypeErrorType\r\n  | Keccak256ErrorType\r\n  | ErrorType\r\n\r\nfunction hashType({\r\n  primaryType,\r\n  types,\r\n}: {\r\n  primaryType: string\r\n  types: Record<string, readonly MessageTypeProperty[]>\r\n}) {\r\n  const encodedHashType = toHex(encodeType({ primaryType, types }))\r\n  return keccak256(encodedHashType)\r\n}\r\n\r\ntype EncodeTypeErrorType = FindTypeDependenciesErrorType\r\n\r\nexport function encodeType({\r\n  primaryType,\r\n  types,\r\n}: {\r\n  primaryType: string\r\n  types: Record<string, readonly MessageTypeProperty[]>\r\n}) {\r\n  let result = ''\r\n  const unsortedDeps = findTypeDependencies({ primaryType, types })\r\n  unsortedDeps.delete(primaryType)\r\n\r\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()]\r\n  for (const type of deps) {\r\n    result += `${type}(${types[type]\r\n      .map(({ name, type: t }) => `${t} ${name}`)\r\n      .join(',')})`\r\n  }\r\n\r\n  return result\r\n}\r\n\r\ntype FindTypeDependenciesErrorType = ErrorType\r\n\r\nfunction findTypeDependencies(\r\n  {\r\n    primaryType: primaryType_,\r\n    types,\r\n  }: {\r\n    primaryType: string\r\n    types: Record<string, readonly MessageTypeProperty[]>\r\n  },\r\n  results: Set<string> = new Set(),\r\n): Set<string> {\r\n  const match = primaryType_.match(/^\\w*/u)\r\n  const primaryType = match?.[0]!\r\n  if (results.has(primaryType) || types[primaryType] === undefined) {\r\n    return results\r\n  }\r\n\r\n  results.add(primaryType)\r\n\r\n  for (const field of types[primaryType]) {\r\n    findTypeDependencies({ primaryType: field.type, types }, results)\r\n  }\r\n  return results\r\n}\r\n\r\ntype EncodeFieldErrorType =\r\n  | Keccak256ErrorType\r\n  | EncodeAbiParametersErrorType\r\n  | ToHexErrorType\r\n  | ErrorType\r\n\r\nfunction encodeField({\r\n  types,\r\n  name,\r\n  type,\r\n  value,\r\n}: {\r\n  types: Record<string, readonly MessageTypeProperty[]>\r\n  name: string\r\n  type: string\r\n  value: any\r\n}): [type: AbiParameter, value: any] {\r\n  if (types[type] !== undefined) {\r\n    return [\r\n      { type: 'bytes32' },\r\n      keccak256(encodeData({ data: value, primaryType: type, types })),\r\n    ]\r\n  }\r\n\r\n  if (type === 'bytes') {\r\n    const prepend = value.length % 2 ? '0' : ''\r\n    value = `0x${prepend + value.slice(2)}`\r\n    return [{ type: 'bytes32' }, keccak256(value)]\r\n  }\r\n\r\n  if (type === 'string') return [{ type: 'bytes32' }, keccak256(toHex(value))]\r\n\r\n  if (type.lastIndexOf(']') === type.length - 1) {\r\n    const parsedType = type.slice(0, type.lastIndexOf('['))\r\n    const typeValuePairs = (value as [AbiParameter, any][]).map((item) =>\r\n      encodeField({\r\n        name,\r\n        type: parsedType,\r\n        types,\r\n        value: item,\r\n      }),\r\n    )\r\n    return [\r\n      { type: 'bytes32' },\r\n      keccak256(\r\n        encodeAbiParameters(\r\n          typeValuePairs.map(([t]) => t),\r\n          typeValuePairs.map(([, v]) => v),\r\n        ),\r\n      ),\r\n    ]\r\n  }\r\n\r\n  return [{ type }, value]\r\n}\r\n", "import type { TypedData, TypedDataDomain, TypedDataParameter } from 'abitype'\r\n\r\nimport { BytesSizeMismatchError } from '../errors/abi.js'\r\nimport { InvalidAddressError } from '../errors/address.js'\r\nimport type { Hex } from '../types/misc.js'\r\nimport type { TypedDataDefinition } from '../types/typedData.js'\r\n\r\nimport type { ErrorType } from '../errors/utils.js'\r\nimport { type IsAddressErrorType, isAddress } from './address/isAddress.js'\r\nimport { type SizeErrorType, size } from './data/size.js'\r\nimport { type NumberToHexErrorType, numberToHex } from './encoding/toHex.js'\r\nimport { bytesRegex, integerRegex } from './regex.js'\r\nimport {\r\n  type HashDomainErrorType,\r\n  hashDomain,\r\n} from './signature/hashTypedData.js'\r\nimport { stringify } from './stringify.js'\r\n\r\nexport type SerializeTypedDataErrorType =\r\n  | HashDomainErrorType\r\n  | IsAddressErrorType\r\n  | NumberToHexErrorType\r\n  | SizeErrorType\r\n  | ErrorType\r\n\r\nexport function serializeTypedData<\r\n  const typedData extends TypedData | Record<string, unknown>,\r\n  primaryType extends keyof typedData | 'EIP712Domain',\r\n>(parameters: TypedDataDefinition<typedData, primaryType>) {\r\n  const {\r\n    domain: domain_,\r\n    message: message_,\r\n    primaryType,\r\n    types,\r\n  } = parameters as unknown as TypedDataDefinition\r\n\r\n  const normalizeData = (\r\n    struct: readonly TypedDataParameter[],\r\n    data_: Record<string, unknown>,\r\n  ) => {\r\n    const data = { ...data_ }\r\n    for (const param of struct) {\r\n      const { name, type } = param\r\n      if (type === 'address') data[name] = (data[name] as string).toLowerCase()\r\n    }\r\n    return data\r\n  }\r\n\r\n  const domain = (() => {\r\n    if (!types.EIP712Domain) return {}\r\n    if (!domain_) return {}\r\n    return normalizeData(types.EIP712Domain, domain_)\r\n  })()\r\n\r\n  const message = (() => {\r\n    if (primaryType === 'EIP712Domain') return undefined\r\n    return normalizeData(types[primaryType], message_)\r\n  })()\r\n\r\n  return stringify({ domain, message, primaryType, types })\r\n}\r\n\r\nexport type ValidateTypedDataErrorType =\r\n  | HashDomainErrorType\r\n  | IsAddressErrorType\r\n  | NumberToHexErrorType\r\n  | SizeErrorType\r\n  | ErrorType\r\n\r\nexport function validateTypedData<\r\n  const typedData extends TypedData | Record<string, unknown>,\r\n  primaryType extends keyof typedData | 'EIP712Domain',\r\n>(parameters: TypedDataDefinition<typedData, primaryType>) {\r\n  const { domain, message, primaryType, types } =\r\n    parameters as unknown as TypedDataDefinition\r\n\r\n  const validateData = (\r\n    struct: readonly TypedDataParameter[],\r\n    data: Record<string, unknown>,\r\n  ) => {\r\n    for (const param of struct) {\r\n      const { name, type } = param\r\n      const value = data[name]\r\n\r\n      const integerMatch = type.match(integerRegex)\r\n      if (\r\n        integerMatch &&\r\n        (typeof value === 'number' || typeof value === 'bigint')\r\n      ) {\r\n        const [_type, base, size_] = integerMatch\r\n        // If number cannot be cast to a sized hex value, it is out of range\r\n        // and will throw.\r\n        numberToHex(value, {\r\n          signed: base === 'int',\r\n          size: Number.parseInt(size_) / 8,\r\n        })\r\n      }\r\n\r\n      if (type === 'address' && typeof value === 'string' && !isAddress(value))\r\n        throw new InvalidAddressError({ address: value })\r\n\r\n      const bytesMatch = type.match(bytesRegex)\r\n      if (bytesMatch) {\r\n        const [_type, size_] = bytesMatch\r\n        if (size_ && size(value as Hex) !== Number.parseInt(size_))\r\n          throw new BytesSizeMismatchError({\r\n            expectedSize: Number.parseInt(size_),\r\n            givenSize: size(value as Hex),\r\n          })\r\n      }\r\n\r\n      const struct = types[type]\r\n      if (struct) validateData(struct, value as Record<string, unknown>)\r\n    }\r\n  }\r\n\r\n  // Validate domain types.\r\n  if (types.EIP712Domain && domain) validateData(types.EIP712Domain, domain)\r\n\r\n  // Validate message types.\r\n  if (primaryType !== 'EIP712Domain') validateData(types[primaryType], message)\r\n}\r\n\r\nexport type GetTypesForEIP712DomainErrorType = ErrorType\r\n\r\nexport function getTypesForEIP712Domain({\r\n  domain,\r\n}: { domain?: TypedDataDomain | undefined }): TypedDataParameter[] {\r\n  return [\r\n    typeof domain?.name === 'string' && { name: 'name', type: 'string' },\r\n    domain?.version && { name: 'version', type: 'string' },\r\n    typeof domain?.chainId === 'number' && {\r\n      name: 'chainId',\r\n      type: 'uint256',\r\n    },\r\n    domain?.verifyingContract && {\r\n      name: 'verifyingContract',\r\n      type: 'address',\r\n    },\r\n    domain?.salt && { name: 'salt', type: 'bytes32' },\r\n  ].filter(Boolean) as TypedDataParameter[]\r\n}\r\n\r\nexport type DomainSeparatorErrorType =\r\n  | GetTypesForEIP712DomainErrorType\r\n  | HashDomainErrorType\r\n  | ErrorType\r\n\r\nexport function domainSeparator({ domain }: { domain: TypedDataDomain }): Hex {\r\n  return hashDomain({\r\n    domain,\r\n    types: {\r\n      EIP712Domain: getTypesForEIP712Domain({ domain }),\r\n    },\r\n  })\r\n}\r\n", "import { HashMD } from './_md.js';\r\nimport { rotl, wrapConstructor } from './utils.js';\r\n\r\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\r\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\r\nconst Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\r\nconst Id = /* @__PURE__ */ new Uint8Array(new Array(16).fill(0).map((_, i) => i));\r\nconst Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);\r\nlet idxL = [Id];\r\nlet idxR = [Pi];\r\nfor (let i = 0; i < 4; i++) for (let j of [idxL, idxR]) j.push(j[i].map((k) => Rho[k]));\r\n\r\nconst shifts = /* @__PURE__ */ [\r\n  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\r\n  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\r\n  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\r\n  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\r\n  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\r\n].map((i) => new Uint8Array(i));\r\nconst shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\r\nconst shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\r\nconst Kl = /* @__PURE__ */ new Uint32Array([\r\n  0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\r\n]);\r\nconst Kr = /* @__PURE__ */ new Uint32Array([\r\n  0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\r\n]);\r\n// It's called f() in spec.\r\nfunction f(group: number, x: number, y: number, z: number): number {\r\n  if (group === 0) return x ^ y ^ z;\r\n  else if (group === 1) return (x & y) | (~x & z);\r\n  else if (group === 2) return (x | ~y) ^ z;\r\n  else if (group === 3) return (x & z) | (y & ~z);\r\n  else return x ^ (y | ~z);\r\n}\r\n// Temporary buffer, not used to store anything between runs\r\nconst R_BUF = /* @__PURE__ */ new Uint32Array(16);\r\nexport class RIPEMD160 extends HashMD<RIPEMD160> {\r\n  private h0 = 0x67452301 | 0;\r\n  private h1 = 0xefcdab89 | 0;\r\n  private h2 = 0x98badcfe | 0;\r\n  private h3 = 0x10325476 | 0;\r\n  private h4 = 0xc3d2e1f0 | 0;\r\n\r\n  constructor() {\r\n    super(64, 20, 8, true);\r\n  }\r\n  protected get(): [number, number, number, number, number] {\r\n    const { h0, h1, h2, h3, h4 } = this;\r\n    return [h0, h1, h2, h3, h4];\r\n  }\r\n  protected set(h0: number, h1: number, h2: number, h3: number, h4: number) {\r\n    this.h0 = h0 | 0;\r\n    this.h1 = h1 | 0;\r\n    this.h2 = h2 | 0;\r\n    this.h3 = h3 | 0;\r\n    this.h4 = h4 | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    for (let i = 0; i < 16; i++, offset += 4) R_BUF[i] = view.getUint32(offset, true);\r\n    // prettier-ignore\r\n    let al = this.h0 | 0, ar = al,\r\n        bl = this.h1 | 0, br = bl,\r\n        cl = this.h2 | 0, cr = cl,\r\n        dl = this.h3 | 0, dr = dl,\r\n        el = this.h4 | 0, er = el;\r\n\r\n    // Instead of iterating 0 to 80, we split it into 5 groups\r\n    // And use the groups in constants, functions, etc. Much simpler\r\n    for (let group = 0; group < 5; group++) {\r\n      const rGroup = 4 - group;\r\n      const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\r\n      const rl = idxL[group], rr = idxR[group]; // prettier-ignore\r\n      const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\r\n      for (let i = 0; i < 16; i++) {\r\n        const tl = (rotl(al + f(group, bl, cl, dl) + R_BUF[rl[i]] + hbl, sl[i]) + el) | 0;\r\n        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\r\n      }\r\n      // 2 loops are 10% faster\r\n      for (let i = 0; i < 16; i++) {\r\n        const tr = (rotl(ar + f(rGroup, br, cr, dr) + R_BUF[rr[i]] + hbr, sr[i]) + er) | 0;\r\n        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\r\n      }\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    this.set(\r\n      (this.h1 + cl + dr) | 0,\r\n      (this.h2 + dl + er) | 0,\r\n      (this.h3 + el + ar) | 0,\r\n      (this.h4 + al + br) | 0,\r\n      (this.h0 + bl + cr) | 0\r\n    );\r\n  }\r\n  protected roundClean() {\r\n    R_BUF.fill(0);\r\n  }\r\n  destroy() {\r\n    this.destroyed = true;\r\n    this.buffer.fill(0);\r\n    this.set(0, 0, 0, 0, 0);\r\n  }\r\n}\r\n\r\n/**\r\n * RIPEMD-160 - a hash function from 1990s.\r\n * @param message - msg that would be hashed\r\n */\r\nexport const ripemd160 = /* @__PURE__ */ wrapConstructor(() => new RIPEMD160());\r\n", "export const presignMessagePrefix = '\\x19Ethereum Signed Message:\\n'\r\n", "import { presignMessagePrefix } from '../../constants/strings.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Hex, SignableMessage } from '../../types/misc.js'\r\nimport { type ConcatErrorType, concat } from '../data/concat.js'\r\nimport { size } from '../data/size.js'\r\nimport {\r\n  type BytesToHexErrorType,\r\n  type StringToHexErrorType,\r\n  bytesToHex,\r\n  stringToHex,\r\n} from '../encoding/toHex.js'\r\n\r\nexport type ToPrefixedMessageErrorType =\r\n  | ConcatErrorType\r\n  | StringToHexErrorType\r\n  | BytesToHexErrorType\r\n  | ErrorType\r\n\r\nexport function toPrefixedMessage(message_: SignableMessage): Hex {\r\n  const message = (() => {\r\n    if (typeof message_ === 'string') return stringToHex(message_)\r\n    if (typeof message_.raw === 'string') return message_.raw\r\n    return bytesToHex(message_.raw)\r\n  })()\r\n  const prefix = stringToHex(`${presignMessagePrefix}${size(message)}`)\r\n  return concat([prefix, message])\r\n}\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport type { ByteArray, Hex, SignableMessage } from '../../types/misc.js'\r\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\r\nimport { toPrefixedMessage } from './toPrefixedMessage.js'\r\n\r\ntype To = 'hex' | 'bytes'\r\n\r\nexport type HashMessageReturnType<to extends To> =\r\n  | (to extends 'bytes' ? ByteArray : never)\r\n  | (to extends 'hex' ? Hex : never)\r\n\r\nexport type HashMessageErrorType = Keccak256ErrorType | ErrorType\r\n\r\nexport function hashMessage<to extends To = 'hex'>(\r\n  message: SignableMessage,\r\n  to_?: to | undefined,\r\n): HashMessageReturnType<to> {\r\n  return keccak256(toPrefixedMessage(message), to_)\r\n}\r\n", "export const erc6492MagicBytes =\r\n  '0x6492649264926492649264926492649264926492649264926492649264926492' as const\r\n\r\nexport const zeroHash =\r\n  '0x0000000000000000000000000000000000000000000000000000000000000000' as const\r\n", "import { erc6492MagicBytes } from '../../constants/bytes.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport { type SliceHexErrorType, sliceHex } from '../data/slice.js'\r\n\r\nexport type IsErc6492SignatureParameters = Hex\r\nexport type IsErc6492SignatureReturnType = boolean\r\nexport type IsErc6492SignatureErrorType = SliceHexErrorType | ErrorType\r\n\r\n/** Whether or not the signature is an ERC-6492 formatted signature. */\r\nexport function isErc6492Signature(\r\n  signature: IsErc6492SignatureParameters,\r\n): IsErc6492SignatureReturnType {\r\n  return sliceHex(signature, -32) === erc6492MagicBytes\r\n}\r\n", "import type { Address } from 'abitype'\r\nimport { erc6492MagicBytes } from '../../constants/bytes.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { ByteArray, Hex } from '../../types/misc.js'\r\nimport { encodeAbiParameters } from '../abi/encodeAbiParameters.js'\r\nimport { concatHex } from '../data/concat.js'\r\nimport { hexToBytes } from '../encoding/toBytes.js'\r\n\r\ntype To = 'bytes' | 'hex'\r\n\r\nexport type SerializeErc6492SignatureParameters<to extends To = 'hex'> = {\r\n  /** The ERC-4337 Account Factory address to use for counterfactual verification. */\r\n  address: Address\r\n  /** Calldata to pass to deploy account (if not deployed) for counterfactual verification. */\r\n  data: Hex\r\n  /** The original signature. */\r\n  signature: Hex\r\n  to?: to | To | undefined\r\n}\r\n\r\nexport type SerializeErc6492SignatureReturnType<to extends To = 'hex'> =\r\n  | (to extends 'hex' ? Hex : never)\r\n  | (to extends 'bytes' ? ByteArray : never)\r\n\r\nexport type SerializeErc6492SignatureErrorType = ErrorType\r\n\r\n/**\r\n * @description Serializes a ERC-6492 flavoured signature into hex format.\r\n *\r\n * @param signature ERC-6492 signature in object format.\r\n * @returns ERC-6492 signature in hex format.\r\n *\r\n * @example\r\n * serializeSignature({ address: '0x...', data: '0x...', signature: '0x...' })\r\n * // '0x000000000000000000000000cafebabecafebabecafebabecafebabecafebabe000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004deadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041a461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b000000000000000000000000000000000000000000000000000000000000006492649264926492649264926492649264926492649264926492649264926492'\r\n */\r\nexport function serializeErc6492Signature<to extends To = 'hex'>(\r\n  parameters: SerializeErc6492SignatureParameters<to>,\r\n): SerializeErc6492SignatureReturnType<to> {\r\n  const { address, data, signature, to = 'hex' } = parameters\r\n  const signature_ = concatHex([\r\n    encodeAbiParameters(\r\n      [{ type: 'address' }, { type: 'bytes' }, { type: 'bytes' }],\r\n      [address, data, signature],\r\n    ),\r\n    erc6492MagicBytes,\r\n  ])\r\n\r\n  if (to === 'hex') return signature_ as SerializeErc6492SignatureReturnType<to>\r\n  return hexToBytes(signature_) as SerializeErc6492SignatureReturnType<to>\r\n}\r\n", "import { BaseError } from './base.js'\r\n\r\nexport type InvalidDecimalNumberErrorType = InvalidDecimalNumberError & {\r\n  name: 'InvalidDecimalNumberError'\r\n}\r\nexport class InvalidDecimalNumberError extends BaseError {\r\n  constructor({ value }: { value: string }) {\r\n    super(`Number \\`${value}\\` is not a valid decimal number.`, {\r\n      name: 'InvalidDecimalNumberError',\r\n    })\r\n  }\r\n}\r\n", "import { InvalidDecimalNumberError } from '../../errors/unit.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\n\r\nexport type ParseUnitsErrorType = ErrorType\r\n\r\n/**\r\n * Multiplies a string representation of a number by a given exponent of base 10 (10exponent).\r\n *\r\n * - Docs: https://viem.sh/docs/utilities/parseUnits\r\n *\r\n * @example\r\n * import { parseUnits } from 'viem'\r\n *\r\n * parseUnits('420', 9)\r\n * // 420000000000n\r\n */\r\nexport function parseUnits(value: string, decimals: number) {\r\n  if (!/^(-?)([0-9]*)\\.?([0-9]*)$/.test(value))\r\n    throw new InvalidDecimalNumberError({ value })\r\n\r\n  let [integer, fraction = '0'] = value.split('.')\r\n\r\n  const negative = integer.startsWith('-')\r\n  if (negative) integer = integer.slice(1)\r\n\r\n  // trim trailing zeros.\r\n  fraction = fraction.replace(/(0+)$/, '')\r\n\r\n  // round off if the fraction is larger than the number of decimals.\r\n  if (decimals === 0) {\r\n    if (Math.round(Number(`.${fraction}`)) === 1)\r\n      integer = `${BigInt(integer) + 1n}`\r\n    fraction = ''\r\n  } else if (fraction.length > decimals) {\r\n    const [left, unit, right] = [\r\n      fraction.slice(0, decimals - 1),\r\n      fraction.slice(decimals - 1, decimals),\r\n      fraction.slice(decimals),\r\n    ]\r\n\r\n    const rounded = Math.round(Number(`${unit}.${right}`))\r\n    if (rounded > 9)\r\n      fraction = `${BigInt(left) + BigInt(1)}0`.padStart(left.length + 1, '0')\r\n    else fraction = `${left}${rounded}`\r\n\r\n    if (fraction.length > decimals) {\r\n      fraction = fraction.slice(1)\r\n      integer = `${BigInt(integer) + 1n}`\r\n    }\r\n\r\n    fraction = fraction.slice(0, decimals)\r\n  } else {\r\n    fraction = fraction.padEnd(decimals, '0')\r\n  }\r\n\r\n  return BigInt(`${negative ? '-' : ''}${integer}${fraction}`)\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport { getTransactionCount } from '../actions/public/getTransactionCount.js'\r\nimport type { Client } from '../clients/createClient.js'\r\nimport type { MaybePromise } from '../types/utils.js'\r\nimport { LruMap } from './lru.js'\r\n\r\nexport type CreateNonceManagerParameters = {\r\n  source: NonceManagerSource\r\n}\r\n\r\ntype FunctionParameters = {\r\n  address: Address\r\n  chainId: number\r\n}\r\n\r\nexport type NonceManager = {\r\n  /** Get and increment a nonce. */\r\n  consume: (\r\n    parameters: FunctionParameters & { client: Client },\r\n  ) => Promise<number>\r\n  /** Increment a nonce. */\r\n  increment: (chainId: FunctionParameters) => void\r\n  /** Get a nonce. */\r\n  get: (chainId: FunctionParameters & { client: Client }) => Promise<number>\r\n  /** Reset a nonce. */\r\n  reset: (chainId: FunctionParameters) => void\r\n}\r\n\r\n/**\r\n * Creates a nonce manager for auto-incrementing transaction nonces.\r\n *\r\n * - Docs: https://viem.sh/docs/accounts/createNonceManager\r\n *\r\n * @example\r\n * ```ts\r\n * const nonceManager = createNonceManager({\r\n *   source: jsonRpc(),\r\n * })\r\n * ```\r\n */\r\nexport function createNonceManager(\r\n  parameters: CreateNonceManagerParameters,\r\n): NonceManager {\r\n  const { source } = parameters\r\n\r\n  const deltaMap = new Map()\r\n  const nonceMap = new LruMap<number>(8192)\r\n  const promiseMap = new Map<string, Promise<number>>()\r\n\r\n  const getKey = ({ address, chainId }: FunctionParameters) =>\r\n    `${address}.${chainId}`\r\n\r\n  return {\r\n    async consume({ address, chainId, client }) {\r\n      const key = getKey({ address, chainId })\r\n      const promise = this.get({ address, chainId, client })\r\n\r\n      this.increment({ address, chainId })\r\n      const nonce = await promise\r\n\r\n      await source.set({ address, chainId }, nonce)\r\n      nonceMap.set(key, nonce)\r\n\r\n      return nonce\r\n    },\r\n    async increment({ address, chainId }) {\r\n      const key = getKey({ address, chainId })\r\n      const delta = deltaMap.get(key) ?? 0\r\n      deltaMap.set(key, delta + 1)\r\n    },\r\n    async get({ address, chainId, client }) {\r\n      const key = getKey({ address, chainId })\r\n\r\n      let promise = promiseMap.get(key)\r\n      if (!promise) {\r\n        promise = (async () => {\r\n          try {\r\n            const nonce = await source.get({ address, chainId, client })\r\n            const previousNonce = nonceMap.get(key) ?? 0\r\n            if (previousNonce > 0 && nonce <= previousNonce)\r\n              return previousNonce + 1\r\n            nonceMap.delete(key)\r\n            return nonce\r\n          } finally {\r\n            this.reset({ address, chainId })\r\n          }\r\n        })()\r\n        promiseMap.set(key, promise)\r\n      }\r\n\r\n      const delta = deltaMap.get(key) ?? 0\r\n      return delta + (await promise)\r\n    },\r\n    reset({ address, chainId }) {\r\n      const key = getKey({ address, chainId })\r\n      deltaMap.delete(key)\r\n      promiseMap.delete(key)\r\n    },\r\n  }\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\n// Sources\r\n\r\nexport type NonceManagerSource = {\r\n  /** Get a nonce. */\r\n  get(parameters: FunctionParameters & { client: Client }): MaybePromise<number>\r\n  /** Set a nonce. */\r\n  set(parameters: FunctionParameters, nonce: number): MaybePromise<void>\r\n}\r\n\r\n/** JSON-RPC source for a nonce manager. */\r\nexport function jsonRpc(): NonceManagerSource {\r\n  return {\r\n    async get(parameters) {\r\n      const { address, client } = parameters\r\n      return getTransactionCount(client, {\r\n        address,\r\n        blockTag: 'pending',\r\n      })\r\n    },\r\n    set() {},\r\n  }\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\n// Default\r\n\r\n/** Default Nonce Manager with a JSON-RPC source. */\r\nexport const nonceManager = /*#__PURE__*/ createNonceManager({\r\n  source: jsonRpc(),\r\n})\r\n", "import type { ErrorType } from '../../errors/utils.js'\r\nimport type { Proof } from '../../types/proof.js'\r\nimport type { RpcProof } from '../../types/rpc.js'\r\nimport type { ExactPartial } from '../../types/utils.js'\r\nimport { hexToNumber } from '../index.js'\r\n\r\nexport type FormatProofErrorType = ErrorType\r\n\r\nfunction formatStorageProof(storageProof: RpcProof['storageProof']) {\r\n  return storageProof.map((proof) => ({\r\n    ...proof,\r\n    value: BigInt(proof.value),\r\n  }))\r\n}\r\n\r\nexport function formatProof(proof: ExactPartial<RpcProof>) {\r\n  return {\r\n    ...proof,\r\n    balance: proof.balance ? BigInt(proof.balance) : undefined,\r\n    nonce: proof.nonce ? hexToNumber(proof.nonce) : undefined,\r\n    storageProof: proof.storageProof\r\n      ? formatStorageProof(proof.storageProof)\r\n      : undefined,\r\n  } as Proof\r\n}\r\n", "import type { Address } from 'abitype'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { BlockTag } from '../../types/block.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Hash } from '../../types/misc.js'\r\nimport type { Proof } from '../../types/proof.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type NumberToHexErrorType,\r\n  numberToHex,\r\n} from '../../utils/encoding/toHex.js'\r\nimport {\r\n  type FormatProofErrorType,\r\n  formatProof,\r\n} from '../../utils/formatters/proof.js'\r\n\r\nexport type GetProofParameters = {\r\n  /** Account address. */\r\n  address: Address\r\n  /** Array of storage-keys that should be proofed and included. */\r\n  storageKeys: Hash[]\r\n} & (\r\n  | {\r\n      /** The block number. */\r\n      blockNumber?: bigint | undefined\r\n      blockTag?: undefined\r\n    }\r\n  | {\r\n      blockNumber?: undefined\r\n      /**\r\n       * The block tag.\r\n       * @default 'latest'\r\n       */\r\n      blockTag?: BlockTag | undefined\r\n    }\r\n)\r\n\r\nexport type GetProofReturnType = Proof\r\n\r\nexport type GetProofErrorType =\r\n  | NumberToHexErrorType\r\n  | FormatProofErrorType\r\n  | RequestErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Returns the account and storage values of the specified account including the Merkle-proof.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/getProof\r\n * - JSON-RPC Methods:\r\n *   - Calls [`eth_getProof`](https://eips.ethereum.org/EIPS/eip-1186)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetProofParameters}\r\n * @returns Proof data. {@link GetProofReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getProof } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const block = await getProof(client, {\r\n *  address: '0x...',\r\n *  storageKeys: ['0x...'],\r\n * })\r\n */\r\nexport async function getProof<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  {\r\n    address,\r\n    blockNumber,\r\n    blockTag: blockTag_,\r\n    storageKeys,\r\n  }: GetProofParameters,\r\n): Promise<GetProofReturnType> {\r\n  const blockTag = blockTag_ ?? 'latest'\r\n\r\n  const blockNumberHex =\r\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\r\n\r\n  const proof = await client.request({\r\n    method: 'eth_getProof',\r\n    params: [address, storageKeys, blockNumberHex || blockTag],\r\n  })\r\n\r\n  return formatProof(proof)\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { BlockTag } from '../../types/block.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type NumberToHexErrorType,\r\n  numberToHex,\r\n} from '../../utils/encoding/toHex.js'\r\n\r\nexport type GetStorageAtParameters = {\r\n  address: Address\r\n  slot: Hex\r\n} & (\r\n  | {\r\n      blockNumber?: undefined\r\n      blockTag?: BlockTag | undefined\r\n    }\r\n  | {\r\n      blockNumber?: bigint | undefined\r\n      blockTag?: undefined\r\n    }\r\n)\r\n\r\nexport type GetStorageAtReturnType = Hex | undefined\r\n\r\nexport type GetStorageAtErrorType =\r\n  | NumberToHexErrorType\r\n  | RequestErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Returns the value from a storage slot at a given address.\r\n *\r\n * - Docs: https://viem.sh/docs/contract/getStorageAt\r\n * - JSON-RPC Methods: [`eth_getStorageAt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getstorageat)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetStorageAtParameters}\r\n * @returns The value of the storage slot. {@link GetStorageAtReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getStorageAt } from 'viem/contract'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const code = await getStorageAt(client, {\r\n *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n *   slot: toHex(0),\r\n * })\r\n */\r\nexport async function getStorageAt<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  { address, blockNumber, blockTag = 'latest', slot }: GetStorageAtParameters,\r\n): Promise<GetStorageAtReturnType> {\r\n  const blockNumberHex =\r\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\r\n  const data = await client.request({\r\n    method: 'eth_getStorageAt',\r\n    params: [address, slot, blockNumberHex || blockTag],\r\n  })\r\n  return data\r\n}\r\n", "import type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport { TransactionNotFoundError } from '../../errors/transaction.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { BlockTag } from '../../types/block.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Hash } from '../../types/misc.js'\r\nimport type { RpcTransaction } from '../../types/rpc.js'\r\nimport type { Prettify } from '../../types/utils.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type NumberToHexErrorType,\r\n  numberToHex,\r\n} from '../../utils/encoding/toHex.js'\r\nimport {\r\n  type FormattedTransaction,\r\n  formatTransaction,\r\n} from '../../utils/formatters/transaction.js'\r\n\r\nexport type GetTransactionParameters<blockTag extends BlockTag = 'latest'> =\r\n  | {\r\n      /** The block hash */\r\n      blockHash: Hash\r\n      blockNumber?: undefined\r\n      blockTag?: undefined\r\n      hash?: undefined\r\n      /** The index of the transaction on the block. */\r\n      index: number\r\n    }\r\n  | {\r\n      blockHash?: undefined\r\n      /** The block number */\r\n      blockNumber: bigint\r\n      blockTag?: undefined\r\n      hash?: undefined\r\n      /** The index of the transaction on the block. */\r\n      index: number\r\n    }\r\n  | {\r\n      blockHash?: undefined\r\n      blockNumber?: undefined\r\n      /** The block tag. */\r\n      blockTag: blockTag | BlockTag\r\n      hash?: undefined\r\n      /** The index of the transaction on the block. */\r\n      index: number\r\n    }\r\n  | {\r\n      blockHash?: undefined\r\n      blockNumber?: undefined\r\n      blockTag?: undefined\r\n      /** The hash of the transaction. */\r\n      hash: Hash\r\n      index?: number | undefined\r\n    }\r\n\r\nexport type GetTransactionReturnType<\r\n  chain extends Chain | undefined = undefined,\r\n  blockTag extends BlockTag = 'latest',\r\n> = Prettify<FormattedTransaction<chain, blockTag>>\r\n\r\nexport type GetTransactionErrorType =\r\n  | NumberToHexErrorType\r\n  | RequestErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Returns information about a [Transaction](https://viem.sh/docs/glossary/terms#transaction) given a hash or block identifier.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/getTransaction\r\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/fetching-transactions\r\n * - JSON-RPC Methods: [`eth_getTransactionByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionByHash)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetTransactionParameters}\r\n * @returns The transaction information. {@link GetTransactionReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getTransaction } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const transaction = await getTransaction(client, {\r\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\r\n * })\r\n */\r\nexport async function getTransaction<\r\n  chain extends Chain | undefined,\r\n  blockTag extends BlockTag = 'latest',\r\n>(\r\n  client: Client<Transport, chain>,\r\n  {\r\n    blockHash,\r\n    blockNumber,\r\n    blockTag: blockTag_,\r\n    hash,\r\n    index,\r\n  }: GetTransactionParameters<blockTag>,\r\n): Promise<GetTransactionReturnType<chain, blockTag>> {\r\n  const blockTag = blockTag_ || 'latest'\r\n\r\n  const blockNumberHex =\r\n    blockNumber !== undefined ? numberToHex(blockNumber) : undefined\r\n\r\n  let transaction: RpcTransaction | null = null\r\n  if (hash) {\r\n    transaction = await client.request(\r\n      {\r\n        method: 'eth_getTransactionByHash',\r\n        params: [hash],\r\n      },\r\n      { dedupe: true },\r\n    )\r\n  } else if (blockHash) {\r\n    transaction = await client.request(\r\n      {\r\n        method: 'eth_getTransactionByBlockHashAndIndex',\r\n        params: [blockHash, numberToHex(index)],\r\n      },\r\n      { dedupe: true },\r\n    )\r\n  } else if (blockNumberHex || blockTag) {\r\n    transaction = await client.request(\r\n      {\r\n        method: 'eth_getTransactionByBlockNumberAndIndex',\r\n        params: [blockNumberHex || blockTag, numberToHex(index)],\r\n      },\r\n      { dedupe: Boolean(blockNumberHex) },\r\n    )\r\n  }\r\n\r\n  if (!transaction)\r\n    throw new TransactionNotFoundError({\r\n      blockHash,\r\n      blockNumber,\r\n      blockTag,\r\n      hash,\r\n      index,\r\n    })\r\n\r\n  const format =\r\n    client.chain?.formatters?.transaction?.format || formatTransaction\r\n  return format(transaction)\r\n}\r\n", "import type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Hash } from '../../types/misc.js'\r\nimport type { FormattedTransactionReceipt } from '../../utils/formatters/transactionReceipt.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\n\r\nimport {\r\n  type GetBlockNumberErrorType,\r\n  getBlockNumber,\r\n} from './getBlockNumber.js'\r\nimport {\r\n  type GetTransactionErrorType,\r\n  getTransaction,\r\n} from './getTransaction.js'\r\n\r\nexport type GetTransactionConfirmationsParameters<\r\n  chain extends Chain | undefined = Chain,\r\n> =\r\n  | {\r\n      /** The transaction hash. */\r\n      hash: Hash\r\n      transactionReceipt?: undefined\r\n    }\r\n  | {\r\n      hash?: undefined\r\n      /** The transaction receipt. */\r\n      transactionReceipt: FormattedTransactionReceipt<chain>\r\n    }\r\n\r\nexport type GetTransactionConfirmationsReturnType = bigint\r\n\r\nexport type GetTransactionConfirmationsErrorType =\r\n  | GetBlockNumberErrorType\r\n  | GetTransactionErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Returns the number of blocks passed (confirmations) since the transaction was processed on a block.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/getTransactionConfirmations\r\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/fetching-transactions\r\n * - JSON-RPC Methods: [`eth_getTransactionConfirmations`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionConfirmations)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetTransactionConfirmationsParameters}\r\n * @returns The number of blocks passed since the transaction was processed. If confirmations is 0, then the Transaction has not been confirmed & processed yet. {@link GetTransactionConfirmationsReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getTransactionConfirmations } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const confirmations = await getTransactionConfirmations(client, {\r\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\r\n * })\r\n */\r\nexport async function getTransactionConfirmations<\r\n  chain extends Chain | undefined,\r\n>(\r\n  client: Client<Transport, chain>,\r\n  { hash, transactionReceipt }: GetTransactionConfirmationsParameters<chain>,\r\n): Promise<GetTransactionConfirmationsReturnType> {\r\n  const [blockNumber, transaction] = await Promise.all([\r\n    getAction(client, getBlockNumber, 'getBlockNumber')({}),\r\n    hash\r\n      ? getAction(client, getTransaction, 'getTransaction')({ hash })\r\n      : undefined,\r\n  ])\r\n  const transactionBlockNumber =\r\n    transactionReceipt?.blockNumber || transaction?.blockNumber\r\n  if (!transactionBlockNumber) return 0n\r\n  return blockNumber - transactionBlockNumber! + 1n\r\n}\r\n", "import type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport {\r\n  TransactionReceiptNotFoundError,\r\n  type TransactionReceiptNotFoundErrorType,\r\n} from '../../errors/transaction.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Hash } from '../../types/misc.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type FormattedTransactionReceipt,\r\n  formatTransactionReceipt,\r\n} from '../../utils/formatters/transactionReceipt.js'\r\n\r\nexport type GetTransactionReceiptParameters = {\r\n  /** The hash of the transaction. */\r\n  hash: Hash\r\n}\r\n\r\nexport type GetTransactionReceiptReturnType<\r\n  chain extends Chain | undefined = undefined,\r\n> = FormattedTransactionReceipt<chain>\r\n\r\nexport type GetTransactionReceiptErrorType =\r\n  | RequestErrorType\r\n  | TransactionReceiptNotFoundErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms#transaction-receipt) given a [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/getTransactionReceipt\r\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/fetching-transactions\r\n * - JSON-RPC Methods: [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionreceipt)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link GetTransactionReceiptParameters}\r\n * @returns The transaction receipt. {@link GetTransactionReceiptReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getTransactionReceipt } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const transactionReceipt = await getTransactionReceipt(client, {\r\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\r\n * })\r\n */\r\nexport async function getTransactionReceipt<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  { hash }: GetTransactionReceiptParameters,\r\n) {\r\n  const receipt = await client.request(\r\n    {\r\n      method: 'eth_getTransactionReceipt',\r\n      params: [hash],\r\n    },\r\n    { dedupe: true },\r\n  )\r\n\r\n  if (!receipt) throw new TransactionReceiptNotFoundError({ hash })\r\n\r\n  const format =\r\n    client.chain?.formatters?.transactionReceipt?.format ||\r\n    formatTransactionReceipt\r\n  return format(receipt) as GetTransactionReceiptReturnType<chain>\r\n}\r\n", "import type { AbiStateMutability, Address, Narrow } from 'abitype'\r\n\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport { multicall3Abi } from '../../constants/abis.js'\r\nimport { AbiDecodingZeroDataError } from '../../errors/abi.js'\r\nimport { BaseError } from '../../errors/base.js'\r\nimport { RawContractError } from '../../errors/contract.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { ContractFunctionParameters } from '../../types/contract.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type {\r\n  MulticallContracts,\r\n  MulticallResults,\r\n} from '../../types/multicall.js'\r\nimport {\r\n  type DecodeFunctionResultErrorType,\r\n  decodeFunctionResult,\r\n} from '../../utils/abi/decodeFunctionResult.js'\r\nimport {\r\n  type EncodeFunctionDataErrorType,\r\n  encodeFunctionData,\r\n} from '../../utils/abi/encodeFunctionData.js'\r\nimport {\r\n  type GetChainContractAddressErrorType,\r\n  getChainContractAddress,\r\n} from '../../utils/chain/getChainContractAddress.js'\r\nimport {\r\n  type GetContractErrorReturnType,\r\n  getContractError,\r\n} from '../../utils/errors/getContractError.js'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport type { CallParameters } from './call.js'\r\nimport { type ReadContractErrorType, readContract } from './readContract.js'\r\n\r\nexport type MulticallParameters<\r\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\r\n  allowFailure extends boolean = true,\r\n  options extends {\r\n    optional?: boolean\r\n    properties?: Record<string, any>\r\n  } = {},\r\n> = Pick<CallParameters, 'blockNumber' | 'blockTag' | 'stateOverride'> & {\r\n  allowFailure?: allowFailure | boolean | undefined\r\n  batchSize?: number | undefined\r\n  contracts: MulticallContracts<\r\n    Narrow<contracts>,\r\n    { mutability: AbiStateMutability } & options\r\n  >\r\n  multicallAddress?: Address | undefined\r\n}\r\n\r\nexport type MulticallReturnType<\r\n  contracts extends readonly unknown[] = readonly ContractFunctionParameters[],\r\n  allowFailure extends boolean = true,\r\n  options extends {\r\n    error?: Error\r\n  } = { error: Error },\r\n> = MulticallResults<\r\n  Narrow<contracts>,\r\n  allowFailure,\r\n  { mutability: AbiStateMutability } & options\r\n>\r\n\r\nexport type MulticallErrorType =\r\n  | GetChainContractAddressErrorType\r\n  | ReadContractErrorType\r\n  | GetContractErrorReturnType<\r\n      EncodeFunctionDataErrorType | DecodeFunctionResultErrorType\r\n    >\r\n  | ErrorType\r\n\r\n/**\r\n * Similar to [`readContract`](https://viem.sh/docs/contract/readContract), but batches up multiple functions on a contract in a single RPC call via the [`multicall3` contract](https://github.com/mds1/multicall).\r\n *\r\n * - Docs: https://viem.sh/docs/contract/multicall\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link MulticallParameters}\r\n * @returns An array of results with accompanying status. {@link MulticallReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http, parseAbi } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { multicall } from 'viem/contract'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const abi = parseAbi([\r\n *   'function balanceOf(address) view returns (uint256)',\r\n *   'function totalSupply() view returns (uint256)',\r\n * ])\r\n * const results = await multicall(client, {\r\n *   contracts: [\r\n *     {\r\n *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n *       abi,\r\n *       functionName: 'balanceOf',\r\n *       args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\r\n *     },\r\n *     {\r\n *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n *       abi,\r\n *       functionName: 'totalSupply',\r\n *     },\r\n *   ],\r\n * })\r\n * // [{ result: 424122n, status: 'success' }, { result: 1000000n, status: 'success' }]\r\n */\r\nexport async function multicall<\r\n  const contracts extends readonly unknown[],\r\n  chain extends Chain | undefined,\r\n  allowFailure extends boolean = true,\r\n>(\r\n  client: Client<Transport, chain>,\r\n  parameters: MulticallParameters<contracts, allowFailure>,\r\n): Promise<MulticallReturnType<contracts, allowFailure>> {\r\n  const {\r\n    allowFailure = true,\r\n    batchSize: batchSize_,\r\n    blockNumber,\r\n    blockTag,\r\n    multicallAddress: multicallAddress_,\r\n    stateOverride,\r\n  } = parameters\r\n  const contracts = parameters.contracts as ContractFunctionParameters[]\r\n\r\n  const batchSize =\r\n    batchSize_ ??\r\n    ((typeof client.batch?.multicall === 'object' &&\r\n      client.batch.multicall.batchSize) ||\r\n      1_024)\r\n\r\n  let multicallAddress = multicallAddress_\r\n  if (!multicallAddress) {\r\n    if (!client.chain)\r\n      throw new Error(\r\n        'client chain not configured. multicallAddress is required.',\r\n      )\r\n\r\n    multicallAddress = getChainContractAddress({\r\n      blockNumber,\r\n      chain: client.chain,\r\n      contract: 'multicall3',\r\n    })\r\n  }\r\n\r\n  type Aggregate3Calls = {\r\n    allowFailure: boolean\r\n    callData: Hex\r\n    target: Address\r\n  }[]\r\n\r\n  const chunkedCalls: Aggregate3Calls[] = [[]]\r\n  let currentChunk = 0\r\n  let currentChunkSize = 0\r\n  for (let i = 0; i < contracts.length; i++) {\r\n    const { abi, address, args, functionName } = contracts[i]\r\n    try {\r\n      const callData = encodeFunctionData({ abi, args, functionName })\r\n\r\n      currentChunkSize += (callData.length - 2) / 2\r\n      // Check to see if we need to create a new chunk.\r\n      if (\r\n        // Check if batching is enabled.\r\n        batchSize > 0 &&\r\n        // Check if the current size of the batch exceeds the size limit.\r\n        currentChunkSize > batchSize &&\r\n        // Check if the current chunk is not already empty.\r\n        chunkedCalls[currentChunk].length > 0\r\n      ) {\r\n        currentChunk++\r\n        currentChunkSize = (callData.length - 2) / 2\r\n        chunkedCalls[currentChunk] = []\r\n      }\r\n\r\n      chunkedCalls[currentChunk] = [\r\n        ...chunkedCalls[currentChunk],\r\n        {\r\n          allowFailure: true,\r\n          callData,\r\n          target: address,\r\n        },\r\n      ]\r\n    } catch (err) {\r\n      const error = getContractError(err as BaseError, {\r\n        abi,\r\n        address,\r\n        args,\r\n        docsPath: '/docs/contract/multicall',\r\n        functionName,\r\n      })\r\n      if (!allowFailure) throw error\r\n      chunkedCalls[currentChunk] = [\r\n        ...chunkedCalls[currentChunk],\r\n        {\r\n          allowFailure: true,\r\n          callData: '0x' as Hex,\r\n          target: address,\r\n        },\r\n      ]\r\n    }\r\n  }\r\n\r\n  const aggregate3Results = await Promise.allSettled(\r\n    chunkedCalls.map((calls) =>\r\n      getAction(\r\n        client,\r\n        readContract,\r\n        'readContract',\r\n      )({\r\n        abi: multicall3Abi,\r\n        address: multicallAddress!,\r\n        args: [calls],\r\n        blockNumber,\r\n        blockTag,\r\n        functionName: 'aggregate3',\r\n        stateOverride,\r\n      }),\r\n    ),\r\n  )\r\n\r\n  const results = []\r\n  for (let i = 0; i < aggregate3Results.length; i++) {\r\n    const result = aggregate3Results[i]\r\n\r\n    // If an error occurred in a `readContract` invocation (ie. network error),\r\n    // then append the failure reason to each contract result.\r\n    if (result.status === 'rejected') {\r\n      if (!allowFailure) throw result.reason\r\n      for (let j = 0; j < chunkedCalls[i].length; j++) {\r\n        results.push({\r\n          status: 'failure',\r\n          error: result.reason,\r\n          result: undefined,\r\n        })\r\n      }\r\n      continue\r\n    }\r\n\r\n    // If the `readContract` call was successful, then decode the results.\r\n    const aggregate3Result = result.value\r\n    for (let j = 0; j < aggregate3Result.length; j++) {\r\n      // Extract the response from `readContract`\r\n      const { returnData, success } = aggregate3Result[j]\r\n\r\n      // Extract the request call data from the original call.\r\n      const { callData } = chunkedCalls[i][j]\r\n\r\n      // Extract the contract config for this call from the `contracts` argument\r\n      // for decoding.\r\n      const { abi, address, functionName, args } = contracts[\r\n        results.length\r\n      ] as ContractFunctionParameters\r\n\r\n      try {\r\n        if (callData === '0x') throw new AbiDecodingZeroDataError()\r\n        if (!success) throw new RawContractError({ data: returnData })\r\n        const result = decodeFunctionResult({\r\n          abi,\r\n          args,\r\n          data: returnData,\r\n          functionName,\r\n        })\r\n        results.push(allowFailure ? { result, status: 'success' } : result)\r\n      } catch (err) {\r\n        const error = getContractError(err as BaseError, {\r\n          abi,\r\n          address,\r\n          args,\r\n          docsPath: '/docs/contract/multicall',\r\n          functionName,\r\n        })\r\n        if (!allowFailure) throw error\r\n        results.push({ error, result: undefined, status: 'failure' })\r\n      }\r\n    }\r\n  }\r\n\r\n  if (results.length !== contracts.length)\r\n    throw new BaseError('multicall results mismatch')\r\n  return results as MulticallReturnType<contracts, allowFailure>\r\n}\r\n", "import { equalBytes } from '@noble/curves/abstract/utils'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { ByteArray, Hex } from '../../types/misc.js'\r\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\r\nimport { type IsHexErrorType, isHex } from './isHex.js'\r\n\r\nexport type IsBytesEqualErrorType =\r\n  | IsHexErrorType\r\n  | ToBytesErrorType\r\n  | ErrorType\r\n\r\nexport function isBytesEqual(a_: ByteArray | Hex, b_: ByteArray | Hex) {\r\n  const a = isHex(a_) ? toBytes(a_) : a_\r\n  const b = isHex(b_) ? toBytes(b_) : b_\r\n  return equalBytes(a, b)\r\n}\r\n", "import { secp256k1 } from '@noble/curves/secp256k1'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\r\nimport { type HexToBigIntErrorType, hexToBigInt } from '../encoding/fromHex.js'\r\nimport { hexToBytes } from '../encoding/toBytes.js'\r\nimport type { ToHexErrorType } from '../encoding/toHex.js'\r\n\r\ntype To = 'bytes' | 'hex'\r\n\r\nexport type SerializeSignatureParameters<to extends To = 'hex'> = Signature & {\r\n  to?: to | To | undefined\r\n}\r\n\r\nexport type SerializeSignatureReturnType<to extends To = 'hex'> =\r\n  | (to extends 'hex' ? Hex : never)\r\n  | (to extends 'bytes' ? ByteArray : never)\r\n\r\nexport type SerializeSignatureErrorType =\r\n  | HexToBigIntErrorType\r\n  | ToHexErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * @description Converts a signature into hex format.\r\n *\r\n * @param signature The signature to convert.\r\n * @returns The signature in hex format.\r\n *\r\n * @example\r\n * serializeSignature({\r\n *   r: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf',\r\n *   s: '0x4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8',\r\n *   yParity: 1\r\n * })\r\n * // \"0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c\"\r\n */\r\nexport function serializeSignature<to extends To = 'hex'>({\r\n  r,\r\n  s,\r\n  to = 'hex',\r\n  v,\r\n  yParity,\r\n}: SerializeSignatureParameters<to>): SerializeSignatureReturnType<to> {\r\n  const yParity_ = (() => {\r\n    if (yParity === 0 || yParity === 1) return yParity\r\n    if (v && (v === 27n || v === 28n || v >= 35n)) return v % 2n === 0n ? 1 : 0\r\n    throw new Error('Invalid `v` or `yParity` value')\r\n  })()\r\n  const signature = `0x${new secp256k1.Signature(\r\n    hexToBigInt(r),\r\n    hexToBigInt(s),\r\n  ).toCompactHex()}${yParity_ === 0 ? '1b' : '1c'}` as const\r\n\r\n  if (to === 'hex') return signature as SerializeSignatureReturnType<to>\r\n  return hexToBytes(signature) as SerializeSignatureReturnType<to>\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport { universalSignatureValidatorAbi } from '../../constants/abis.js'\r\nimport { universalSignatureValidatorByteCode } from '../../constants/contracts.js'\r\nimport { CallExecutionError } from '../../errors/contract.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\r\nimport type { OneOf } from '../../types/utils.js'\r\nimport {\r\n  type EncodeDeployDataErrorType,\r\n  encodeDeployData,\r\n} from '../../utils/abi/encodeDeployData.js'\r\nimport { getAddress } from '../../utils/address/getAddress.js'\r\nimport { isAddressEqual } from '../../utils/address/isAddressEqual.js'\r\nimport {\r\n  type IsBytesEqualErrorType,\r\n  isBytesEqual,\r\n} from '../../utils/data/isBytesEqual.js'\r\nimport { type IsHexErrorType, isHex } from '../../utils/data/isHex.js'\r\nimport { type ToHexErrorType, bytesToHex } from '../../utils/encoding/toHex.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport { isErc6492Signature } from '../../utils/signature/isErc6492Signature.js'\r\nimport { recoverAddress } from '../../utils/signature/recoverAddress.js'\r\nimport { serializeErc6492Signature } from '../../utils/signature/serializeErc6492Signature.js'\r\nimport { serializeSignature } from '../../utils/signature/serializeSignature.js'\r\nimport { type CallErrorType, type CallParameters, call } from './call.js'\r\n\r\nexport type VerifyHashParameters = Pick<\r\n  CallParameters,\r\n  'blockNumber' | 'blockTag'\r\n> & {\r\n  /** The address that signed the original message. */\r\n  address: Address\r\n  /** The hash to be verified. */\r\n  hash: Hex\r\n  /** The signature that was generated by signing the message with the address's private key. */\r\n  signature: Hex | ByteArray | Signature\r\n} & OneOf<{ factory: Address; factoryData: Hex } | {}>\r\n\r\nexport type VerifyHashReturnType = boolean\r\n\r\nexport type VerifyHashErrorType =\r\n  | CallErrorType\r\n  | IsHexErrorType\r\n  | ToHexErrorType\r\n  | IsBytesEqualErrorType\r\n  | EncodeDeployDataErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Verifies a message hash onchain using ERC-6492.\r\n *\r\n * @param client - Client to use.\r\n * @param parameters - {@link VerifyHashParameters}\r\n * @returns Whether or not the signature is valid. {@link VerifyHashReturnType}\r\n */\r\nexport async function verifyHash<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  parameters: VerifyHashParameters,\r\n): Promise<VerifyHashReturnType> {\r\n  const { address, factory, factoryData, hash, signature, ...rest } = parameters\r\n\r\n  const signatureHex = (() => {\r\n    if (isHex(signature)) return signature\r\n    if (typeof signature === 'object' && 'r' in signature && 's' in signature)\r\n      return serializeSignature(signature)\r\n    return bytesToHex(signature)\r\n  })()\r\n\r\n  const wrappedSignature = await (async () => {\r\n    // If no `factory` or `factoryData` is provided, it is assumed that the\r\n    // address is not a Smart Account, or the Smart Account is already deployed.\r\n    if (!factory && !factoryData) return signatureHex\r\n\r\n    // If the signature is already wrapped, return the signature.\r\n    if (isErc6492Signature(signatureHex)) return signatureHex\r\n\r\n    // If the Smart Account is not deployed, wrap the signature with a 6492 wrapper\r\n    // to perform counterfactual validation.\r\n    return serializeErc6492Signature({\r\n      address: factory!,\r\n      data: factoryData!,\r\n      signature: signatureHex,\r\n    })\r\n  })()\r\n\r\n  try {\r\n    const { data } = await getAction(\r\n      client,\r\n      call,\r\n      'call',\r\n    )({\r\n      data: encodeDeployData({\r\n        abi: universalSignatureValidatorAbi,\r\n        args: [address, hash, wrappedSignature],\r\n        bytecode: universalSignatureValidatorByteCode,\r\n      }),\r\n      ...rest,\r\n    } as unknown as CallParameters)\r\n\r\n    return isBytesEqual(data ?? '0x0', '0x1')\r\n  } catch (error) {\r\n    // Fallback attempt to verify the signature via ECDSA recovery.\r\n    try {\r\n      const verified = isAddressEqual(\r\n        getAddress(address),\r\n        await recoverAddress({ hash, signature }),\r\n      )\r\n      if (verified) return true\r\n    } catch {}\r\n\r\n    if (error instanceof CallExecutionError) {\r\n      // if the execution fails, the signature was not valid and an internal method inside of the validator reverted\r\n      // this can happen for many reasons, for example if signer can not be recovered from the signature\r\n      // or if the signature has no valid format\r\n      return false\r\n    }\r\n\r\n    throw error\r\n  }\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type {\r\n  ByteArray,\r\n  Hex,\r\n  SignableMessage,\r\n  Signature,\r\n} from '../../types/misc.js'\r\nimport type { Prettify } from '../../types/utils.js'\r\nimport { hashMessage } from '../../utils/signature/hashMessage.js'\r\nimport type { HashMessageErrorType } from '../../utils/signature/hashMessage.js'\r\nimport {\r\n  type VerifyHashErrorType,\r\n  type VerifyHashParameters,\r\n  verifyHash,\r\n} from './verifyHash.js'\r\n\r\nexport type VerifyMessageParameters = Prettify<\r\n  Omit<VerifyHashParameters, 'hash'> & {\r\n    /** The address that signed the original message. */\r\n    address: Address\r\n    /** The message to be verified. */\r\n    message: SignableMessage\r\n    /** The signature that was generated by signing the message with the address's private key. */\r\n    signature: Hex | ByteArray | Signature\r\n  }\r\n>\r\n\r\nexport type VerifyMessageReturnType = boolean\r\n\r\nexport type VerifyMessageErrorType =\r\n  | HashMessageErrorType\r\n  | VerifyHashErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Verify that a message was signed by the provided address.\r\n *\r\n * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\r\n *\r\n * - Docs {@link https://viem.sh/docs/actions/public/verifyMessage}\r\n *\r\n * @param client - Client to use.\r\n * @param parameters - {@link VerifyMessageParameters}\r\n * @returns Whether or not the signature is valid. {@link VerifyMessageReturnType}\r\n */\r\nexport async function verifyMessage<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  {\r\n    address,\r\n    message,\r\n    factory,\r\n    factoryData,\r\n    signature,\r\n    ...callRequest\r\n  }: VerifyMessageParameters,\r\n): Promise<VerifyMessageReturnType> {\r\n  const hash = hashMessage(message)\r\n  return verifyHash(client, {\r\n    address,\r\n    factory: factory!,\r\n    factoryData: factoryData!,\r\n    hash,\r\n    signature,\r\n    ...callRequest,\r\n  })\r\n}\r\n", "import type { Address, TypedData } from 'abitype'\r\n\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\r\nimport type { TypedDataDefinition } from '../../types/typedData.js'\r\nimport {\r\n  type HashTypedDataErrorType,\r\n  hashTypedData,\r\n} from '../../utils/signature/hashTypedData.js'\r\nimport {\r\n  type VerifyHashErrorType,\r\n  type VerifyHashParameters,\r\n  verifyHash,\r\n} from './verifyHash.js'\r\n\r\nexport type VerifyTypedDataParameters<\r\n  typedData extends TypedData | Record<string, unknown> = TypedData,\r\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\r\n> = Omit<VerifyHashParameters, 'hash'> &\r\n  TypedDataDefinition<typedData, primaryType> & {\r\n    /** The address to verify the typed data for. */\r\n    address: Address\r\n    /** The signature to verify */\r\n    signature: Hex | ByteArray | Signature\r\n  }\r\n\r\nexport type VerifyTypedDataReturnType = boolean\r\n\r\nexport type VerifyTypedDataErrorType =\r\n  | HashTypedDataErrorType\r\n  | VerifyHashErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Verify that typed data was signed by the provided address.\r\n *\r\n * - Docs {@link https://viem.sh/docs/actions/public/verifyTypedData}\r\n *\r\n * @param client - Client to use.\r\n * @param parameters - {@link VerifyTypedDataParameters}\r\n * @returns Whether or not the signature is valid. {@link VerifyTypedDataReturnType}\r\n */\r\nexport async function verifyTypedData<\r\n  const typedData extends TypedData | Record<string, unknown>,\r\n  primaryType extends keyof typedData | 'EIP712Domain',\r\n  chain extends Chain | undefined,\r\n>(\r\n  client: Client<Transport, chain>,\r\n  parameters: VerifyTypedDataParameters<typedData, primaryType>,\r\n): Promise<VerifyTypedDataReturnType> {\r\n  const {\r\n    address,\r\n    factory,\r\n    factoryData,\r\n    signature,\r\n    message,\r\n    primaryType,\r\n    types,\r\n    domain,\r\n    ...callRequest\r\n  } = parameters as VerifyTypedDataParameters\r\n  const hash = hashTypedData({ message, primaryType, types, domain })\r\n  return verifyHash(client, {\r\n    address,\r\n    factory: factory!,\r\n    factoryData: factoryData!,\r\n    hash,\r\n    signature,\r\n    ...callRequest,\r\n  })\r\n}\r\n", "import type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { HasTransportType } from '../../types/transport.js'\r\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport { observe } from '../../utils/observe.js'\r\nimport { type PollErrorType, poll } from '../../utils/poll.js'\r\nimport { stringify } from '../../utils/stringify.js'\r\n\r\nimport {\r\n  type GetBlockNumberReturnType,\r\n  getBlockNumber,\r\n} from './getBlockNumber.js'\r\n\r\nexport type OnBlockNumberParameter = GetBlockNumberReturnType\r\nexport type OnBlockNumberFn = (\r\n  blockNumber: OnBlockNumberParameter,\r\n  prevBlockNumber: OnBlockNumberParameter | undefined,\r\n) => void\r\n\r\nexport type WatchBlockNumberParameters<\r\n  transport extends Transport = Transport,\r\n> = {\r\n  /** The callback to call when a new block number is received. */\r\n  onBlockNumber: OnBlockNumberFn\r\n  /** The callback to call when an error occurred when trying to get for a new block. */\r\n  onError?: ((error: Error) => void) | undefined\r\n} & (\r\n  | (HasTransportType<transport, 'webSocket'> extends true\r\n      ? {\r\n          emitMissed?: undefined\r\n          emitOnBegin?: undefined\r\n          /** Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`. */\r\n          poll?: false | undefined\r\n          pollingInterval?: undefined\r\n        }\r\n      : never)\r\n  | {\r\n      /** Whether or not to emit the missed block numbers to the callback. */\r\n      emitMissed?: boolean | undefined\r\n      /** Whether or not to emit the latest block number to the callback when the subscription opens. */\r\n      emitOnBegin?: boolean | undefined\r\n      poll?: true | undefined\r\n      /** Polling frequency (in ms). Defaults to Client's pollingInterval config. */\r\n      pollingInterval?: number | undefined\r\n    }\r\n)\r\n\r\nexport type WatchBlockNumberReturnType = () => void\r\n\r\nexport type WatchBlockNumberErrorType = PollErrorType | ErrorType\r\n\r\n/**\r\n * Watches and returns incoming block numbers.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/watchBlockNumber\r\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/watching-blocks\r\n * - JSON-RPC Methods:\r\n *   - When `poll: true`, calls [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber) on a polling interval.\r\n *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link WatchBlockNumberParameters}\r\n * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlockNumberReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, watchBlockNumber, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const unwatch = watchBlockNumber(client, {\r\n *   onBlockNumber: (blockNumber) => console.log(blockNumber),\r\n * })\r\n */\r\nexport function watchBlockNumber<\r\n  chain extends Chain | undefined,\r\n  transport extends Transport,\r\n>(\r\n  client: Client<transport, chain>,\r\n  {\r\n    emitOnBegin = false,\r\n    emitMissed = false,\r\n    onBlockNumber,\r\n    onError,\r\n    poll: poll_,\r\n    pollingInterval = client.pollingInterval,\r\n  }: WatchBlockNumberParameters<transport>,\r\n): WatchBlockNumberReturnType {\r\n  const enablePolling = (() => {\r\n    if (typeof poll_ !== 'undefined') return poll_\r\n    if (client.transport.type === 'webSocket') return false\r\n    if (\r\n      client.transport.type === 'fallback' &&\r\n      client.transport.transports[0].config.type === 'webSocket'\r\n    )\r\n      return false\r\n    return true\r\n  })()\r\n\r\n  let prevBlockNumber: GetBlockNumberReturnType | undefined\r\n\r\n  const pollBlockNumber = () => {\r\n    const observerId = stringify([\r\n      'watchBlockNumber',\r\n      client.uid,\r\n      emitOnBegin,\r\n      emitMissed,\r\n      pollingInterval,\r\n    ])\r\n\r\n    return observe(observerId, { onBlockNumber, onError }, (emit) =>\r\n      poll(\r\n        async () => {\r\n          try {\r\n            const blockNumber = await getAction(\r\n              client,\r\n              getBlockNumber,\r\n              'getBlockNumber',\r\n            )({ cacheTime: 0 })\r\n\r\n            if (prevBlockNumber) {\r\n              // If the current block number is the same as the previous,\r\n              // we can skip.\r\n              if (blockNumber === prevBlockNumber) return\r\n\r\n              // If we have missed out on some previous blocks, and the\r\n              // `emitMissed` flag is truthy, let's emit those blocks.\r\n              if (blockNumber - prevBlockNumber > 1 && emitMissed) {\r\n                for (let i = prevBlockNumber + 1n; i < blockNumber; i++) {\r\n                  emit.onBlockNumber(i, prevBlockNumber)\r\n                  prevBlockNumber = i\r\n                }\r\n              }\r\n            }\r\n\r\n            // If the next block number is greater than the previous,\r\n            // it is not in the past, and we can emit the new block number.\r\n            if (!prevBlockNumber || blockNumber > prevBlockNumber) {\r\n              emit.onBlockNumber(blockNumber, prevBlockNumber)\r\n              prevBlockNumber = blockNumber\r\n            }\r\n          } catch (err) {\r\n            emit.onError?.(err as Error)\r\n          }\r\n        },\r\n        {\r\n          emitOnBegin,\r\n          interval: pollingInterval,\r\n        },\r\n      ),\r\n    )\r\n  }\r\n\r\n  const subscribeBlockNumber = () => {\r\n    const observerId = stringify([\r\n      'watchBlockNumber',\r\n      client.uid,\r\n      emitOnBegin,\r\n      emitMissed,\r\n    ])\r\n\r\n    return observe(observerId, { onBlockNumber, onError }, (emit) => {\r\n      let active = true\r\n      let unsubscribe = () => (active = false)\r\n      ;(async () => {\r\n        try {\r\n          const transport = (() => {\r\n            if (client.transport.type === 'fallback') {\r\n              const transport = client.transport.transports.find(\r\n                (transport: ReturnType<Transport>) =>\r\n                  transport.config.type === 'webSocket',\r\n              )\r\n              if (!transport) return client.transport\r\n              return transport.value\r\n            }\r\n            return client.transport\r\n          })()\r\n\r\n          const { unsubscribe: unsubscribe_ } = await transport.subscribe({\r\n            params: ['newHeads'],\r\n            onData(data: any) {\r\n              if (!active) return\r\n              const blockNumber = hexToBigInt(data.result?.number)\r\n              emit.onBlockNumber(blockNumber, prevBlockNumber)\r\n              prevBlockNumber = blockNumber\r\n            },\r\n            onError(error: Error) {\r\n              emit.onError?.(error)\r\n            },\r\n          })\r\n          unsubscribe = unsubscribe_\r\n          if (!active) unsubscribe()\r\n        } catch (err) {\r\n          onError?.(err as Error)\r\n        }\r\n      })()\r\n      return () => unsubscribe()\r\n    })\r\n  }\r\n\r\n  return enablePolling ? pollBlockNumber() : subscribeBlockNumber()\r\n}\r\n", "import type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport { BlockNotFoundError } from '../../errors/block.js'\r\nimport {\r\n  TransactionNotFoundError,\r\n  TransactionReceiptNotFoundError,\r\n  WaitForTransactionReceiptTimeoutError,\r\n} from '../../errors/transaction.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Hash } from '../../types/misc.js'\r\nimport type { Transaction } from '../../types/transaction.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\r\nimport {\r\n  type WithRetryParameters,\r\n  withRetry,\r\n} from '../../utils/promise/withRetry.js'\r\nimport { stringify } from '../../utils/stringify.js'\r\n\r\nimport { type GetBlockErrorType, getBlock } from './getBlock.js'\r\nimport {\r\n  type GetTransactionErrorType,\r\n  type GetTransactionReturnType,\r\n  getTransaction,\r\n} from './getTransaction.js'\r\nimport {\r\n  type GetTransactionReceiptErrorType,\r\n  type GetTransactionReceiptReturnType,\r\n  getTransactionReceipt,\r\n} from './getTransactionReceipt.js'\r\nimport {\r\n  type WatchBlockNumberErrorType,\r\n  watchBlockNumber,\r\n} from './watchBlockNumber.js'\r\n\r\nexport type ReplacementReason = 'cancelled' | 'replaced' | 'repriced'\r\nexport type ReplacementReturnType<\r\n  chain extends Chain | undefined = Chain | undefined,\r\n> = {\r\n  reason: ReplacementReason\r\n  replacedTransaction: Transaction\r\n  transaction: Transaction\r\n  transactionReceipt: GetTransactionReceiptReturnType<chain>\r\n}\r\n\r\nexport type WaitForTransactionReceiptReturnType<\r\n  chain extends Chain | undefined = Chain | undefined,\r\n> = GetTransactionReceiptReturnType<chain>\r\n\r\nexport type WaitForTransactionReceiptParameters<\r\n  chain extends Chain | undefined = Chain | undefined,\r\n> = {\r\n  /**\r\n   * The number of confirmations (blocks that have passed) to wait before resolving.\r\n   * @default 1\r\n   */\r\n  confirmations?: number | undefined\r\n  /** The hash of the transaction. */\r\n  hash: Hash\r\n  /** Optional callback to emit if the transaction has been replaced. */\r\n  onReplaced?: ((response: ReplacementReturnType<chain>) => void) | undefined\r\n  /**\r\n   * Polling frequency (in ms). Defaults to the client's pollingInterval config.\r\n   * @default client.pollingInterval\r\n   */\r\n  pollingInterval?: number | undefined\r\n  /**\r\n   * Number of times to retry if the transaction or block is not found.\r\n   * @default 6 (exponential backoff)\r\n   */\r\n  retryCount?: WithRetryParameters['retryCount'] | undefined\r\n  /**\r\n   * Time to wait (in ms) between retries.\r\n   * @default `({ count }) => ~~(1 << count) * 200` (exponential backoff)\r\n   */\r\n  retryDelay?: WithRetryParameters['delay'] | undefined\r\n  /**\r\n   * Optional timeout (in milliseconds) to wait before stopping polling.\r\n   * @default 180_000\r\n   */\r\n  timeout?: number | undefined\r\n}\r\n\r\nexport type WaitForTransactionReceiptErrorType =\r\n  | ObserveErrorType\r\n  | GetBlockErrorType\r\n  | GetTransactionErrorType\r\n  | GetTransactionReceiptErrorType\r\n  | WatchBlockNumberErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Waits for the [Transaction](https://viem.sh/docs/glossary/terms#transaction) to be included on a [Block](https://viem.sh/docs/glossary/terms#block) (one confirmation), and then returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms#transaction-receipt).\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/waitForTransactionReceipt\r\n * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/sending-transactions\r\n * - JSON-RPC Methods:\r\n *   - Polls [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt) on each block until it has been processed.\r\n *   - If a Transaction has been replaced:\r\n *     - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) and extracts the transactions\r\n *     - Checks if one of the Transactions is a replacement\r\n *     - If so, calls [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt).\r\n *\r\n * The `waitForTransactionReceipt` action additionally supports Replacement detection (e.g. sped up Transactions).\r\n *\r\n * Transactions can be replaced when a user modifies their transaction in their wallet (to speed up or cancel). Transactions are replaced when they are sent from the same nonce.\r\n *\r\n * There are 3 types of Transaction Replacement reasons:\r\n *\r\n * - `repriced`: The gas price has been modified (e.g. different `maxFeePerGas`)\r\n * - `cancelled`: The Transaction has been cancelled (e.g. `value === 0n`)\r\n * - `replaced`: The Transaction has been replaced (e.g. different `value` or `data`)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link WaitForTransactionReceiptParameters}\r\n * @returns The transaction receipt. {@link WaitForTransactionReceiptReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, waitForTransactionReceipt, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const transactionReceipt = await waitForTransactionReceipt(client, {\r\n *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\r\n * })\r\n */\r\nexport async function waitForTransactionReceipt<\r\n  chain extends Chain | undefined,\r\n>(\r\n  client: Client<Transport, chain>,\r\n  {\r\n    confirmations = 1,\r\n    hash,\r\n    onReplaced,\r\n    pollingInterval = client.pollingInterval,\r\n    retryCount = 6,\r\n    retryDelay = ({ count }) => ~~(1 << count) * 200, // exponential backoff\r\n    timeout = 180_000,\r\n  }: WaitForTransactionReceiptParameters<chain>,\r\n): Promise<WaitForTransactionReceiptReturnType<chain>> {\r\n  const observerId = stringify(['waitForTransactionReceipt', client.uid, hash])\r\n\r\n  let transaction: GetTransactionReturnType<chain> | undefined\r\n  let replacedTransaction: GetTransactionReturnType<chain> | undefined\r\n  let receipt: GetTransactionReceiptReturnType<chain>\r\n  let retrying = false\r\n\r\n  return new Promise((resolve, reject) => {\r\n    if (timeout)\r\n      setTimeout(\r\n        () => reject(new WaitForTransactionReceiptTimeoutError({ hash })),\r\n        timeout,\r\n      )\r\n\r\n    const _unobserve = observe(\r\n      observerId,\r\n      { onReplaced, resolve, reject },\r\n      (emit) => {\r\n        const _unwatch = getAction(\r\n          client,\r\n          watchBlockNumber,\r\n          'watchBlockNumber',\r\n        )({\r\n          emitMissed: true,\r\n          emitOnBegin: true,\r\n          poll: true,\r\n          pollingInterval,\r\n          async onBlockNumber(blockNumber_) {\r\n            const done = (fn: () => void) => {\r\n              _unwatch()\r\n              fn()\r\n              _unobserve()\r\n            }\r\n\r\n            let blockNumber = blockNumber_\r\n\r\n            if (retrying) return\r\n\r\n            try {\r\n              // If we already have a valid receipt, let's check if we have enough\r\n              // confirmations. If we do, then we can resolve.\r\n              if (receipt) {\r\n                if (\r\n                  confirmations > 1 &&\r\n                  (!receipt.blockNumber ||\r\n                    blockNumber - receipt.blockNumber + 1n < confirmations)\r\n                )\r\n                  return\r\n\r\n                done(() => emit.resolve(receipt))\r\n                return\r\n              }\r\n\r\n              // Get the transaction to check if it's been replaced.\r\n              // We need to retry as some RPC Providers may be slow to sync\r\n              // up mined transactions.\r\n              if (!transaction) {\r\n                retrying = true\r\n                await withRetry(\r\n                  async () => {\r\n                    transaction = (await getAction(\r\n                      client,\r\n                      getTransaction,\r\n                      'getTransaction',\r\n                    )({ hash })) as GetTransactionReturnType<chain>\r\n                    if (transaction.blockNumber)\r\n                      blockNumber = transaction.blockNumber\r\n                  },\r\n                  {\r\n                    delay: retryDelay,\r\n                    retryCount,\r\n                  },\r\n                )\r\n                retrying = false\r\n              }\r\n\r\n              // Get the receipt to check if it's been processed.\r\n              receipt = await getAction(\r\n                client,\r\n                getTransactionReceipt,\r\n                'getTransactionReceipt',\r\n              )({ hash })\r\n\r\n              // Check if we have enough confirmations. If not, continue polling.\r\n              if (\r\n                confirmations > 1 &&\r\n                (!receipt.blockNumber ||\r\n                  blockNumber - receipt.blockNumber + 1n < confirmations)\r\n              )\r\n                return\r\n\r\n              done(() => emit.resolve(receipt))\r\n            } catch (err) {\r\n              // If the receipt is not found, the transaction will be pending.\r\n              // We need to check if it has potentially been replaced.\r\n              if (\r\n                err instanceof TransactionNotFoundError ||\r\n                err instanceof TransactionReceiptNotFoundError\r\n              ) {\r\n                if (!transaction) {\r\n                  retrying = false\r\n                  return\r\n                }\r\n\r\n                try {\r\n                  replacedTransaction = transaction\r\n\r\n                  // Let's retrieve the transactions from the current block.\r\n                  // We need to retry as some RPC Providers may be slow to sync\r\n                  // up mined blocks.\r\n                  retrying = true\r\n                  const block = await withRetry(\r\n                    () =>\r\n                      getAction(\r\n                        client,\r\n                        getBlock,\r\n                        'getBlock',\r\n                      )({\r\n                        blockNumber,\r\n                        includeTransactions: true,\r\n                      }),\r\n                    {\r\n                      delay: retryDelay,\r\n                      retryCount,\r\n                      shouldRetry: ({ error }) =>\r\n                        error instanceof BlockNotFoundError,\r\n                    },\r\n                  )\r\n                  retrying = false\r\n\r\n                  const replacementTransaction = (\r\n                    block.transactions as {} as Transaction[]\r\n                  ).find(\r\n                    ({ from, nonce }) =>\r\n                      from === replacedTransaction!.from &&\r\n                      nonce === replacedTransaction!.nonce,\r\n                  )\r\n\r\n                  // If we couldn't find a replacement transaction, continue polling.\r\n                  if (!replacementTransaction) return\r\n\r\n                  // If we found a replacement transaction, return it's receipt.\r\n                  receipt = await getAction(\r\n                    client,\r\n                    getTransactionReceipt,\r\n                    'getTransactionReceipt',\r\n                  )({\r\n                    hash: replacementTransaction.hash,\r\n                  })\r\n\r\n                  // Check if we have enough confirmations. If not, continue polling.\r\n                  if (\r\n                    confirmations > 1 &&\r\n                    (!receipt.blockNumber ||\r\n                      blockNumber - receipt.blockNumber + 1n < confirmations)\r\n                  )\r\n                    return\r\n\r\n                  let reason: ReplacementReason = 'replaced'\r\n                  if (\r\n                    replacementTransaction.to === replacedTransaction.to &&\r\n                    replacementTransaction.value === replacedTransaction.value\r\n                  ) {\r\n                    reason = 'repriced'\r\n                  } else if (\r\n                    replacementTransaction.from === replacementTransaction.to &&\r\n                    replacementTransaction.value === 0n\r\n                  ) {\r\n                    reason = 'cancelled'\r\n                  }\r\n\r\n                  done(() => {\r\n                    emit.onReplaced?.({\r\n                      reason,\r\n                      replacedTransaction: replacedTransaction! as any,\r\n                      transaction: replacementTransaction,\r\n                      transactionReceipt: receipt,\r\n                    })\r\n                    emit.resolve(receipt)\r\n                  })\r\n                } catch (err_) {\r\n                  done(() => emit.reject(err_))\r\n                }\r\n              } else {\r\n                done(() => emit.reject(err))\r\n              }\r\n            }\r\n          },\r\n        })\r\n      },\r\n    )\r\n  })\r\n}\r\n", "import type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { BlockTag } from '../../types/block.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { HasTransportType } from '../../types/transport.js'\r\nimport { formatBlock } from '../../utils/formatters/block.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport { observe } from '../../utils/observe.js'\r\nimport { type PollErrorType, poll } from '../../utils/poll.js'\r\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\r\n\r\nimport { type GetBlockReturnType, getBlock } from './getBlock.js'\r\n\r\nexport type OnBlockParameter<\r\n  chain extends Chain | undefined = Chain,\r\n  includeTransactions extends boolean = false,\r\n  blockTag extends BlockTag = 'latest',\r\n> = GetBlockReturnType<chain, includeTransactions, blockTag>\r\n\r\nexport type OnBlock<\r\n  chain extends Chain | undefined = Chain,\r\n  includeTransactions extends boolean = false,\r\n  blockTag extends BlockTag = 'latest',\r\n> = (\r\n  block: OnBlockParameter<chain, includeTransactions, blockTag>,\r\n  prevBlock: OnBlockParameter<chain, includeTransactions, blockTag> | undefined,\r\n) => void\r\n\r\nexport type WatchBlocksParameters<\r\n  transport extends Transport = Transport,\r\n  chain extends Chain | undefined = Chain,\r\n  includeTransactions extends boolean = false,\r\n  blockTag extends BlockTag = 'latest',\r\n> = {\r\n  /** The callback to call when a new block is received. */\r\n  onBlock: OnBlock<chain, includeTransactions, blockTag>\r\n  /** The callback to call when an error occurred when trying to get for a new block. */\r\n  onError?: ((error: Error) => void) | undefined\r\n} & (\r\n  | (HasTransportType<transport, 'webSocket'> extends true\r\n      ? {\r\n          blockTag?: undefined\r\n          emitMissed?: undefined\r\n          emitOnBegin?: undefined\r\n          includeTransactions?: undefined\r\n          /** Whether or not the WebSocket Transport should poll the JSON-RPC, rather than using `eth_subscribe`. */\r\n          poll?: false | undefined\r\n          pollingInterval?: undefined\r\n        }\r\n      : never)\r\n  | {\r\n      /** The block tag. Defaults to \"latest\". */\r\n      blockTag?: blockTag | BlockTag | undefined\r\n      /** Whether or not to emit the missed blocks to the callback. */\r\n      emitMissed?: boolean | undefined\r\n      /** Whether or not to emit the block to the callback when the subscription opens. */\r\n      emitOnBegin?: boolean | undefined\r\n      /** Whether or not to include transaction data in the response. */\r\n      includeTransactions?: includeTransactions | undefined\r\n      poll?: true | undefined\r\n      /** Polling frequency (in ms). Defaults to the client's pollingInterval config. */\r\n      pollingInterval?: number | undefined\r\n    }\r\n)\r\n\r\nexport type WatchBlocksReturnType = () => void\r\n\r\nexport type WatchBlocksErrorType =\r\n  | StringifyErrorType\r\n  | PollErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Watches and returns information for incoming blocks.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/watchBlocks\r\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/watching-blocks\r\n * - JSON-RPC Methods:\r\n *   - When `poll: true`, calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getBlockByNumber) on a polling interval.\r\n *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link WatchBlocksParameters}\r\n * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlocksReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, watchBlocks, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const unwatch = watchBlocks(client, {\r\n *   onBlock: (block) => console.log(block),\r\n * })\r\n */\r\nexport function watchBlocks<\r\n  transport extends Transport,\r\n  chain extends Chain | undefined,\r\n  includeTransactions extends boolean = false,\r\n  blockTag extends BlockTag = 'latest',\r\n>(\r\n  client: Client<transport, chain>,\r\n  {\r\n    blockTag = 'latest',\r\n    emitMissed = false,\r\n    emitOnBegin = false,\r\n    onBlock,\r\n    onError,\r\n    includeTransactions: includeTransactions_,\r\n    poll: poll_,\r\n    pollingInterval = client.pollingInterval,\r\n  }: WatchBlocksParameters<transport, chain, includeTransactions, blockTag>,\r\n): WatchBlocksReturnType {\r\n  const enablePolling = (() => {\r\n    if (typeof poll_ !== 'undefined') return poll_\r\n    if (client.transport.type === 'webSocket') return false\r\n    if (\r\n      client.transport.type === 'fallback' &&\r\n      client.transport.transports[0].config.type === 'webSocket'\r\n    )\r\n      return false\r\n    return true\r\n  })()\r\n  const includeTransactions = includeTransactions_ ?? false\r\n\r\n  let prevBlock:\r\n    | GetBlockReturnType<chain, false | includeTransactions, 'latest'>\r\n    | undefined\r\n\r\n  const pollBlocks = () => {\r\n    const observerId = stringify([\r\n      'watchBlocks',\r\n      client.uid,\r\n      blockTag,\r\n      emitMissed,\r\n      emitOnBegin,\r\n      includeTransactions,\r\n      pollingInterval,\r\n    ])\r\n\r\n    return observe(observerId, { onBlock, onError }, (emit) =>\r\n      poll(\r\n        async () => {\r\n          try {\r\n            const block = await getAction(\r\n              client,\r\n              getBlock,\r\n              'getBlock',\r\n            )({\r\n              blockTag,\r\n              includeTransactions,\r\n            })\r\n            if (block.number && prevBlock?.number) {\r\n              // If the current block number is the same as the previous,\r\n              // we can skip.\r\n              if (block.number === prevBlock.number) return\r\n\r\n              // If we have missed out on some previous blocks, and the\r\n              // `emitMissed` flag is truthy, let's emit those blocks.\r\n              if (block.number - prevBlock.number > 1 && emitMissed) {\r\n                for (let i = prevBlock?.number + 1n; i < block.number; i++) {\r\n                  const block = (await getAction(\r\n                    client,\r\n                    getBlock,\r\n                    'getBlock',\r\n                  )({\r\n                    blockNumber: i,\r\n                    includeTransactions,\r\n                  })) as GetBlockReturnType<chain>\r\n                  emit.onBlock(block as any, prevBlock as any)\r\n                  prevBlock = block\r\n                }\r\n              }\r\n            }\r\n\r\n            if (\r\n              // If no previous block exists, emit.\r\n              !prevBlock?.number ||\r\n              // If the block tag is \"pending\" with no block number, emit.\r\n              (blockTag === 'pending' && !block?.number) ||\r\n              // If the next block number is greater than the previous block number, emit.\r\n              // We don't want to emit blocks in the past.\r\n              (block.number && block.number > prevBlock.number)\r\n            ) {\r\n              emit.onBlock(block as any, prevBlock as any)\r\n              prevBlock = block as any\r\n            }\r\n          } catch (err) {\r\n            emit.onError?.(err as Error)\r\n          }\r\n        },\r\n        {\r\n          emitOnBegin,\r\n          interval: pollingInterval,\r\n        },\r\n      ),\r\n    )\r\n  }\r\n\r\n  const subscribeBlocks = () => {\r\n    let active = true\r\n    let emitFetched = true\r\n    let unsubscribe = () => (active = false)\r\n    ;(async () => {\r\n      try {\r\n        if (emitOnBegin) {\r\n          getAction(\r\n            client,\r\n            getBlock,\r\n            'getBlock',\r\n          )({\r\n            blockTag,\r\n            includeTransactions,\r\n          }).then((block) => {\r\n            if (!active) return\r\n            if (!emitFetched) return\r\n            onBlock(block as any, undefined)\r\n            emitFetched = false\r\n          })\r\n        }\r\n\r\n        const transport = (() => {\r\n          if (client.transport.type === 'fallback') {\r\n            const transport = client.transport.transports.find(\r\n              (transport: ReturnType<Transport>) =>\r\n                transport.config.type === 'webSocket',\r\n            )\r\n            if (!transport) return client.transport\r\n            return transport.value\r\n          }\r\n          return client.transport\r\n        })()\r\n\r\n        const { unsubscribe: unsubscribe_ } = await transport.subscribe({\r\n          params: ['newHeads'],\r\n          onData(data: any) {\r\n            if (!active) return\r\n            const format =\r\n              client.chain?.formatters?.block?.format || formatBlock\r\n            const block = format(data.result)\r\n            onBlock(block, prevBlock as any)\r\n            emitFetched = false\r\n            prevBlock = block\r\n          },\r\n          onError(error: Error) {\r\n            onError?.(error)\r\n          },\r\n        })\r\n        unsubscribe = unsubscribe_\r\n        if (!active) unsubscribe()\r\n      } catch (err) {\r\n        onError?.(err as Error)\r\n      }\r\n    })()\r\n    return () => unsubscribe()\r\n  }\r\n\r\n  return enablePolling ? pollBlocks() : subscribeBlocks()\r\n}\r\n", "import type { AbiEvent, Address } from 'abitype'\r\n\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type {\r\n  MaybeAbiEventName,\r\n  MaybeExtractEventArgsFromAbi,\r\n} from '../../types/contract.js'\r\nimport type { Filter } from '../../types/filter.js'\r\nimport type { Log } from '../../types/log.js'\r\nimport type { LogTopic } from '../../types/misc.js'\r\nimport type { GetPollOptions } from '../../types/transport.js'\r\nimport {\r\n  type EncodeEventTopicsParameters,\r\n  encodeEventTopics,\r\n} from '../../utils/abi/encodeEventTopics.js'\r\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\r\nimport { poll } from '../../utils/poll.js'\r\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\r\n\r\nimport {\r\n  DecodeLogDataMismatch,\r\n  DecodeLogTopicsMismatch,\r\n} from '../../errors/abi.js'\r\nimport { InvalidInputRpcError } from '../../errors/rpc.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { BlockNumber } from '../../types/block.js'\r\nimport { decodeEventLog } from '../../utils/abi/decodeEventLog.js'\r\nimport { formatLog } from '../../utils/formatters/log.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport {\r\n  type CreateEventFilterParameters,\r\n  createEventFilter,\r\n} from './createEventFilter.js'\r\nimport { getBlockNumber } from './getBlockNumber.js'\r\nimport { getFilterChanges } from './getFilterChanges.js'\r\nimport { type GetLogsParameters, getLogs } from './getLogs.js'\r\nimport { uninstallFilter } from './uninstallFilter.js'\r\n\r\nexport type WatchEventOnLogsParameter<\r\n  abiEvent extends AbiEvent | undefined = undefined,\r\n  abiEvents extends\r\n    | readonly AbiEvent[]\r\n    | readonly unknown[]\r\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  eventName extends string | undefined = MaybeAbiEventName<abiEvent>,\r\n> = Log<bigint, number, false, abiEvent, strict, abiEvents, eventName>[]\r\nexport type WatchEventOnLogsFn<\r\n  abiEvent extends AbiEvent | undefined = undefined,\r\n  abiEvents extends\r\n    | readonly AbiEvent[]\r\n    | readonly unknown[]\r\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  //\r\n  _eventName extends string | undefined = MaybeAbiEventName<abiEvent>,\r\n> = (\r\n  logs: WatchEventOnLogsParameter<abiEvent, abiEvents, strict, _eventName>,\r\n) => void\r\n\r\nexport type WatchEventParameters<\r\n  abiEvent extends AbiEvent | undefined = undefined,\r\n  abiEvents extends\r\n    | readonly AbiEvent[]\r\n    | readonly unknown[]\r\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  transport extends Transport = Transport,\r\n  //\r\n  _eventName extends string | undefined = MaybeAbiEventName<abiEvent>,\r\n> = {\r\n  /** The address of the contract. */\r\n  address?: Address | Address[] | undefined\r\n  /** Block to start listening from. */\r\n  fromBlock?: BlockNumber<bigint> | undefined\r\n  /** The callback to call when an error occurred when trying to get for a new block. */\r\n  onError?: ((error: Error) => void) | undefined\r\n  /** The callback to call when new event logs are received. */\r\n  onLogs: WatchEventOnLogsFn<abiEvent, abiEvents, strict, _eventName>\r\n} & GetPollOptions<transport> &\r\n  (\r\n    | {\r\n        event: abiEvent\r\n        events?: undefined\r\n        args?: MaybeExtractEventArgsFromAbi<abiEvents, _eventName> | undefined\r\n        /**\r\n         * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\r\n         * @default false\r\n         */\r\n        strict?: strict | undefined\r\n      }\r\n    | {\r\n        event?: undefined\r\n        events?: abiEvents | undefined\r\n        args?: undefined\r\n        /**\r\n         * Whether or not the logs must match the indexed/non-indexed arguments on `event`.\r\n         * @default false\r\n         */\r\n        strict?: strict | undefined\r\n      }\r\n    | {\r\n        event?: undefined\r\n        events?: undefined\r\n        args?: undefined\r\n        strict?: undefined\r\n      }\r\n  )\r\n\r\nexport type WatchEventReturnType = () => void\r\n\r\nexport type WatchEventErrorType =\r\n  | StringifyErrorType\r\n  | ObserveErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Watches and returns emitted [Event Logs](https://viem.sh/docs/glossary/terms#event-log).\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/watchEvent\r\n * - JSON-RPC Methods:\r\n *   - **RPC Provider supports `eth_newFilter`:**\r\n *     - Calls [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter) to create a filter (called on initialize).\r\n *     - On a polling interval, it will call [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\r\n *   - **RPC Provider does not support `eth_newFilter`:**\r\n *     - Calls [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs) for each block between the polling interval.\r\n *\r\n * This Action will batch up all the Event Logs found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/actions/public/watchEvent#onLogs).\r\n *\r\n * `watchEvent` will attempt to create an [Event Filter](https://viem.sh/docs/actions/public/createEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link WatchEventParameters}\r\n * @returns A function that can be invoked to stop watching for new Event Logs. {@link WatchEventReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { watchEvent } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const unwatch = watchEvent(client, {\r\n *   onLogs: (logs) => console.log(logs),\r\n * })\r\n */\r\nexport function watchEvent<\r\n  chain extends Chain | undefined,\r\n  const abiEvent extends AbiEvent | undefined = undefined,\r\n  const abiEvents extends\r\n    | readonly AbiEvent[]\r\n    | readonly unknown[]\r\n    | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\r\n  strict extends boolean | undefined = undefined,\r\n  transport extends Transport = Transport,\r\n  _eventName extends string | undefined = undefined,\r\n>(\r\n  client: Client<transport, chain>,\r\n  {\r\n    address,\r\n    args,\r\n    batch = true,\r\n    event,\r\n    events,\r\n    fromBlock,\r\n    onError,\r\n    onLogs,\r\n    poll: poll_,\r\n    pollingInterval = client.pollingInterval,\r\n    strict: strict_,\r\n  }: WatchEventParameters<abiEvent, abiEvents, strict, transport>,\r\n): WatchEventReturnType {\r\n  const enablePolling = (() => {\r\n    if (typeof poll_ !== 'undefined') return poll_\r\n    if (typeof fromBlock === 'bigint') return true\r\n    if (client.transport.type === 'webSocket') return false\r\n    if (\r\n      client.transport.type === 'fallback' &&\r\n      client.transport.transports[0].config.type === 'webSocket'\r\n    )\r\n      return false\r\n    return true\r\n  })()\r\n  const strict = strict_ ?? false\r\n\r\n  const pollEvent = () => {\r\n    const observerId = stringify([\r\n      'watchEvent',\r\n      address,\r\n      args,\r\n      batch,\r\n      client.uid,\r\n      event,\r\n      pollingInterval,\r\n      fromBlock,\r\n    ])\r\n\r\n    return observe(observerId, { onLogs, onError }, (emit) => {\r\n      let previousBlockNumber: bigint\r\n      if (fromBlock !== undefined) previousBlockNumber = fromBlock - 1n\r\n      let filter: Filter<'event', abiEvents, _eventName, any>\r\n      let initialized = false\r\n\r\n      const unwatch = poll(\r\n        async () => {\r\n          if (!initialized) {\r\n            try {\r\n              filter = (await getAction(\r\n                client,\r\n                createEventFilter as any,\r\n                'createEventFilter',\r\n              )({\r\n                address,\r\n                args,\r\n                event: event!,\r\n                events,\r\n                strict,\r\n                fromBlock,\r\n              } as unknown as CreateEventFilterParameters)) as unknown as Filter<\r\n                'event',\r\n                abiEvents,\r\n                _eventName\r\n              >\r\n            } catch {}\r\n            initialized = true\r\n            return\r\n          }\r\n\r\n          try {\r\n            let logs: Log[]\r\n            if (filter) {\r\n              logs = await getAction(\r\n                client,\r\n                getFilterChanges,\r\n                'getFilterChanges',\r\n              )({ filter })\r\n            } else {\r\n              // If the filter doesn't exist, we will fall back to use `getLogs`.\r\n              // The fall back exists because some RPC Providers do not support filters.\r\n\r\n              // Fetch the block number to use for `getLogs`.\r\n              const blockNumber = await getAction(\r\n                client,\r\n                getBlockNumber,\r\n                'getBlockNumber',\r\n              )({})\r\n\r\n              // If the block number has changed, we will need to fetch the logs.\r\n              // If the block number doesn't exist, we are yet to reach the first poll interval,\r\n              // so do not emit any logs.\r\n              if (previousBlockNumber && previousBlockNumber !== blockNumber) {\r\n                logs = await getAction(\r\n                  client,\r\n                  getLogs,\r\n                  'getLogs',\r\n                )({\r\n                  address,\r\n                  args,\r\n                  event: event!,\r\n                  events,\r\n                  fromBlock: previousBlockNumber + 1n,\r\n                  toBlock: blockNumber,\r\n                } as unknown as GetLogsParameters)\r\n              } else {\r\n                logs = []\r\n              }\r\n              previousBlockNumber = blockNumber\r\n            }\r\n\r\n            if (logs.length === 0) return\r\n            if (batch) emit.onLogs(logs as any)\r\n            else for (const log of logs) emit.onLogs([log] as any)\r\n          } catch (err) {\r\n            // If a filter has been set and gets uninstalled, providers will throw an InvalidInput error.\r\n            // Reinitialize the filter when this occurs\r\n            if (filter && err instanceof InvalidInputRpcError)\r\n              initialized = false\r\n            emit.onError?.(err as Error)\r\n          }\r\n        },\r\n        {\r\n          emitOnBegin: true,\r\n          interval: pollingInterval,\r\n        },\r\n      )\r\n\r\n      return async () => {\r\n        if (filter)\r\n          await getAction(\r\n            client,\r\n            uninstallFilter,\r\n            'uninstallFilter',\r\n          )({ filter })\r\n        unwatch()\r\n      }\r\n    })\r\n  }\r\n\r\n  const subscribeEvent = () => {\r\n    let active = true\r\n    let unsubscribe = () => (active = false)\r\n    ;(async () => {\r\n      try {\r\n        const transport = (() => {\r\n          if (client.transport.type === 'fallback') {\r\n            const transport = client.transport.transports.find(\r\n              (transport: ReturnType<Transport>) =>\r\n                transport.config.type === 'webSocket',\r\n            )\r\n            if (!transport) return client.transport\r\n            return transport.value\r\n          }\r\n          return client.transport\r\n        })()\r\n\r\n        const events_ = events ?? (event ? [event] : undefined)\r\n        let topics: LogTopic[] = []\r\n        if (events_) {\r\n          const encoded = (events_ as AbiEvent[]).flatMap((event) =>\r\n            encodeEventTopics({\r\n              abi: [event],\r\n              eventName: (event as AbiEvent).name,\r\n              args,\r\n            } as EncodeEventTopicsParameters),\r\n          )\r\n          // TODO: Clean up type casting\r\n          topics = [encoded as LogTopic]\r\n          if (event) topics = topics[0] as LogTopic[]\r\n        }\r\n\r\n        const { unsubscribe: unsubscribe_ } = await transport.subscribe({\r\n          params: ['logs', { address, topics }],\r\n          onData(data: any) {\r\n            if (!active) return\r\n            const log = data.result\r\n            try {\r\n              const { eventName, args } = decodeEventLog({\r\n                abi: events_ ?? [],\r\n                data: log.data,\r\n                topics: log.topics,\r\n                strict,\r\n              })\r\n              const formatted = formatLog(log, { args, eventName })\r\n              onLogs([formatted] as any)\r\n            } catch (err) {\r\n              let eventName: string | undefined\r\n              let isUnnamed: boolean | undefined\r\n              if (\r\n                err instanceof DecodeLogDataMismatch ||\r\n                err instanceof DecodeLogTopicsMismatch\r\n              ) {\r\n                // If strict mode is on, and log data/topics do not match event definition, skip.\r\n                if (strict_) return\r\n                eventName = err.abiItem.name\r\n                isUnnamed = err.abiItem.inputs?.some(\r\n                  (x) => !('name' in x && x.name),\r\n                )\r\n              }\r\n\r\n              // Set args to empty if there is an error decoding (e.g. indexed/non-indexed params mismatch).\r\n              const formatted = formatLog(log, {\r\n                args: isUnnamed ? [] : {},\r\n                eventName,\r\n              })\r\n              onLogs([formatted] as any)\r\n            }\r\n          },\r\n          onError(error: Error) {\r\n            onError?.(error)\r\n          },\r\n        })\r\n        unsubscribe = unsubscribe_\r\n        if (!active) unsubscribe()\r\n      } catch (err) {\r\n        onError?.(err as Error)\r\n      }\r\n    })()\r\n    return () => unsubscribe()\r\n  }\r\n\r\n  return enablePolling ? pollEvent() : subscribeEvent()\r\n}\r\n", "import type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Filter } from '../../types/filter.js'\r\nimport type { Hash } from '../../types/misc.js'\r\nimport type { GetPollOptions } from '../../types/transport.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport { type ObserveErrorType, observe } from '../../utils/observe.js'\r\nimport { poll } from '../../utils/poll.js'\r\nimport { type StringifyErrorType, stringify } from '../../utils/stringify.js'\r\n\r\nimport { createPendingTransactionFilter } from './createPendingTransactionFilter.js'\r\nimport { getFilterChanges } from './getFilterChanges.js'\r\nimport { uninstallFilter } from './uninstallFilter.js'\r\n\r\nexport type OnTransactionsParameter = Hash[]\r\nexport type OnTransactionsFn = (transactions: OnTransactionsParameter) => void\r\n\r\nexport type WatchPendingTransactionsParameters<\r\n  transport extends Transport = Transport,\r\n> = {\r\n  /** The callback to call when an error occurred when trying to get for a new block. */\r\n  onError?: ((error: Error) => void) | undefined\r\n  /** The callback to call when new transactions are received. */\r\n  onTransactions: OnTransactionsFn\r\n} & GetPollOptions<transport>\r\n\r\nexport type WatchPendingTransactionsReturnType = () => void\r\n\r\nexport type WatchPendingTransactionsErrorType =\r\n  | StringifyErrorType\r\n  | ObserveErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Watches and returns pending transaction hashes.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/public/watchPendingTransactions\r\n * - JSON-RPC Methods:\r\n *   - When `poll: true`\r\n *     - Calls [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter) to initialize the filter.\r\n *     - Calls [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getFilterChanges) on a polling interval.\r\n *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newPendingTransactions\"` event.\r\n *\r\n * This Action will batch up all the pending transactions found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchPendingTransactions#pollinginterval-optional), and invoke them via [`onTransactions`](https://viem.sh/docs/actions/public/watchPendingTransactions#ontransactions).\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link WatchPendingTransactionsParameters}\r\n * @returns A function that can be invoked to stop watching for new pending transaction hashes. {@link WatchPendingTransactionsReturnType}\r\n *\r\n * @example\r\n * import { createPublicClient, http } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { watchPendingTransactions } from 'viem/public'\r\n *\r\n * const client = createPublicClient({\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const unwatch = await watchPendingTransactions(client, {\r\n *   onTransactions: (hashes) => console.log(hashes),\r\n * })\r\n */\r\nexport function watchPendingTransactions<\r\n  transport extends Transport,\r\n  chain extends Chain | undefined,\r\n>(\r\n  client: Client<transport, chain>,\r\n  {\r\n    batch = true,\r\n    onError,\r\n    onTransactions,\r\n    poll: poll_,\r\n    pollingInterval = client.pollingInterval,\r\n  }: WatchPendingTransactionsParameters<transport>,\r\n) {\r\n  const enablePolling =\r\n    typeof poll_ !== 'undefined' ? poll_ : client.transport.type !== 'webSocket'\r\n\r\n  const pollPendingTransactions = () => {\r\n    const observerId = stringify([\r\n      'watchPendingTransactions',\r\n      client.uid,\r\n      batch,\r\n      pollingInterval,\r\n    ])\r\n    return observe(observerId, { onTransactions, onError }, (emit) => {\r\n      let filter: Filter<'transaction'>\r\n\r\n      const unwatch = poll(\r\n        async () => {\r\n          try {\r\n            if (!filter) {\r\n              try {\r\n                filter = await getAction(\r\n                  client,\r\n                  createPendingTransactionFilter,\r\n                  'createPendingTransactionFilter',\r\n                )({})\r\n                return\r\n              } catch (err) {\r\n                unwatch()\r\n                throw err\r\n              }\r\n            }\r\n\r\n            const hashes = await getAction(\r\n              client,\r\n              getFilterChanges,\r\n              'getFilterChanges',\r\n            )({ filter })\r\n            if (hashes.length === 0) return\r\n            if (batch) emit.onTransactions(hashes)\r\n            else for (const hash of hashes) emit.onTransactions([hash])\r\n          } catch (err) {\r\n            emit.onError?.(err as Error)\r\n          }\r\n        },\r\n        {\r\n          emitOnBegin: true,\r\n          interval: pollingInterval,\r\n        },\r\n      )\r\n\r\n      return async () => {\r\n        if (filter)\r\n          await getAction(\r\n            client,\r\n            uninstallFilter,\r\n            'uninstallFilter',\r\n          )({ filter })\r\n        unwatch()\r\n      }\r\n    })\r\n  }\r\n\r\n  const subscribePendingTransactions = () => {\r\n    let active = true\r\n    let unsubscribe = () => (active = false)\r\n    ;(async () => {\r\n      try {\r\n        const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({\r\n          params: ['newPendingTransactions'],\r\n          onData(data: any) {\r\n            if (!active) return\r\n            const transaction = data.result\r\n            onTransactions([transaction])\r\n          },\r\n          onError(error: Error) {\r\n            onError?.(error)\r\n          },\r\n        })\r\n        unsubscribe = unsubscribe_\r\n        if (!active) unsubscribe()\r\n      } catch (err) {\r\n        onError?.(err as Error)\r\n      }\r\n    })()\r\n    return () => unsubscribe()\r\n  }\r\n\r\n  return enablePolling\r\n    ? pollPendingTransactions()\r\n    : subscribePendingTransactions()\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport type { ExactPartial, Prettify } from '../../types/utils.js'\r\nimport type { SiweMessage } from './types.js'\r\n\r\n/**\r\n * @description Parses EIP-4361 formatted message into message fields object.\r\n *\r\n * @see https://eips.ethereum.org/EIPS/eip-4361\r\n *\r\n * @returns EIP-4361 fields object\r\n */\r\nexport function parseSiweMessage(\r\n  message: string,\r\n): Prettify<ExactPartial<SiweMessage>> {\r\n  const { scheme, statement, ...prefix } = (message.match(prefixRegex)\r\n    ?.groups ?? {}) as {\r\n    address: Address\r\n    domain: string\r\n    scheme?: string\r\n    statement?: string\r\n  }\r\n  const { chainId, expirationTime, issuedAt, notBefore, requestId, ...suffix } =\r\n    (message.match(suffixRegex)?.groups ?? {}) as {\r\n      chainId: string\r\n      expirationTime?: string\r\n      issuedAt?: string\r\n      nonce: string\r\n      notBefore?: string\r\n      requestId?: string\r\n      uri: string\r\n      version: '1'\r\n    }\r\n  const resources = message.split('Resources:')[1]?.split('\\n- ').slice(1)\r\n  return {\r\n    ...prefix,\r\n    ...suffix,\r\n    ...(chainId ? { chainId: Number(chainId) } : {}),\r\n    ...(expirationTime ? { expirationTime: new Date(expirationTime) } : {}),\r\n    ...(issuedAt ? { issuedAt: new Date(issuedAt) } : {}),\r\n    ...(notBefore ? { notBefore: new Date(notBefore) } : {}),\r\n    ...(requestId ? { requestId } : {}),\r\n    ...(resources ? { resources } : {}),\r\n    ...(scheme ? { scheme } : {}),\r\n    ...(statement ? { statement } : {}),\r\n  }\r\n}\r\n\r\n// https://regexr.com/80gdj\r\nconst prefixRegex =\r\n  /^(?:(?<scheme>[a-zA-Z][a-zA-Z0-9+-.]*):\\/\\/)?(?<domain>[a-zA-Z0-9+-.]*(?::[0-9]{1,5})?) (?:wants you to sign in with your Ethereum account:\\n)(?<address>0x[a-fA-F0-9]{40})\\n\\n(?:(?<statement>.*)\\n\\n)?/\r\n\r\n// https://regexr.com/80gf9\r\nconst suffixRegex =\r\n  /(?:URI: (?<uri>.+))\\n(?:Version: (?<version>.+))\\n(?:Chain ID: (?<chainId>\\d+))\\n(?:Nonce: (?<nonce>[a-zA-Z0-9]+))\\n(?:Issued At: (?<issuedAt>.+))(?:\\nExpiration Time: (?<expirationTime>.+))?(?:\\nNot Before: (?<notBefore>.+))?(?:\\nRequest ID: (?<requestId>.+))?/\r\n", "import type { Address } from 'abitype'\r\n\r\nimport type { ExactPartial } from '../../types/utils.js'\r\nimport { isAddressEqual } from '../address/isAddressEqual.js'\r\nimport type { SiweMessage } from './types.js'\r\n\r\nexport type ValidateSiweMessageParameters = {\r\n  /**\r\n   * Ethereum address to check against.\r\n   */\r\n  address?: Address | undefined\r\n  /**\r\n   * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986) authority to check against.\r\n   */\r\n  domain?: string | undefined\r\n  /**\r\n   * EIP-4361 message fields.\r\n   */\r\n  message: ExactPartial<SiweMessage>\r\n  /**\r\n   * Random string to check against.\r\n   */\r\n  nonce?: string | undefined\r\n  /**\r\n   * [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) URI scheme to check against.\r\n   */\r\n  scheme?: string | undefined\r\n  /**\r\n   * Current time to check optional `expirationTime` and `notBefore` fields.\r\n   *\r\n   * @default new Date()\r\n   */\r\n  time?: Date | undefined\r\n}\r\n\r\nexport type ValidateSiweMessageReturnType = boolean\r\n\r\n/**\r\n * @description Validates EIP-4361 message.\r\n *\r\n * @see https://eips.ethereum.org/EIPS/eip-4361\r\n */\r\nexport function validateSiweMessage(\r\n  parameters: ValidateSiweMessageParameters,\r\n): ValidateSiweMessageReturnType {\r\n  const {\r\n    address,\r\n    domain,\r\n    message,\r\n    nonce,\r\n    scheme,\r\n    time = new Date(),\r\n  } = parameters\r\n\r\n  if (domain && message.domain !== domain) return false\r\n  if (nonce && message.nonce !== nonce) return false\r\n  if (scheme && message.scheme !== scheme) return false\r\n\r\n  if (message.expirationTime && time >= message.expirationTime) return false\r\n  if (message.notBefore && time < message.notBefore) return false\r\n\r\n  try {\r\n    if (!message.address) return false\r\n    if (address && !isAddressEqual(message.address, address)) return false\r\n  } catch {\r\n    return false\r\n  }\r\n\r\n  return true\r\n}\r\n", "import type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { Prettify } from '../../types/utils.js'\r\nimport { hashMessage } from '../../utils/signature/hashMessage.js'\r\nimport type { HashMessageErrorType } from '../../utils/signature/hashMessage.js'\r\nimport { parseSiweMessage } from '../../utils/siwe/parseSiweMessage.js'\r\nimport {\r\n  type ValidateSiweMessageParameters,\r\n  validateSiweMessage,\r\n} from '../../utils/siwe/validateSiweMessage.js'\r\nimport {\r\n  type VerifyHashErrorType,\r\n  type VerifyHashParameters,\r\n  verifyHash,\r\n} from '../public/verifyHash.js'\r\n\r\nexport type VerifySiweMessageParameters = Prettify<\r\n  Pick<VerifyHashParameters, 'blockNumber' | 'blockTag'> &\r\n    Pick<\r\n      ValidateSiweMessageParameters,\r\n      'address' | 'domain' | 'nonce' | 'scheme' | 'time'\r\n    > & {\r\n      /**\r\n       * EIP-4361 formatted message.\r\n       */\r\n      message: string\r\n      /**\r\n       * Signature to check against.\r\n       */\r\n      signature: Hex\r\n    }\r\n>\r\n\r\nexport type VerifySiweMessageReturnType = boolean\r\n\r\nexport type VerifySiweMessageErrorType =\r\n  | HashMessageErrorType\r\n  | VerifyHashErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Verifies [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message was signed.\r\n *\r\n * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\r\n *\r\n * - Docs {@link https://viem.sh/docs/siwe/actions/verifySiweMessage}\r\n *\r\n * @param client - Client to use.\r\n * @param parameters - {@link VerifySiweMessageParameters}\r\n * @returns Whether or not the signature is valid. {@link VerifySiweMessageReturnType}\r\n */\r\nexport async function verifySiweMessage<chain extends Chain | undefined>(\r\n  client: Client<Transport, chain>,\r\n  parameters: VerifySiweMessageParameters,\r\n): Promise<VerifySiweMessageReturnType> {\r\n  const {\r\n    address,\r\n    domain,\r\n    message,\r\n    nonce,\r\n    scheme,\r\n    signature,\r\n    time = new Date(),\r\n    ...callRequest\r\n  } = parameters\r\n\r\n  const parsed = parseSiweMessage(message)\r\n  if (!parsed.address) return false\r\n\r\n  const isValid = validateSiweMessage({\r\n    address,\r\n    domain,\r\n    message: parsed,\r\n    nonce,\r\n    scheme,\r\n    time,\r\n  })\r\n  if (!isValid) return false\r\n\r\n  const hash = hashMessage(message)\r\n  return verifyHash(client, {\r\n    address: parsed.address,\r\n    hash,\r\n    signature,\r\n    ...callRequest,\r\n  })\r\n}\r\n", "import type { Abi, AbiEvent, Address } from 'abitype'\r\n\r\nimport {\r\n  type GetEnsAddressParameters,\r\n  type GetEnsAddressReturnType,\r\n  getEnsAddress,\r\n} from '../../actions/ens/getEnsAddress.js'\r\nimport {\r\n  type GetEnsAvatarParameters,\r\n  type GetEnsAvatarReturnType,\r\n  getEnsAvatar,\r\n} from '../../actions/ens/getEnsAvatar.js'\r\nimport {\r\n  type GetEnsNameParameters,\r\n  type GetEnsNameReturnType,\r\n  getEnsName,\r\n} from '../../actions/ens/getEnsName.js'\r\nimport {\r\n  type GetEnsResolverParameters,\r\n  type GetEnsResolverReturnType,\r\n  getEnsResolver,\r\n} from '../../actions/ens/getEnsResolver.js'\r\nimport {\r\n  type GetEnsTextParameters,\r\n  type GetEnsTextReturnType,\r\n  getEnsText,\r\n} from '../../actions/ens/getEnsText.js'\r\nimport {\r\n  type CallParameters,\r\n  type CallReturnType,\r\n  call,\r\n} from '../../actions/public/call.js'\r\nimport {\r\n  type CreateBlockFilterReturnType,\r\n  createBlockFilter,\r\n} from '../../actions/public/createBlockFilter.js'\r\nimport {\r\n  type CreateContractEventFilterParameters,\r\n  type CreateContractEventFilterReturnType,\r\n  createContractEventFilter,\r\n} from '../../actions/public/createContractEventFilter.js'\r\nimport {\r\n  type CreateEventFilterParameters,\r\n  type CreateEventFilterReturnType,\r\n  createEventFilter,\r\n} from '../../actions/public/createEventFilter.js'\r\nimport {\r\n  type CreatePendingTransactionFilterReturnType,\r\n  createPendingTransactionFilter,\r\n} from '../../actions/public/createPendingTransactionFilter.js'\r\nimport {\r\n  type EstimateContractGasParameters,\r\n  type EstimateContractGasReturnType,\r\n  estimateContractGas,\r\n} from '../../actions/public/estimateContractGas.js'\r\nimport {\r\n  type EstimateFeesPerGasParameters,\r\n  type EstimateFeesPerGasReturnType,\r\n  estimateFeesPerGas,\r\n} from '../../actions/public/estimateFeesPerGas.js'\r\nimport {\r\n  type EstimateGasParameters,\r\n  type EstimateGasReturnType,\r\n  estimateGas,\r\n} from '../../actions/public/estimateGas.js'\r\nimport {\r\n  type EstimateMaxPriorityFeePerGasParameters,\r\n  type EstimateMaxPriorityFeePerGasReturnType,\r\n  estimateMaxPriorityFeePerGas,\r\n} from '../../actions/public/estimateMaxPriorityFeePerGas.js'\r\nimport {\r\n  type GetBalanceParameters,\r\n  type GetBalanceReturnType,\r\n  getBalance,\r\n} from '../../actions/public/getBalance.js'\r\nimport {\r\n  type GetBlobBaseFeeReturnType,\r\n  getBlobBaseFee,\r\n} from '../../actions/public/getBlobBaseFee.js'\r\nimport {\r\n  type GetBlockParameters,\r\n  type GetBlockReturnType,\r\n  getBlock,\r\n} from '../../actions/public/getBlock.js'\r\nimport {\r\n  type GetBlockNumberParameters,\r\n  type GetBlockNumberReturnType,\r\n  getBlockNumber,\r\n} from '../../actions/public/getBlockNumber.js'\r\nimport {\r\n  type GetBlockTransactionCountParameters,\r\n  type GetBlockTransactionCountReturnType,\r\n  getBlockTransactionCount,\r\n} from '../../actions/public/getBlockTransactionCount.js'\r\nimport {\r\n  type GetChainIdReturnType,\r\n  getChainId,\r\n} from '../../actions/public/getChainId.js'\r\nimport {\r\n  type GetCodeParameters,\r\n  type GetCodeReturnType,\r\n  getCode,\r\n} from '../../actions/public/getCode.js'\r\nimport {\r\n  type GetContractEventsParameters,\r\n  type GetContractEventsReturnType,\r\n  getContractEvents,\r\n} from '../../actions/public/getContractEvents.js'\r\nimport {\r\n  type GetEip712DomainParameters,\r\n  type GetEip712DomainReturnType,\r\n  getEip712Domain,\r\n} from '../../actions/public/getEip712Domain.js'\r\nimport {\r\n  type GetFeeHistoryParameters,\r\n  type GetFeeHistoryReturnType,\r\n  getFeeHistory,\r\n} from '../../actions/public/getFeeHistory.js'\r\nimport {\r\n  type GetFilterChangesParameters,\r\n  type GetFilterChangesReturnType,\r\n  getFilterChanges,\r\n} from '../../actions/public/getFilterChanges.js'\r\nimport {\r\n  type GetFilterLogsParameters,\r\n  type GetFilterLogsReturnType,\r\n  getFilterLogs,\r\n} from '../../actions/public/getFilterLogs.js'\r\nimport {\r\n  type GetGasPriceReturnType,\r\n  getGasPrice,\r\n} from '../../actions/public/getGasPrice.js'\r\nimport {\r\n  type GetLogsParameters,\r\n  type GetLogsReturnType,\r\n  getLogs,\r\n} from '../../actions/public/getLogs.js'\r\nimport {\r\n  type GetProofParameters,\r\n  type GetProofReturnType,\r\n  getProof,\r\n} from '../../actions/public/getProof.js'\r\nimport {\r\n  type GetStorageAtParameters,\r\n  type GetStorageAtReturnType,\r\n  getStorageAt,\r\n} from '../../actions/public/getStorageAt.js'\r\nimport {\r\n  type GetTransactionParameters,\r\n  type GetTransactionReturnType,\r\n  getTransaction,\r\n} from '../../actions/public/getTransaction.js'\r\nimport {\r\n  type GetTransactionConfirmationsParameters,\r\n  type GetTransactionConfirmationsReturnType,\r\n  getTransactionConfirmations,\r\n} from '../../actions/public/getTransactionConfirmations.js'\r\nimport {\r\n  type GetTransactionCountParameters,\r\n  type GetTransactionCountReturnType,\r\n  getTransactionCount,\r\n} from '../../actions/public/getTransactionCount.js'\r\nimport {\r\n  type GetTransactionReceiptParameters,\r\n  type GetTransactionReceiptReturnType,\r\n  getTransactionReceipt,\r\n} from '../../actions/public/getTransactionReceipt.js'\r\nimport {\r\n  type MulticallParameters,\r\n  type MulticallReturnType,\r\n  multicall,\r\n} from '../../actions/public/multicall.js'\r\nimport {\r\n  type ReadContractParameters,\r\n  type ReadContractReturnType,\r\n  readContract,\r\n} from '../../actions/public/readContract.js'\r\nimport {\r\n  type SimulateContractParameters,\r\n  type SimulateContractReturnType,\r\n  simulateContract,\r\n} from '../../actions/public/simulateContract.js'\r\nimport {\r\n  type UninstallFilterParameters,\r\n  type UninstallFilterReturnType,\r\n  uninstallFilter,\r\n} from '../../actions/public/uninstallFilter.js'\r\nimport {\r\n  type VerifyMessageParameters,\r\n  type VerifyMessageReturnType,\r\n  verifyMessage,\r\n} from '../../actions/public/verifyMessage.js'\r\nimport {\r\n  type VerifyTypedDataParameters,\r\n  type VerifyTypedDataReturnType,\r\n  verifyTypedData,\r\n} from '../../actions/public/verifyTypedData.js'\r\nimport {\r\n  type WaitForTransactionReceiptParameters,\r\n  type WaitForTransactionReceiptReturnType,\r\n  waitForTransactionReceipt,\r\n} from '../../actions/public/waitForTransactionReceipt.js'\r\nimport {\r\n  type WatchBlockNumberParameters,\r\n  type WatchBlockNumberReturnType,\r\n  watchBlockNumber,\r\n} from '../../actions/public/watchBlockNumber.js'\r\nimport {\r\n  type WatchBlocksParameters,\r\n  type WatchBlocksReturnType,\r\n  watchBlocks,\r\n} from '../../actions/public/watchBlocks.js'\r\nimport {\r\n  type WatchContractEventParameters,\r\n  type WatchContractEventReturnType,\r\n  watchContractEvent,\r\n} from '../../actions/public/watchContractEvent.js'\r\nimport {\r\n  type WatchEventParameters,\r\n  type WatchEventReturnType,\r\n  watchEvent,\r\n} from '../../actions/public/watchEvent.js'\r\nimport {\r\n  type WatchPendingTransactionsParameters,\r\n  type WatchPendingTransactionsReturnType,\r\n  watchPendingTransactions,\r\n} from '../../actions/public/watchPendingTransactions.js'\r\nimport {\r\n  type VerifySiweMessageParameters,\r\n  type VerifySiweMessageReturnType,\r\n  verifySiweMessage,\r\n} from '../../actions/siwe/verifySiweMessage.js'\r\nimport {\r\n  type PrepareTransactionRequestParameters,\r\n  type PrepareTransactionRequestRequest,\r\n  type PrepareTransactionRequestReturnType,\r\n  prepareTransactionRequest,\r\n} from '../../actions/wallet/prepareTransactionRequest.js'\r\nimport {\r\n  type SendRawTransactionParameters,\r\n  type SendRawTransactionReturnType,\r\n  sendRawTransaction,\r\n} from '../../actions/wallet/sendRawTransaction.js'\r\nimport type { Account } from '../../types/account.js'\r\nimport type { BlockNumber, BlockTag } from '../../types/block.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type {\r\n  ContractEventName,\r\n  ContractFunctionArgs,\r\n  ContractFunctionName,\r\n  MaybeAbiEventName,\r\n  MaybeExtractEventArgsFromAbi,\r\n} from '../../types/contract.js'\r\nimport type { FeeValuesType } from '../../types/fee.js'\r\nimport type { FilterType } from '../../types/filter.js'\r\nimport type { Client } from '../createClient.js'\r\nimport type { Transport } from '../transports/createTransport.js'\r\n\r\nexport type PublicActions<\r\n  transport extends Transport = Transport,\r\n  chain extends Chain | undefined = Chain | undefined,\r\n  account extends Account | undefined = Account | undefined,\r\n> = {\r\n  /**\r\n   * Executes a new message call immediately without submitting a transaction to the network.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/call\r\n   * - JSON-RPC Methods: [`eth_call`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_call)\r\n   *\r\n   * @param args - {@link CallParameters}\r\n   * @returns The call data. {@link CallReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const data = await client.call({\r\n   *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\r\n   *   data: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\r\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\r\n   * })\r\n   */\r\n  call: (parameters: CallParameters<chain>) => Promise<CallReturnType>\r\n  /**\r\n   * Creates a Filter to listen for new block hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/createBlockFilter\r\n   * - JSON-RPC Methods: [`eth_newBlockFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newBlockFilter)\r\n   *\r\n   * @returns Filter. {@link CreateBlockFilterReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, createBlockFilter, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const filter = await createBlockFilter(client)\r\n   * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'block' }\r\n   */\r\n  createBlockFilter: () => Promise<CreateBlockFilterReturnType>\r\n  /**\r\n   * Creates a Filter to retrieve event logs that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges) or [`getFilterLogs`](https://viem.sh/docs/actions/public/getFilterLogs).\r\n   *\r\n   * - Docs: https://viem.sh/docs/contract/createContractEventFilter\r\n   *\r\n   * @param args - {@link CreateContractEventFilterParameters}\r\n   * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateContractEventFilterReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http, parseAbi } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const filter = await client.createContractEventFilter({\r\n   *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\r\n   * })\r\n   */\r\n  createContractEventFilter: <\r\n    const abi extends Abi | readonly unknown[],\r\n    eventName extends ContractEventName<abi> | undefined,\r\n    args extends MaybeExtractEventArgsFromAbi<abi, eventName> | undefined,\r\n    strict extends boolean | undefined = undefined,\r\n    fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n    toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  >(\r\n    args: CreateContractEventFilterParameters<\r\n      abi,\r\n      eventName,\r\n      args,\r\n      strict,\r\n      fromBlock,\r\n      toBlock\r\n    >,\r\n  ) => Promise<\r\n    CreateContractEventFilterReturnType<\r\n      abi,\r\n      eventName,\r\n      args,\r\n      strict,\r\n      fromBlock,\r\n      toBlock\r\n    >\r\n  >\r\n  /**\r\n   * Creates a [`Filter`](https://viem.sh/docs/glossary/types#filter) to listen for new events that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/createEventFilter\r\n   * - JSON-RPC Methods: [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter)\r\n   *\r\n   * @param args - {@link CreateEventFilterParameters}\r\n   * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateEventFilterReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const filter = await client.createEventFilter({\r\n   *   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\r\n   * })\r\n   */\r\n  createEventFilter: <\r\n    const abiEvent extends AbiEvent | undefined = undefined,\r\n    const abiEvents extends\r\n      | readonly AbiEvent[]\r\n      | readonly unknown[]\r\n      | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\r\n    strict extends boolean | undefined = undefined,\r\n    fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n    toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n    _EventName extends string | undefined = MaybeAbiEventName<abiEvent>,\r\n    _Args extends\r\n      | MaybeExtractEventArgsFromAbi<abiEvents, _EventName>\r\n      | undefined = undefined,\r\n  >(\r\n    args?:\r\n      | CreateEventFilterParameters<\r\n          abiEvent,\r\n          abiEvents,\r\n          strict,\r\n          fromBlock,\r\n          toBlock,\r\n          _EventName,\r\n          _Args\r\n        >\r\n      | undefined,\r\n  ) => Promise<\r\n    CreateEventFilterReturnType<\r\n      abiEvent,\r\n      abiEvents,\r\n      strict,\r\n      fromBlock,\r\n      toBlock,\r\n      _EventName,\r\n      _Args\r\n    >\r\n  >\r\n  /**\r\n   * Creates a Filter to listen for new pending transaction hashes that can be used with [`getFilterChanges`](https://viem.sh/docs/actions/public/getFilterChanges).\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/createPendingTransactionFilter\r\n   * - JSON-RPC Methods: [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter)\r\n   *\r\n   * @returns [`Filter`](https://viem.sh/docs/glossary/types#filter). {@link CreateBlockFilterReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const filter = await client.createPendingTransactionFilter()\r\n   * // { id: \"0x345a6572337856574a76364e457a4366\", type: 'transaction' }\r\n   */\r\n  createPendingTransactionFilter: () => Promise<CreatePendingTransactionFilterReturnType>\r\n  /**\r\n   * Estimates the gas required to successfully execute a contract write function call.\r\n   *\r\n   * - Docs: https://viem.sh/docs/contract/estimateContractGas\r\n   *\r\n   * @remarks\r\n   * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`estimateGas` action](https://viem.sh/docs/actions/public/estimateGas) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\r\n   *\r\n   * @param args - {@link EstimateContractGasParameters}\r\n   * @returns The gas estimate (in wei). {@link EstimateContractGasReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http, parseAbi } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const gas = await client.estimateContractGas({\r\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n   *   abi: parseAbi(['function mint() public']),\r\n   *   functionName: 'mint',\r\n   *   account: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266',\r\n   * })\r\n   */\r\n  estimateContractGas: <\r\n    chain extends Chain | undefined,\r\n    const abi extends Abi | readonly unknown[],\r\n    functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n    args extends ContractFunctionArgs<\r\n      abi,\r\n      'nonpayable' | 'payable',\r\n      functionName\r\n    >,\r\n  >(\r\n    args: EstimateContractGasParameters<abi, functionName, args, chain>,\r\n  ) => Promise<EstimateContractGasReturnType>\r\n  /**\r\n   * Estimates the gas necessary to complete a transaction without submitting it to the network.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/estimateGas\r\n   * - JSON-RPC Methods: [`eth_estimateGas`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas)\r\n   *\r\n   * @param args - {@link EstimateGasParameters}\r\n   * @returns The gas estimate (in wei). {@link EstimateGasReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http, parseEther } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const gasEstimate = await client.estimateGas({\r\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\r\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\r\n   *   value: parseEther('1'),\r\n   * })\r\n   */\r\n  estimateGas: (\r\n    args: EstimateGasParameters<chain>,\r\n  ) => Promise<EstimateGasReturnType>\r\n  /**\r\n   * Returns the balance of an address in wei.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/getBalance\r\n   * - JSON-RPC Methods: [`eth_getBalance`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getbalance)\r\n   *\r\n   * @remarks\r\n   * You can convert the balance to ether units with [`formatEther`](https://viem.sh/docs/utilities/formatEther).\r\n   *\r\n   * ```ts\r\n   * const balance = await getBalance(client, {\r\n   *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\r\n   *   blockTag: 'safe'\r\n   * })\r\n   * const balanceAsEther = formatEther(balance)\r\n   * // \"6.942\"\r\n   * ```\r\n   *\r\n   * @param args - {@link GetBalanceParameters}\r\n   * @returns The balance of the address in wei. {@link GetBalanceReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const balance = await client.getBalance({\r\n   *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\r\n   * })\r\n   * // 10000000000000000000000n (wei)\r\n   */\r\n  getBalance: (args: GetBalanceParameters) => Promise<GetBalanceReturnType>\r\n  /**\r\n   * Returns the base fee per blob gas in wei.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/getBlobBaseFee\r\n   * - JSON-RPC Methods: [`eth_blobBaseFee`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blobBaseFee)\r\n   *\r\n   * @param client - Client to use\r\n   * @returns The blob base fee (in wei). {@link GetBlobBaseFeeReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   * import { getBlobBaseFee } from 'viem/public'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const blobBaseFee = await client.getBlobBaseFee()\r\n   */\r\n  getBlobBaseFee: () => Promise<GetBlobBaseFeeReturnType>\r\n  /**\r\n   * Returns information about a block at a block number, hash, or tag.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/getBlock\r\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/fetching-blocks\r\n   * - JSON-RPC Methods:\r\n   *   - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) for `blockNumber` & `blockTag`.\r\n   *   - Calls [`eth_getBlockByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbyhash) for `blockHash`.\r\n   *\r\n   * @param args - {@link GetBlockParameters}\r\n   * @returns Information about the block. {@link GetBlockReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const block = await client.getBlock()\r\n   */\r\n  getBlock: <\r\n    includeTransactions extends boolean = false,\r\n    blockTag extends BlockTag = 'latest',\r\n  >(\r\n    args?: GetBlockParameters<includeTransactions, blockTag> | undefined,\r\n  ) => Promise<GetBlockReturnType<chain, includeTransactions, blockTag>>\r\n  /**\r\n   * Returns the number of the most recent block seen.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/getBlockNumber\r\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/fetching-blocks\r\n   * - JSON-RPC Methods: [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber)\r\n   *\r\n   * @param args - {@link GetBlockNumberParameters}\r\n   * @returns The number of the block. {@link GetBlockNumberReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const blockNumber = await client.getBlockNumber()\r\n   * // 69420n\r\n   */\r\n  getBlockNumber: (\r\n    args?: GetBlockNumberParameters | undefined,\r\n  ) => Promise<GetBlockNumberReturnType>\r\n  /**\r\n   * Returns the number of Transactions at a block number, hash, or tag.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/getBlockTransactionCount\r\n   * - JSON-RPC Methods:\r\n   *   - Calls [`eth_getBlockTransactionCountByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbynumber) for `blockNumber` & `blockTag`.\r\n   *   - Calls [`eth_getBlockTransactionCountByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbyhash) for `blockHash`.\r\n   *\r\n   * @param args - {@link GetBlockTransactionCountParameters}\r\n   * @returns The block transaction count. {@link GetBlockTransactionCountReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const count = await client.getBlockTransactionCount()\r\n   */\r\n  getBlockTransactionCount: (\r\n    args?: GetBlockTransactionCountParameters | undefined,\r\n  ) => Promise<GetBlockTransactionCountReturnType>\r\n  /** @deprecated Use `getCode` instead. */\r\n  getBytecode: (args: GetCodeParameters) => Promise<GetCodeReturnType>\r\n  /**\r\n   * Returns the chain ID associated with the current network.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/getChainId\r\n   * - JSON-RPC Methods: [`eth_chainId`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid)\r\n   *\r\n   * @returns The current chain ID. {@link GetChainIdReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const chainId = await client.getChainId()\r\n   * // 1\r\n   */\r\n  getChainId: () => Promise<GetChainIdReturnType>\r\n  /**\r\n   * Retrieves the bytecode at an address.\r\n   *\r\n   * - Docs: https://viem.sh/docs/contract/getCode\r\n   * - JSON-RPC Methods: [`eth_getCode`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getcode)\r\n   *\r\n   * @param args - {@link GetBytecodeParameters}\r\n   * @returns The contract's bytecode. {@link GetBytecodeReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const code = await client.getCode({\r\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n   * })\r\n   */\r\n  getCode: (args: GetCodeParameters) => Promise<GetCodeReturnType>\r\n  /**\r\n   * Returns a list of event logs emitted by a contract.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/getContractEvents\r\n   * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\r\n   *\r\n   * @param client - Client to use\r\n   * @param parameters - {@link GetContractEventsParameters}\r\n   * @returns A list of event logs. {@link GetContractEventsReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   * import { wagmiAbi } from './abi'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const logs = await client.getContractEvents(client, {\r\n   *  address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n   *  abi: wagmiAbi,\r\n   *  eventName: 'Transfer'\r\n   * })\r\n   */\r\n  getContractEvents: <\r\n    const abi extends Abi | readonly unknown[],\r\n    eventName extends ContractEventName<abi> | undefined = undefined,\r\n    strict extends boolean | undefined = undefined,\r\n    fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n    toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  >(\r\n    args: GetContractEventsParameters<\r\n      abi,\r\n      eventName,\r\n      strict,\r\n      fromBlock,\r\n      toBlock\r\n    >,\r\n  ) => Promise<\r\n    GetContractEventsReturnType<abi, eventName, strict, fromBlock, toBlock>\r\n  >\r\n  /**\r\n   * Reads the EIP-712 domain from a contract, based on the ERC-5267 specification.\r\n   *\r\n   * @param client - A {@link Client} instance.\r\n   * @param parameters - The parameters of the action. {@link GetEip712DomainParameters}\r\n   * @returns The EIP-712 domain, fields, and extensions. {@link GetEip712DomainReturnType}\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   *\r\n   * const domain = await client.getEip712Domain({\r\n   *   address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\r\n   * })\r\n   * // {\r\n   * //   domain: {\r\n   * //     name: 'ExampleContract',\r\n   * //     version: '1',\r\n   * //     chainId: 1,\r\n   * //     verifyingContract: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\r\n   * //   },\r\n   * //   fields: '0x0f',\r\n   * //   extensions: [],\r\n   * // }\r\n   * ```\r\n   */\r\n  getEip712Domain: (\r\n    args: GetEip712DomainParameters,\r\n  ) => Promise<GetEip712DomainReturnType>\r\n  /**\r\n   * Gets address for ENS name.\r\n   *\r\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsAddress\r\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\r\n   *\r\n   * @remarks\r\n   * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\r\n   *\r\n   * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\r\n   *\r\n   * @param args - {@link GetEnsAddressParameters}\r\n   * @returns Address for ENS name or `null` if not found. {@link GetEnsAddressReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   * import { normalize } from 'viem/ens'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const ensAddress = await client.getEnsAddress({\r\n   *   name: normalize('wevm.eth'),\r\n   * })\r\n   * // '0xd2135CfB216b74109775236E36d4b433F1DF507B'\r\n   */\r\n  getEnsAddress: (\r\n    args: GetEnsAddressParameters,\r\n  ) => Promise<GetEnsAddressReturnType>\r\n  /**\r\n   * Gets the avatar of an ENS name.\r\n   *\r\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsAvatar\r\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\r\n   *\r\n   * @remarks\r\n   * Calls [`getEnsText`](https://viem.sh/docs/ens/actions/getEnsText) with `key` set to `'avatar'`.\r\n   *\r\n   * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\r\n   *\r\n   * @param args - {@link GetEnsAvatarParameters}\r\n   * @returns Avatar URI or `null` if not found. {@link GetEnsAvatarReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   * import { normalize } from 'viem/ens'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const ensAvatar = await client.getEnsAvatar({\r\n   *   name: normalize('wevm.eth'),\r\n   * })\r\n   * // 'https://ipfs.io/ipfs/Qma8mnp6xV3J2cRNf3mTth5C8nV11CAnceVinc3y8jSbio'\r\n   */\r\n  getEnsAvatar: (\r\n    args: GetEnsAvatarParameters,\r\n  ) => Promise<GetEnsAvatarReturnType>\r\n  /**\r\n   * Gets primary name for specified address.\r\n   *\r\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsName\r\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\r\n   *\r\n   * @remarks\r\n   * Calls `reverse(bytes)` on ENS Universal Resolver Contract to \"reverse resolve\" the address to the primary ENS name.\r\n   *\r\n   * @param args - {@link GetEnsNameParameters}\r\n   * @returns Name or `null` if not found. {@link GetEnsNameReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const ensName = await client.getEnsName({\r\n   *   address: '0xd2135CfB216b74109775236E36d4b433F1DF507B',\r\n   * })\r\n   * // 'wevm.eth'\r\n   */\r\n  getEnsName: (args: GetEnsNameParameters) => Promise<GetEnsNameReturnType>\r\n  /**\r\n   * Gets resolver for ENS name.\r\n   *\r\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver\r\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\r\n   *\r\n   * @remarks\r\n   * Calls `findResolver(bytes)` on ENS Universal Resolver Contract to retrieve the resolver of an ENS name.\r\n   *\r\n   * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\r\n   *\r\n   * @param args - {@link GetEnsResolverParameters}\r\n   * @returns Address for ENS resolver. {@link GetEnsResolverReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   * import { normalize } from 'viem/ens'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const resolverAddress = await client.getEnsResolver({\r\n   *   name: normalize('wevm.eth'),\r\n   * })\r\n   * // '0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41'\r\n   */\r\n  getEnsResolver: (\r\n    args: GetEnsResolverParameters,\r\n  ) => Promise<GetEnsResolverReturnType>\r\n  /**\r\n   * Gets a text record for specified ENS name.\r\n   *\r\n   * - Docs: https://viem.sh/docs/ens/actions/getEnsResolver\r\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/ens\r\n   *\r\n   * @remarks\r\n   * Calls `resolve(bytes, bytes)` on ENS Universal Resolver Contract.\r\n   *\r\n   * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `getEnsAddress`. You can use the built-in [`normalize`](https://viem.sh/docs/ens/utilities/normalize) function for this.\r\n   *\r\n   * @param args - {@link GetEnsTextParameters}\r\n   * @returns Address for ENS resolver. {@link GetEnsTextReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   * import { normalize } from 'viem/ens'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const twitterRecord = await client.getEnsText({\r\n   *   name: normalize('wevm.eth'),\r\n   *   key: 'com.twitter',\r\n   * })\r\n   * // 'wevm_dev'\r\n   */\r\n  getEnsText: (args: GetEnsTextParameters) => Promise<GetEnsTextReturnType>\r\n  /**\r\n   * Returns a collection of historical gas information.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/getFeeHistory\r\n   * - JSON-RPC Methods: [`eth_feeHistory`](https://docs.alchemy.com/reference/eth-feehistory)\r\n   *\r\n   * @param args - {@link GetFeeHistoryParameters}\r\n   * @returns The gas estimate (in wei). {@link GetFeeHistoryReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const feeHistory = await client.getFeeHistory({\r\n   *   blockCount: 4,\r\n   *   rewardPercentiles: [25, 75],\r\n   * })\r\n   */\r\n  getFeeHistory: (\r\n    args: GetFeeHistoryParameters,\r\n  ) => Promise<GetFeeHistoryReturnType>\r\n  /**\r\n   * Returns an estimate for the fees per gas for a transaction to be included\r\n   * in the next block.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/estimateFeesPerGas\r\n   *\r\n   * @param client - Client to use\r\n   * @param parameters - {@link EstimateFeesPerGasParameters}\r\n   * @returns An estimate (in wei) for the fees per gas. {@link EstimateFeesPerGasReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const maxPriorityFeePerGas = await client.estimateFeesPerGas()\r\n   * // { maxFeePerGas: ..., maxPriorityFeePerGas: ... }\r\n   */\r\n  estimateFeesPerGas: <\r\n    chainOverride extends Chain | undefined = undefined,\r\n    type extends FeeValuesType = 'eip1559',\r\n  >(\r\n    args?: EstimateFeesPerGasParameters<chain, chainOverride, type> | undefined,\r\n  ) => Promise<EstimateFeesPerGasReturnType<type>>\r\n  /**\r\n   * Returns a list of logs or hashes based on a [Filter](/docs/glossary/terms#filter) since the last time it was called.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/getFilterChanges\r\n   * - JSON-RPC Methods: [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges)\r\n   *\r\n   * @remarks\r\n   * A Filter can be created from the following actions:\r\n   *\r\n   * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\r\n   * - [`createContractEventFilter`](https://viem.sh/docs/contract/createContractEventFilter)\r\n   * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\r\n   * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\r\n   *\r\n   * Depending on the type of filter, the return value will be different:\r\n   *\r\n   * - If the filter was created with `createContractEventFilter` or `createEventFilter`, it returns a list of logs.\r\n   * - If the filter was created with `createPendingTransactionFilter`, it returns a list of transaction hashes.\r\n   * - If the filter was created with `createBlockFilter`, it returns a list of block hashes.\r\n   *\r\n   * @param args - {@link GetFilterChangesParameters}\r\n   * @returns Logs or hashes. {@link GetFilterChangesReturnType}\r\n   *\r\n   * @example\r\n   * // Blocks\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const filter = await client.createBlockFilter()\r\n   * const hashes = await client.getFilterChanges({ filter })\r\n   *\r\n   * @example\r\n   * // Contract Events\r\n   * import { createPublicClient, http, parseAbi } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const filter = await client.createContractEventFilter({\r\n   *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\r\n   *   abi: parseAbi(['event Transfer(address indexed, address indexed, uint256)']),\r\n   *   eventName: 'Transfer',\r\n   * })\r\n   * const logs = await client.getFilterChanges({ filter })\r\n   *\r\n   * @example\r\n   * // Raw Events\r\n   * import { createPublicClient, http, parseAbiItem } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const filter = await client.createEventFilter({\r\n   *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\r\n   *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\r\n   * })\r\n   * const logs = await client.getFilterChanges({ filter })\r\n   *\r\n   * @example\r\n   * // Transactions\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const filter = await client.createPendingTransactionFilter()\r\n   * const hashes = await client.getFilterChanges({ filter })\r\n   */\r\n  getFilterChanges: <\r\n    filterType extends FilterType,\r\n    const abi extends Abi | readonly unknown[] | undefined,\r\n    eventName extends string | undefined,\r\n    strict extends boolean | undefined = undefined,\r\n    fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n    toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  >(\r\n    args: GetFilterChangesParameters<\r\n      filterType,\r\n      abi,\r\n      eventName,\r\n      strict,\r\n      fromBlock,\r\n      toBlock\r\n    >,\r\n  ) => Promise<\r\n    GetFilterChangesReturnType<\r\n      filterType,\r\n      abi,\r\n      eventName,\r\n      strict,\r\n      fromBlock,\r\n      toBlock\r\n    >\r\n  >\r\n  /**\r\n   * Returns a list of event logs since the filter was created.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/getFilterLogs\r\n   * - JSON-RPC Methods: [`eth_getFilterLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterlogs)\r\n   *\r\n   * @remarks\r\n   * `getFilterLogs` is only compatible with **event filters**.\r\n   *\r\n   * @param args - {@link GetFilterLogsParameters}\r\n   * @returns A list of event logs. {@link GetFilterLogsReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http, parseAbiItem } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const filter = await client.createEventFilter({\r\n   *   address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\r\n   *   event: parseAbiItem('event Transfer(address indexed, address indexed, uint256)'),\r\n   * })\r\n   * const logs = await client.getFilterLogs({ filter })\r\n   */\r\n  getFilterLogs: <\r\n    const abi extends Abi | readonly unknown[] | undefined,\r\n    eventName extends string | undefined,\r\n    strict extends boolean | undefined = undefined,\r\n    fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n    toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  >(\r\n    args: GetFilterLogsParameters<abi, eventName, strict, fromBlock, toBlock>,\r\n  ) => Promise<\r\n    GetFilterLogsReturnType<abi, eventName, strict, fromBlock, toBlock>\r\n  >\r\n  /**\r\n   * Returns the current price of gas (in wei).\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/getGasPrice\r\n   * - JSON-RPC Methods: [`eth_gasPrice`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gasprice)\r\n   *\r\n   * @returns The gas price (in wei). {@link GetGasPriceReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const gasPrice = await client.getGasPrice()\r\n   */\r\n  getGasPrice: () => Promise<GetGasPriceReturnType>\r\n  /**\r\n   * Returns a list of event logs matching the provided parameters.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/getLogs\r\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/filters-and-logs/event-logs\r\n   * - JSON-RPC Methods: [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)\r\n   *\r\n   * @param args - {@link GetLogsParameters}\r\n   * @returns A list of event logs. {@link GetLogsReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http, parseAbiItem } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const logs = await client.getLogs()\r\n   */\r\n  getLogs: <\r\n    const abiEvent extends AbiEvent | undefined = undefined,\r\n    const abiEvents extends\r\n      | readonly AbiEvent[]\r\n      | readonly unknown[]\r\n      | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\r\n    strict extends boolean | undefined = undefined,\r\n    fromBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n    toBlock extends BlockNumber | BlockTag | undefined = undefined,\r\n  >(\r\n    args?:\r\n      | GetLogsParameters<abiEvent, abiEvents, strict, fromBlock, toBlock>\r\n      | undefined,\r\n  ) => Promise<\r\n    GetLogsReturnType<abiEvent, abiEvents, strict, fromBlock, toBlock>\r\n  >\r\n  /**\r\n   * Returns the account and storage values of the specified account including the Merkle-proof.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/getProof\r\n   * - JSON-RPC Methods:\r\n   *   - Calls [`eth_getProof`](https://eips.ethereum.org/EIPS/eip-1186)\r\n   *\r\n   * @param client - Client to use\r\n   * @param parameters - {@link GetProofParameters}\r\n   * @returns Proof data. {@link GetProofReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const block = await client.getProof({\r\n   *  address: '0x...',\r\n   *  storageKeys: ['0x...'],\r\n   * })\r\n   */\r\n  getProof: (args: GetProofParameters) => Promise<GetProofReturnType>\r\n  /**\r\n   * Returns an estimate for the max priority fee per gas (in wei) for a transaction\r\n   * to be included in the next block.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/estimateMaxPriorityFeePerGas\r\n   *\r\n   * @param client - Client to use\r\n   * @returns An estimate (in wei) for the max priority fee per gas. {@link EstimateMaxPriorityFeePerGasReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const maxPriorityFeePerGas = await client.estimateMaxPriorityFeePerGas()\r\n   * // 10000000n\r\n   */\r\n  estimateMaxPriorityFeePerGas: <\r\n    chainOverride extends Chain | undefined = undefined,\r\n  >(\r\n    args?:\r\n      | EstimateMaxPriorityFeePerGasParameters<chain, chainOverride>\r\n      | undefined,\r\n  ) => Promise<EstimateMaxPriorityFeePerGasReturnType>\r\n  /**\r\n   * Returns the value from a storage slot at a given address.\r\n   *\r\n   * - Docs: https://viem.sh/docs/contract/getStorageAt\r\n   * - JSON-RPC Methods: [`eth_getStorageAt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getstorageat)\r\n   *\r\n   * @param args - {@link GetStorageAtParameters}\r\n   * @returns The value of the storage slot. {@link GetStorageAtReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   * import { getStorageAt } from 'viem/contract'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const code = await client.getStorageAt({\r\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n   *   slot: toHex(0),\r\n   * })\r\n   */\r\n  getStorageAt: (\r\n    args: GetStorageAtParameters,\r\n  ) => Promise<GetStorageAtReturnType>\r\n  /**\r\n   * Returns information about a [Transaction](https://viem.sh/docs/glossary/terms#transaction) given a hash or block identifier.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/getTransaction\r\n   * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/fetching-transactions\r\n   * - JSON-RPC Methods: [`eth_getTransactionByHash`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionByHash)\r\n   *\r\n   * @param args - {@link GetTransactionParameters}\r\n   * @returns The transaction information. {@link GetTransactionReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const transaction = await client.getTransaction({\r\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\r\n   * })\r\n   */\r\n  getTransaction: <blockTag extends BlockTag = 'latest'>(\r\n    args: GetTransactionParameters<blockTag>,\r\n  ) => Promise<GetTransactionReturnType<chain, blockTag>>\r\n  /**\r\n   * Returns the number of blocks passed (confirmations) since the transaction was processed on a block.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/getTransactionConfirmations\r\n   * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/fetching-transactions\r\n   * - JSON-RPC Methods: [`eth_getTransactionConfirmations`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionConfirmations)\r\n   *\r\n   * @param args - {@link GetTransactionConfirmationsParameters}\r\n   * @returns The number of blocks passed since the transaction was processed. If confirmations is 0, then the Transaction has not been confirmed & processed yet. {@link GetTransactionConfirmationsReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const confirmations = await client.getTransactionConfirmations({\r\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\r\n   * })\r\n   */\r\n  getTransactionConfirmations: (\r\n    args: GetTransactionConfirmationsParameters<chain>,\r\n  ) => Promise<GetTransactionConfirmationsReturnType>\r\n  /**\r\n   * Returns the number of [Transactions](https://viem.sh/docs/glossary/terms#transaction) an Account has broadcast / sent.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/getTransactionCount\r\n   * - JSON-RPC Methods: [`eth_getTransactionCount`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactioncount)\r\n   *\r\n   * @param args - {@link GetTransactionCountParameters}\r\n   * @returns The number of transactions an account has sent. {@link GetTransactionCountReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const transactionCount = await client.getTransactionCount({\r\n   *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\r\n   * })\r\n   */\r\n  getTransactionCount: (\r\n    args: GetTransactionCountParameters,\r\n  ) => Promise<GetTransactionCountReturnType>\r\n  /**\r\n   * Returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms#transaction-receipt) given a [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/getTransactionReceipt\r\n   * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/fetching-transactions\r\n   * - JSON-RPC Methods: [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt)\r\n   *\r\n   * @param args - {@link GetTransactionReceiptParameters}\r\n   * @returns The transaction receipt. {@link GetTransactionReceiptReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const transactionReceipt = await client.getTransactionReceipt({\r\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\r\n   * })\r\n   */\r\n  getTransactionReceipt: (\r\n    args: GetTransactionReceiptParameters,\r\n  ) => Promise<GetTransactionReceiptReturnType<chain>>\r\n  /**\r\n   * Similar to [`readContract`](https://viem.sh/docs/contract/readContract), but batches up multiple functions on a contract in a single RPC call via the [`multicall3` contract](https://github.com/mds1/multicall).\r\n   *\r\n   * - Docs: https://viem.sh/docs/contract/multicall\r\n   *\r\n   * @param args - {@link MulticallParameters}\r\n   * @returns An array of results with accompanying status. {@link MulticallReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http, parseAbi } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const abi = parseAbi([\r\n   *   'function balanceOf(address) view returns (uint256)',\r\n   *   'function totalSupply() view returns (uint256)',\r\n   * ])\r\n   * const result = await client.multicall({\r\n   *   contracts: [\r\n   *     {\r\n   *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n   *       abi,\r\n   *       functionName: 'balanceOf',\r\n   *       args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\r\n   *     },\r\n   *     {\r\n   *       address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n   *       abi,\r\n   *       functionName: 'totalSupply',\r\n   *     },\r\n   *   ],\r\n   * })\r\n   * // [{ result: 424122n, status: 'success' }, { result: 1000000n, status: 'success' }]\r\n   */\r\n  multicall: <\r\n    const contracts extends readonly unknown[],\r\n    allowFailure extends boolean = true,\r\n  >(\r\n    args: MulticallParameters<contracts, allowFailure>,\r\n  ) => Promise<MulticallReturnType<contracts, allowFailure>>\r\n  /**\r\n   * Prepares a transaction request for signing.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest\r\n   *\r\n   * @param args - {@link PrepareTransactionRequestParameters}\r\n   * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\r\n   *\r\n   * @example\r\n   * import { createWalletClient, custom } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   chain: mainnet,\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   * const request = await client.prepareTransactionRequest({\r\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\r\n   *   to: '0x0000000000000000000000000000000000000000',\r\n   *   value: 1n,\r\n   * })\r\n   *\r\n   * @example\r\n   * // Account Hoisting\r\n   * import { createWalletClient, http } from 'viem'\r\n   * import { privateKeyToAccount } from 'viem/accounts'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   account: privateKeyToAccount('0x…'),\r\n   *   chain: mainnet,\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   * const request = await client.prepareTransactionRequest({\r\n   *   to: '0x0000000000000000000000000000000000000000',\r\n   *   value: 1n,\r\n   * })\r\n   */\r\n  prepareTransactionRequest: <\r\n    const request extends PrepareTransactionRequestRequest<\r\n      chain,\r\n      chainOverride\r\n    >,\r\n    chainOverride extends Chain | undefined = undefined,\r\n    accountOverride extends Account | Address | undefined = undefined,\r\n  >(\r\n    args: PrepareTransactionRequestParameters<\r\n      chain,\r\n      account,\r\n      chainOverride,\r\n      accountOverride,\r\n      request\r\n    >,\r\n  ) => Promise<\r\n    PrepareTransactionRequestReturnType<\r\n      chain,\r\n      account,\r\n      chainOverride,\r\n      accountOverride,\r\n      request\r\n    >\r\n  >\r\n  /**\r\n   * Calls a read-only function on a contract, and returns the response.\r\n   *\r\n   * - Docs: https://viem.sh/docs/contract/readContract\r\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/reading-contracts\r\n   *\r\n   * @remarks\r\n   * A \"read-only\" function (constant function) on a Solidity contract is denoted by a `view` or `pure` keyword. They can only read the state of the contract, and cannot make any changes to it. Since read-only methods do not change the state of the contract, they do not require any gas to be executed, and can be called by any user without the need to pay for gas.\r\n   *\r\n   * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\r\n   *\r\n   * @param args - {@link ReadContractParameters}\r\n   * @returns The response from the contract. Type is inferred. {@link ReadContractReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http, parseAbi } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   * import { readContract } from 'viem/contract'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const result = await client.readContract({\r\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n   *   abi: parseAbi(['function balanceOf(address) view returns (uint256)']),\r\n   *   functionName: 'balanceOf',\r\n   *   args: ['0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'],\r\n   * })\r\n   * // 424122n\r\n   */\r\n  readContract: <\r\n    const abi extends Abi | readonly unknown[],\r\n    functionName extends ContractFunctionName<abi, 'pure' | 'view'>,\r\n    args extends ContractFunctionArgs<abi, 'pure' | 'view', functionName>,\r\n  >(\r\n    args: ReadContractParameters<abi, functionName, args>,\r\n  ) => Promise<ReadContractReturnType<abi, functionName, args>>\r\n  /**\r\n   * Sends a **signed** transaction to the network\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/wallet/sendRawTransaction\r\n   * - JSON-RPC Method: [`eth_sendRawTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\r\n   *\r\n   * @param client - Client to use\r\n   * @param parameters - {@link SendRawTransactionParameters}\r\n   * @returns The transaction hash. {@link SendRawTransactionReturnType}\r\n   *\r\n   * @example\r\n   * import { createWalletClient, custom } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   * import { sendRawTransaction } from 'viem/wallet'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   chain: mainnet,\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   *\r\n   * const hash = await client.sendRawTransaction({\r\n   *   serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\r\n   * })\r\n   */\r\n  sendRawTransaction: (\r\n    args: SendRawTransactionParameters,\r\n  ) => Promise<SendRawTransactionReturnType>\r\n  /**\r\n   * Simulates/validates a contract interaction. This is useful for retrieving **return data** and **revert reasons** of contract write functions.\r\n   *\r\n   * - Docs: https://viem.sh/docs/contract/simulateContract\r\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/writing-to-contracts\r\n   *\r\n   * @remarks\r\n   * This function does not require gas to execute and _**does not**_ change the state of the blockchain. It is almost identical to [`readContract`](https://viem.sh/docs/contract/readContract), but also supports contract write functions.\r\n   *\r\n   * Internally, uses a [Public Client](https://viem.sh/docs/clients/public) to call the [`call` action](https://viem.sh/docs/actions/public/call) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\r\n   *\r\n   * @param args - {@link SimulateContractParameters}\r\n   * @returns The simulation result and write request. {@link SimulateContractReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const result = await client.simulateContract({\r\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n   *   abi: parseAbi(['function mint(uint32) view returns (uint32)']),\r\n   *   functionName: 'mint',\r\n   *   args: ['69420'],\r\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\r\n   * })\r\n   */\r\n  simulateContract: <\r\n    const abi extends Abi | readonly unknown[],\r\n    functionName extends ContractFunctionName<abi, 'nonpayable' | 'payable'>,\r\n    args extends ContractFunctionArgs<\r\n      abi,\r\n      'nonpayable' | 'payable',\r\n      functionName\r\n    >,\r\n    chainOverride extends Chain | undefined,\r\n    accountOverride extends Account | Address | undefined = undefined,\r\n  >(\r\n    args: SimulateContractParameters<\r\n      abi,\r\n      functionName,\r\n      args,\r\n      chain,\r\n      chainOverride,\r\n      accountOverride\r\n    >,\r\n  ) => Promise<\r\n    SimulateContractReturnType<\r\n      abi,\r\n      functionName,\r\n      args,\r\n      chain,\r\n      account,\r\n      chainOverride,\r\n      accountOverride\r\n    >\r\n  >\r\n  /**\r\n   * Verify that a message was signed by the provided address.\r\n   *\r\n   * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\r\n   *\r\n   * - Docs {@link https://viem.sh/docs/actions/public/verifyMessage}\r\n   *\r\n   * @param parameters - {@link VerifyMessageParameters}\r\n   * @returns Whether or not the signature is valid. {@link VerifyMessageReturnType}\r\n   */\r\n  verifyMessage: (\r\n    args: VerifyMessageParameters,\r\n  ) => Promise<VerifyMessageReturnType>\r\n  /**\r\n   * Verifies [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message was signed.\r\n   *\r\n   * Compatible with Smart Contract Accounts & Externally Owned Accounts via [ERC-6492](https://eips.ethereum.org/EIPS/eip-6492).\r\n   *\r\n   * - Docs {@link https://viem.sh/docs/siwe/actions/verifySiweMessage}\r\n   *\r\n   * @param parameters - {@link VerifySiweMessageParameters}\r\n   * @returns Whether or not the signature is valid. {@link VerifySiweMessageReturnType}\r\n   */\r\n  verifySiweMessage: (\r\n    args: VerifySiweMessageParameters,\r\n  ) => Promise<VerifySiweMessageReturnType>\r\n  /**\r\n   * Verify that typed data was signed by the provided address.\r\n   *\r\n   * - Docs {@link https://viem.sh/docs/actions/public/verifyTypedData}\r\n   *\r\n   * @param parameters - {@link VerifyTypedDataParameters}\r\n   * @returns Whether or not the signature is valid. {@link VerifyTypedDataReturnType}\r\n   */\r\n  verifyTypedData: (\r\n    args: VerifyTypedDataParameters,\r\n  ) => Promise<VerifyTypedDataReturnType>\r\n  /**\r\n   * Destroys a Filter that was created from one of the following Actions:\r\n   *\r\n   * - [`createBlockFilter`](https://viem.sh/docs/actions/public/createBlockFilter)\r\n   * - [`createEventFilter`](https://viem.sh/docs/actions/public/createEventFilter)\r\n   * - [`createPendingTransactionFilter`](https://viem.sh/docs/actions/public/createPendingTransactionFilter)\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/uninstallFilter\r\n   * - JSON-RPC Methods: [`eth_uninstallFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_uninstallFilter)\r\n   *\r\n   * @param args - {@link UninstallFilterParameters}\r\n   * @returns A boolean indicating if the Filter was successfully uninstalled. {@link UninstallFilterReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   * import { createPendingTransactionFilter, uninstallFilter } from 'viem/public'\r\n   *\r\n   * const filter = await client.createPendingTransactionFilter()\r\n   * const uninstalled = await client.uninstallFilter({ filter })\r\n   * // true\r\n   */\r\n  uninstallFilter: (\r\n    args: UninstallFilterParameters,\r\n  ) => Promise<UninstallFilterReturnType>\r\n  /**\r\n   * Waits for the [Transaction](https://viem.sh/docs/glossary/terms#transaction) to be included on a [Block](https://viem.sh/docs/glossary/terms#block) (one confirmation), and then returns the [Transaction Receipt](https://viem.sh/docs/glossary/terms#transaction-receipt). If the Transaction reverts, then the action will throw an error.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/waitForTransactionReceipt\r\n   * - Example: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/sending-transactions\r\n   * - JSON-RPC Methods:\r\n   *   - Polls [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt) on each block until it has been processed.\r\n   *   - If a Transaction has been replaced:\r\n   *     - Calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber) and extracts the transactions\r\n   *     - Checks if one of the Transactions is a replacement\r\n   *     - If so, calls [`eth_getTransactionReceipt`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getTransactionReceipt).\r\n   *\r\n   * @remarks\r\n   * The `waitForTransactionReceipt` action additionally supports Replacement detection (e.g. sped up Transactions).\r\n   *\r\n   * Transactions can be replaced when a user modifies their transaction in their wallet (to speed up or cancel). Transactions are replaced when they are sent from the same nonce.\r\n   *\r\n   * There are 3 types of Transaction Replacement reasons:\r\n   *\r\n   * - `repriced`: The gas price has been modified (e.g. different `maxFeePerGas`)\r\n   * - `cancelled`: The Transaction has been cancelled (e.g. `value === 0n`)\r\n   * - `replaced`: The Transaction has been replaced (e.g. different `value` or `data`)\r\n   *\r\n   * @param args - {@link WaitForTransactionReceiptParameters}\r\n   * @returns The transaction receipt. {@link WaitForTransactionReceiptReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const transactionReceipt = await client.waitForTransactionReceipt({\r\n   *   hash: '0x4ca7ee652d57678f26e887c149ab0735f41de37bcad58c9f6d3ed5824f15b74d',\r\n   * })\r\n   */\r\n  waitForTransactionReceipt: (\r\n    args: WaitForTransactionReceiptParameters<chain>,\r\n  ) => Promise<WaitForTransactionReceiptReturnType<chain>>\r\n  /**\r\n   * Watches and returns incoming block numbers.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/watchBlockNumber\r\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/watching-blocks\r\n   * - JSON-RPC Methods:\r\n   *   - When `poll: true`, calls [`eth_blockNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber) on a polling interval.\r\n   *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\r\n   *\r\n   * @param args - {@link WatchBlockNumberParameters}\r\n   * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlockNumberReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const unwatch = await client.watchBlockNumber({\r\n   *   onBlockNumber: (blockNumber) => console.log(blockNumber),\r\n   * })\r\n   */\r\n  watchBlockNumber: (\r\n    args: WatchBlockNumberParameters,\r\n  ) => WatchBlockNumberReturnType\r\n  /**\r\n   * Watches and returns information for incoming blocks.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/watchBlocks\r\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/blocks/watching-blocks\r\n   * - JSON-RPC Methods:\r\n   *   - When `poll: true`, calls [`eth_getBlockByNumber`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getBlockByNumber) on a polling interval.\r\n   *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newHeads\"` event.\r\n   *\r\n   * @param args - {@link WatchBlocksParameters}\r\n   * @returns A function that can be invoked to stop watching for new block numbers. {@link WatchBlocksReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const unwatch = await client.watchBlocks({\r\n   *   onBlock: (block) => console.log(block),\r\n   * })\r\n   */\r\n  watchBlocks: <\r\n    includeTransactions extends boolean = false,\r\n    blockTag extends BlockTag = 'latest',\r\n  >(\r\n    args: WatchBlocksParameters<\r\n      transport,\r\n      chain,\r\n      includeTransactions,\r\n      blockTag\r\n    >,\r\n  ) => WatchBlocksReturnType\r\n  /**\r\n   * Watches and returns emitted contract event logs.\r\n   *\r\n   * - Docs: https://viem.sh/docs/contract/watchContractEvent\r\n   *\r\n   * @remarks\r\n   * This Action will batch up all the event logs found within the [`pollingInterval`](https://viem.sh/docs/contract/watchContractEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/contract/watchContractEvent#onLogs).\r\n   *\r\n   * `watchContractEvent` will attempt to create an [Event Filter](https://viem.sh/docs/contract/createContractEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchContractEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\r\n   *\r\n   * @param args - {@link WatchContractEventParameters}\r\n   * @returns A function that can be invoked to stop watching for new event logs. {@link WatchContractEventReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http, parseAbi } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const unwatch = client.watchContractEvent({\r\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n   *   abi: parseAbi(['event Transfer(address indexed from, address indexed to, uint256 value)']),\r\n   *   eventName: 'Transfer',\r\n   *   args: { from: '0xc961145a54C96E3aE9bAA048c4F4D6b04C13916b' },\r\n   *   onLogs: (logs) => console.log(logs),\r\n   * })\r\n   */\r\n  watchContractEvent: <\r\n    const abi extends Abi | readonly unknown[],\r\n    eventName extends ContractEventName<abi>,\r\n    strict extends boolean | undefined = undefined,\r\n  >(\r\n    args: WatchContractEventParameters<abi, eventName, strict, transport>,\r\n  ) => WatchContractEventReturnType\r\n  /**\r\n   * Watches and returns emitted [Event Logs](https://viem.sh/docs/glossary/terms#event-log).\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/watchEvent\r\n   * - JSON-RPC Methods:\r\n   *   - **RPC Provider supports `eth_newFilter`:**\r\n   *     - Calls [`eth_newFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newfilter) to create a filter (called on initialize).\r\n   *     - On a polling interval, it will call [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getfilterchanges).\r\n   *   - **RPC Provider does not support `eth_newFilter`:**\r\n   *     - Calls [`eth_getLogs`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs) for each block between the polling interval.\r\n   *\r\n   * @remarks\r\n   * This Action will batch up all the Event Logs found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchEvent#pollinginterval-optional), and invoke them via [`onLogs`](https://viem.sh/docs/actions/public/watchEvent#onLogs).\r\n   *\r\n   * `watchEvent` will attempt to create an [Event Filter](https://viem.sh/docs/actions/public/createEventFilter) and listen to changes to the Filter per polling interval, however, if the RPC Provider does not support Filters (e.g. `eth_newFilter`), then `watchEvent` will fall back to using [`getLogs`](https://viem.sh/docs/actions/public/getLogs) instead.\r\n   *\r\n   * @param args - {@link WatchEventParameters}\r\n   * @returns A function that can be invoked to stop watching for new Event Logs. {@link WatchEventReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const unwatch = client.watchEvent({\r\n   *   onLogs: (logs) => console.log(logs),\r\n   * })\r\n   */\r\n  watchEvent: <\r\n    const abiEvent extends AbiEvent | undefined = undefined,\r\n    const abiEvents extends\r\n      | readonly AbiEvent[]\r\n      | readonly unknown[]\r\n      | undefined = abiEvent extends AbiEvent ? [abiEvent] : undefined,\r\n    strict extends boolean | undefined = undefined,\r\n  >(\r\n    args: WatchEventParameters<abiEvent, abiEvents, strict, transport>,\r\n  ) => WatchEventReturnType\r\n  /**\r\n   * Watches and returns pending transaction hashes.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/watchPendingTransactions\r\n   * - JSON-RPC Methods:\r\n   *   - When `poll: true`\r\n   *     - Calls [`eth_newPendingTransactionFilter`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_newpendingtransactionfilter) to initialize the filter.\r\n   *     - Calls [`eth_getFilterChanges`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getFilterChanges) on a polling interval.\r\n   *   - When `poll: false` & WebSocket Transport, uses a WebSocket subscription via [`eth_subscribe`](https://docs.alchemy.com/reference/eth-subscribe-polygon) and the `\"newPendingTransactions\"` event.\r\n   *\r\n   * @remarks\r\n   * This Action will batch up all the pending transactions found within the [`pollingInterval`](https://viem.sh/docs/actions/public/watchPendingTransactions#pollinginterval-optional), and invoke them via [`onTransactions`](https://viem.sh/docs/actions/public/watchPendingTransactions#ontransactions).\r\n   *\r\n   * @param args - {@link WatchPendingTransactionsParameters}\r\n   * @returns A function that can be invoked to stop watching for new pending transaction hashes. {@link WatchPendingTransactionsReturnType}\r\n   *\r\n   * @example\r\n   * import { createPublicClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createPublicClient({\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const unwatch = await client.watchPendingTransactions({\r\n   *   onTransactions: (hashes) => console.log(hashes),\r\n   * })\r\n   */\r\n  watchPendingTransactions: (\r\n    args: WatchPendingTransactionsParameters<transport>,\r\n  ) => WatchPendingTransactionsReturnType\r\n}\r\n\r\nexport function publicActions<\r\n  transport extends Transport = Transport,\r\n  chain extends Chain | undefined = Chain | undefined,\r\n  account extends Account | undefined = Account | undefined,\r\n>(\r\n  client: Client<transport, chain, account>,\r\n): PublicActions<transport, chain, account> {\r\n  return {\r\n    call: (args) => call(client, args),\r\n    createBlockFilter: () => createBlockFilter(client),\r\n    createContractEventFilter: (args) =>\r\n      createContractEventFilter(client, args),\r\n    createEventFilter: (args) => createEventFilter(client, args),\r\n    createPendingTransactionFilter: () =>\r\n      createPendingTransactionFilter(client),\r\n    estimateContractGas: (args) => estimateContractGas(client, args as any),\r\n    estimateGas: (args) => estimateGas(client, args),\r\n    getBalance: (args) => getBalance(client, args),\r\n    getBlobBaseFee: () => getBlobBaseFee(client),\r\n    getBlock: (args) => getBlock(client, args),\r\n    getBlockNumber: (args) => getBlockNumber(client, args),\r\n    getBlockTransactionCount: (args) => getBlockTransactionCount(client, args),\r\n    getBytecode: (args) => getCode(client, args),\r\n    getChainId: () => getChainId(client),\r\n    getCode: (args) => getCode(client, args),\r\n    getContractEvents: (args) => getContractEvents(client, args),\r\n    getEip712Domain: (args) => getEip712Domain(client, args),\r\n    getEnsAddress: (args) => getEnsAddress(client, args),\r\n    getEnsAvatar: (args) => getEnsAvatar(client, args),\r\n    getEnsName: (args) => getEnsName(client, args),\r\n    getEnsResolver: (args) => getEnsResolver(client, args),\r\n    getEnsText: (args) => getEnsText(client, args),\r\n    getFeeHistory: (args) => getFeeHistory(client, args),\r\n    estimateFeesPerGas: (args) => estimateFeesPerGas(client, args),\r\n    getFilterChanges: (args) => getFilterChanges(client, args),\r\n    getFilterLogs: (args) => getFilterLogs(client, args),\r\n    getGasPrice: () => getGasPrice(client),\r\n    getLogs: (args) => getLogs(client, args as any),\r\n    getProof: (args) => getProof(client, args),\r\n    estimateMaxPriorityFeePerGas: (args) =>\r\n      estimateMaxPriorityFeePerGas(client, args),\r\n    getStorageAt: (args) => getStorageAt(client, args),\r\n    getTransaction: (args) => getTransaction(client, args),\r\n    getTransactionConfirmations: (args) =>\r\n      getTransactionConfirmations(client, args),\r\n    getTransactionCount: (args) => getTransactionCount(client, args),\r\n    getTransactionReceipt: (args) => getTransactionReceipt(client, args),\r\n    multicall: (args) => multicall(client, args),\r\n    prepareTransactionRequest: (args) =>\r\n      prepareTransactionRequest(client as any, args as any) as any,\r\n    readContract: (args) => readContract(client, args),\r\n    sendRawTransaction: (args) => sendRawTransaction(client, args),\r\n    simulateContract: (args) => simulateContract(client, args),\r\n    verifyMessage: (args) => verifyMessage(client, args),\r\n    verifySiweMessage: (args) => verifySiweMessage(client, args),\r\n    verifyTypedData: (args) => verifyTypedData(client, args),\r\n    uninstallFilter: (args) => uninstallFilter(client, args),\r\n    waitForTransactionReceipt: (args) =>\r\n      waitForTransactionReceipt(client, args),\r\n    watchBlocks: (args) => watchBlocks(client, args),\r\n    watchBlockNumber: (args) => watchBlockNumber(client, args),\r\n    watchContractEvent: (args) => watchContractEvent(client, args),\r\n    watchEvent: (args) => watchEvent(client, args),\r\n    watchPendingTransactions: (args) => watchPendingTransactions(client, args),\r\n  }\r\n}\r\n", "import type { Abi } from 'abitype'\r\n\r\nimport type { Account } from '../../accounts/types.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { GetChainParameter } from '../../types/chain.js'\r\nimport type { ContractConstructorArgs } from '../../types/contract.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { UnionEvaluate, UnionOmit } from '../../types/utils.js'\r\nimport { encodeDeployData } from '../../utils/abi/encodeDeployData.js'\r\n\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport {\r\n  type SendTransactionErrorType,\r\n  type SendTransactionParameters,\r\n  type SendTransactionReturnType,\r\n  sendTransaction,\r\n} from './sendTransaction.js'\r\n\r\nexport type DeployContractParameters<\r\n  abi extends Abi | readonly unknown[] = Abi,\r\n  chain extends Chain | undefined = Chain | undefined,\r\n  account extends Account | undefined = Account | undefined,\r\n  chainOverride extends Chain | undefined = Chain | undefined,\r\n  ///\r\n  allArgs = ContractConstructorArgs<abi>,\r\n> = UnionOmit<\r\n  SendTransactionParameters<chain, account, chainOverride>,\r\n  'accessList' | 'chain' | 'to' | 'data'\r\n> &\r\n  GetChainParameter<chain, chainOverride> &\r\n  UnionEvaluate<\r\n    readonly [] extends allArgs\r\n      ? { args?: allArgs | undefined }\r\n      : { args: allArgs }\r\n  > & {\r\n    abi: abi\r\n    bytecode: Hex\r\n  }\r\n\r\nexport type DeployContractReturnType = SendTransactionReturnType\r\n\r\nexport type DeployContractErrorType = SendTransactionErrorType | ErrorType\r\n\r\n/**\r\n * Deploys a contract to the network, given bytecode and constructor arguments.\r\n *\r\n * - Docs: https://viem.sh/docs/contract/deployContract\r\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/deploying-contracts\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link DeployContractParameters}\r\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link DeployContractReturnType}\r\n *\r\n * @example\r\n * import { createWalletClient, http } from 'viem'\r\n * import { privateKeyToAccount } from 'viem/accounts'\r\n * import { mainnet } from 'viem/chains'\r\n * import { deployContract } from 'viem/contract'\r\n *\r\n * const client = createWalletClient({\r\n *   account: privateKeyToAccount('0x…'),\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const hash = await deployContract(client, {\r\n *   abi: [],\r\n *   account: '0x…,\r\n *   bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\r\n * })\r\n */\r\nexport function deployContract<\r\n  const abi extends Abi | readonly unknown[],\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined,\r\n  chainOverride extends Chain | undefined,\r\n>(\r\n  walletClient: Client<Transport, chain, account>,\r\n  parameters: DeployContractParameters<abi, chain, account, chainOverride>,\r\n): Promise<DeployContractReturnType> {\r\n  const { abi, args, bytecode, ...request } =\r\n    parameters as DeployContractParameters\r\n  const calldata = encodeDeployData({ abi, args, bytecode })\r\n  return sendTransaction(walletClient, {\r\n    ...request,\r\n    data: calldata,\r\n  } as unknown as SendTransactionParameters<chain, account, chainOverride>)\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport type { Account } from '../../accounts/types.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport {\r\n  type ChecksumAddressErrorType,\r\n  checksumAddress,\r\n} from '../../utils/address/getAddress.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\n\r\nexport type GetAddressesReturnType = Address[]\r\n\r\nexport type GetAddressesErrorType =\r\n  | RequestErrorType\r\n  | ChecksumAddressErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Returns a list of account addresses owned by the wallet or client.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/wallet/getAddresses\r\n * - JSON-RPC Methods: [`eth_accounts`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_accounts)\r\n *\r\n * @param client - Client to use\r\n * @returns List of account addresses owned by the wallet or client. {@link GetAddressesReturnType}\r\n *\r\n * @example\r\n * import { createWalletClient, custom } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getAddresses } from 'viem/wallet'\r\n *\r\n * const client = createWalletClient({\r\n *   chain: mainnet,\r\n *   transport: custom(window.ethereum),\r\n * })\r\n * const accounts = await getAddresses(client)\r\n */\r\nexport async function getAddresses<\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined = undefined,\r\n>(client: Client<Transport, chain, account>): Promise<GetAddressesReturnType> {\r\n  if (client.account?.type === 'local') return [client.account.address]\r\n  const addresses = await client.request(\r\n    { method: 'eth_accounts' },\r\n    { dedupe: true },\r\n  )\r\n  return addresses.map((address) => checksumAddress(address))\r\n}\r\n", "import type { Account } from '../../accounts/types.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { WalletPermission } from '../../types/eip1193.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\n\r\nexport type GetPermissionsReturnType = WalletPermission[]\r\n\r\nexport type GetPermissionsErrorType = RequestErrorType | ErrorType\r\n\r\n/**\r\n * Gets the wallets current permissions.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/wallet/getPermissions\r\n * - JSON-RPC Methods: [`wallet_getPermissions`](https://eips.ethereum.org/EIPS/eip-2255)\r\n *\r\n * @param client - Client to use\r\n * @returns The wallet permissions. {@link GetPermissionsReturnType}\r\n *\r\n * @example\r\n * import { createWalletClient, custom } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { getPermissions } from 'viem/wallet'\r\n *\r\n * const client = createWalletClient({\r\n *   chain: mainnet,\r\n *   transport: custom(window.ethereum),\r\n * })\r\n * const permissions = await getPermissions(client)\r\n */\r\nexport async function getPermissions<\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined = undefined,\r\n>(client: Client<Transport, chain, account>) {\r\n  const permissions = await client.request(\r\n    { method: 'wallet_getPermissions' },\r\n    { dedupe: true },\r\n  )\r\n  return permissions\r\n}\r\n", "import type { Address } from 'abitype'\r\n\r\nimport type { Account } from '../../accounts/types.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport { getAddress } from '../../utils/address/getAddress.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\n\r\nexport type RequestAddressesReturnType = Address[]\r\n\r\nexport type RequestAddressesErrorType = RequestErrorType | ErrorType\r\n\r\n/**\r\n * Requests a list of accounts managed by a wallet.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/wallet/requestAddresses\r\n * - JSON-RPC Methods: [`eth_requestAccounts`](https://eips.ethereum.org/EIPS/eip-1102)\r\n *\r\n * Sends a request to the wallet, asking for permission to access the user's accounts. After the user accepts the request, it will return a list of accounts (addresses).\r\n *\r\n * This API can be useful for dapps that need to access the user's accounts in order to execute transactions or interact with smart contracts.\r\n *\r\n * @param client - Client to use\r\n * @returns List of accounts managed by a wallet {@link RequestAddressesReturnType}\r\n *\r\n * @example\r\n * import { createWalletClient, custom } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { requestAddresses } from 'viem/wallet'\r\n *\r\n * const client = createWalletClient({\r\n *   chain: mainnet,\r\n *   transport: custom(window.ethereum),\r\n * })\r\n * const accounts = await requestAddresses(client)\r\n */\r\nexport async function requestAddresses<\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined = undefined,\r\n>(\r\n  client: Client<Transport, chain, account>,\r\n): Promise<RequestAddressesReturnType> {\r\n  const addresses = await client.request(\r\n    { method: 'eth_requestAccounts' },\r\n    { dedupe: true, retryCount: 0 },\r\n  )\r\n  return addresses.map((address) => getAddress(address))\r\n}\r\n", "import type { Account } from '../../accounts/types.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { WalletPermission } from '../../types/eip1193.js'\r\nimport type { Prettify } from '../../types/utils.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\n\r\nexport type RequestPermissionsParameters = Prettify<\r\n  {\r\n    eth_accounts: Record<string, any>\r\n  } & {\r\n    [key: string]: Record<string, any>\r\n  }\r\n>\r\nexport type RequestPermissionsReturnType = WalletPermission[]\r\n\r\nexport type RequestPermissionsErrorType = RequestErrorType | ErrorType\r\n\r\n/**\r\n * Requests permissions for a wallet.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/wallet/requestPermissions\r\n * - JSON-RPC Methods: [`wallet_requestPermissions`](https://eips.ethereum.org/EIPS/eip-2255)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link RequestPermissionsParameters}\r\n * @returns The wallet permissions. {@link RequestPermissionsReturnType}\r\n *\r\n * @example\r\n * import { createWalletClient, custom } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { requestPermissions } from 'viem/wallet'\r\n *\r\n * const client = createWalletClient({\r\n *   chain: mainnet,\r\n *   transport: custom(window.ethereum),\r\n * })\r\n * const permissions = await requestPermissions(client, {\r\n *   eth_accounts: {}\r\n * })\r\n */\r\nexport async function requestPermissions<\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined = undefined,\r\n>(\r\n  client: Client<Transport, chain, account>,\r\n  permissions: RequestPermissionsParameters,\r\n) {\r\n  return client.request(\r\n    {\r\n      method: 'wallet_requestPermissions',\r\n      params: [permissions],\r\n    },\r\n    { retryCount: 0 },\r\n  )\r\n}\r\n", "import type { Account } from '../../accounts/types.js'\r\nimport {\r\n  type ParseAccountErrorType,\r\n  parseAccount,\r\n} from '../../accounts/utils/parseAccount.js'\r\nimport type { SignMessageErrorType as SignMessageErrorType_account } from '../../accounts/utils/signMessage.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport { AccountNotFoundError } from '../../errors/account.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { GetAccountParameter } from '../../types/account.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Hex, SignableMessage } from '../../types/misc.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type ToHexErrorType,\r\n  stringToHex,\r\n  toHex,\r\n} from '../../utils/encoding/toHex.js'\r\n\r\nexport type SignMessageParameters<\r\n  account extends Account | undefined = Account | undefined,\r\n> = GetAccountParameter<account> & {\r\n  message: SignableMessage\r\n}\r\n\r\nexport type SignMessageReturnType = Hex\r\n\r\nexport type SignMessageErrorType =\r\n  | ParseAccountErrorType\r\n  | RequestErrorType\r\n  | SignMessageErrorType_account\r\n  | ToHexErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/wallet/signMessage\r\n * - JSON-RPC Methods:\r\n *   - JSON-RPC Accounts: [`personal_sign`](https://docs.metamask.io/guide/signing-data#personal-sign)\r\n *   - Local Accounts: Signs locally. No JSON-RPC request.\r\n *\r\n * With the calculated signature, you can:\r\n * - use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage) to verify the signature,\r\n * - use [`recoverMessageAddress`](https://viem.sh/docs/utilities/recoverMessageAddress) to recover the signing address from a signature.\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link SignMessageParameters}\r\n * @returns The signed message. {@link SignMessageReturnType}\r\n *\r\n * @example\r\n * import { createWalletClient, custom } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { signMessage } from 'viem/wallet'\r\n *\r\n * const client = createWalletClient({\r\n *   chain: mainnet,\r\n *   transport: custom(window.ethereum),\r\n * })\r\n * const signature = await signMessage(client, {\r\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\r\n *   message: 'hello world',\r\n * })\r\n *\r\n * @example\r\n * // Account Hoisting\r\n * import { createWalletClient, custom } from 'viem'\r\n * import { privateKeyToAccount } from 'viem/accounts'\r\n * import { mainnet } from 'viem/chains'\r\n * import { signMessage } from 'viem/wallet'\r\n *\r\n * const client = createWalletClient({\r\n *   account: privateKeyToAccount('0x…'),\r\n *   chain: mainnet,\r\n *   transport: custom(window.ethereum),\r\n * })\r\n * const signature = await signMessage(client, {\r\n *   message: 'hello world',\r\n * })\r\n */\r\nexport async function signMessage<\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined,\r\n>(\r\n  client: Client<Transport, chain, account>,\r\n  {\r\n    account: account_ = client.account,\r\n    message,\r\n  }: SignMessageParameters<account>,\r\n): Promise<SignMessageReturnType> {\r\n  if (!account_)\r\n    throw new AccountNotFoundError({\r\n      docsPath: '/docs/actions/wallet/signMessage',\r\n    })\r\n  const account = parseAccount(account_)\r\n\r\n  if (account.signMessage) return account.signMessage({ message })\r\n\r\n  const message_ = (() => {\r\n    if (typeof message === 'string') return stringToHex(message)\r\n    if (message.raw instanceof Uint8Array) return toHex(message.raw)\r\n    return message.raw\r\n  })()\r\n\r\n  return client.request(\r\n    {\r\n      method: 'personal_sign',\r\n      params: [message_, account.address],\r\n    },\r\n    { retryCount: 0 },\r\n  )\r\n}\r\n", "import type { Account } from '../../accounts/types.js'\r\nimport {\r\n  type ParseAccountErrorType,\r\n  parseAccount,\r\n} from '../../accounts/utils/parseAccount.js'\r\nimport type { SignTransactionErrorType as SignTransactionErrorType_account } from '../../accounts/utils/signTransaction.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport { AccountNotFoundError } from '../../errors/account.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { GetAccountParameter } from '../../types/account.js'\r\nimport type {\r\n  Chain,\r\n  DeriveChain,\r\n  GetChainParameter,\r\n} from '../../types/chain.js'\r\nimport type { GetTransactionRequestKzgParameter } from '../../types/kzg.js'\r\nimport type { RpcTransactionRequest } from '../../types/rpc.js'\r\nimport type {\r\n  TransactionRequest,\r\n  TransactionSerializable,\r\n  TransactionSerialized,\r\n} from '../../types/transaction.js'\r\nimport type { UnionOmit } from '../../types/utils.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type AssertCurrentChainErrorType,\r\n  assertCurrentChain,\r\n} from '../../utils/chain/assertCurrentChain.js'\r\nimport { numberToHex } from '../../utils/encoding/toHex.js'\r\nimport type { NumberToHexErrorType } from '../../utils/encoding/toHex.js'\r\nimport {\r\n  type FormattedTransactionRequest,\r\n  formatTransactionRequest,\r\n} from '../../utils/formatters/transactionRequest.js'\r\nimport { getAction } from '../../utils/getAction.js'\r\nimport {\r\n  type AssertRequestErrorType,\r\n  assertRequest,\r\n} from '../../utils/transaction/assertRequest.js'\r\nimport { type GetChainIdErrorType, getChainId } from '../public/getChainId.js'\r\n\r\ntype SignTransactionRequest<\r\n  chain extends Chain | undefined = Chain | undefined,\r\n  chainOverride extends Chain | undefined = Chain | undefined,\r\n  ///\r\n  _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\r\n> = UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'>\r\n\r\nexport type SignTransactionParameters<\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined,\r\n  chainOverride extends Chain | undefined = Chain | undefined,\r\n  request extends SignTransactionRequest<\r\n    chain,\r\n    chainOverride\r\n  > = SignTransactionRequest<chain, chainOverride>,\r\n> = request &\r\n  GetAccountParameter<account> &\r\n  GetChainParameter<chain, chainOverride> &\r\n  GetTransactionRequestKzgParameter<request>\r\n\r\nexport type SignTransactionReturnType = TransactionSerialized\r\n\r\nexport type SignTransactionErrorType =\r\n  | ParseAccountErrorType\r\n  | AssertRequestErrorType\r\n  | GetChainIdErrorType\r\n  | AssertCurrentChainErrorType\r\n  | SignTransactionErrorType_account\r\n  | NumberToHexErrorType\r\n  | RequestErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Signs a transaction.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/wallet/signTransaction\r\n * - JSON-RPC Methods:\r\n *   - JSON-RPC Accounts: [`eth_signTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\r\n *   - Local Accounts: Signs locally. No JSON-RPC request.\r\n *\r\n * @param args - {@link SignTransactionParameters}\r\n * @returns The signed serialized transaction. {@link SignTransactionReturnType}\r\n *\r\n * @example\r\n * import { createWalletClient, custom } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { signTransaction } from 'viem/actions'\r\n *\r\n * const client = createWalletClient({\r\n *   chain: mainnet,\r\n *   transport: custom(window.ethereum),\r\n * })\r\n * const signature = await signTransaction(client, {\r\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\r\n *   to: '0x0000000000000000000000000000000000000000',\r\n *   value: 1n,\r\n * })\r\n *\r\n * @example\r\n * // Account Hoisting\r\n * import { createWalletClient, http } from 'viem'\r\n * import { privateKeyToAccount } from 'viem/accounts'\r\n * import { mainnet } from 'viem/chains'\r\n * import { signTransaction } from 'viem/actions'\r\n *\r\n * const client = createWalletClient({\r\n *   account: privateKeyToAccount('0x…'),\r\n *   chain: mainnet,\r\n *   transport: custom(window.ethereum),\r\n * })\r\n * const signature = await signTransaction(client, {\r\n *   to: '0x0000000000000000000000000000000000000000',\r\n *   value: 1n,\r\n * })\r\n */\r\nexport async function signTransaction<\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined,\r\n  chainOverride extends Chain | undefined = undefined,\r\n  const request extends SignTransactionRequest<\r\n    chain,\r\n    chainOverride\r\n  > = SignTransactionRequest<chain, chainOverride>,\r\n>(\r\n  client: Client<Transport, chain, account>,\r\n  parameters: SignTransactionParameters<chain, account, chainOverride, request>,\r\n): Promise<SignTransactionReturnType> {\r\n  const {\r\n    account: account_ = client.account,\r\n    chain = client.chain,\r\n    ...transaction\r\n  } = parameters\r\n\r\n  if (!account_)\r\n    throw new AccountNotFoundError({\r\n      docsPath: '/docs/actions/wallet/signTransaction',\r\n    })\r\n  const account = parseAccount(account_)\r\n\r\n  assertRequest({\r\n    account,\r\n    ...parameters,\r\n  })\r\n\r\n  const chainId = await getAction(client, getChainId, 'getChainId')({})\r\n  if (chain !== null)\r\n    assertCurrentChain({\r\n      currentChainId: chainId,\r\n      chain,\r\n    })\r\n\r\n  const formatters = chain?.formatters || client.chain?.formatters\r\n  const format =\r\n    formatters?.transactionRequest?.format || formatTransactionRequest\r\n\r\n  if (account.signTransaction)\r\n    return account.signTransaction(\r\n      {\r\n        ...transaction,\r\n        chainId,\r\n      } as TransactionSerializable,\r\n      { serializer: client.chain?.serializers?.transaction },\r\n    ) as Promise<SignTransactionReturnType>\r\n\r\n  return await client.request(\r\n    {\r\n      method: 'eth_signTransaction',\r\n      params: [\r\n        {\r\n          ...format(transaction as unknown as TransactionRequest),\r\n          chainId: numberToHex(chainId),\r\n          from: account.address,\r\n        } as unknown as RpcTransactionRequest,\r\n      ],\r\n    },\r\n    { retryCount: 0 },\r\n  )\r\n}\r\n", "import type { TypedData } from 'abitype'\r\n\r\nimport type { Account } from '../../accounts/types.js'\r\nimport {\r\n  type ParseAccountErrorType,\r\n  parseAccount,\r\n} from '../../accounts/utils/parseAccount.js'\r\nimport type { SignTypedDataErrorType as SignTypedDataErrorType_account } from '../../accounts/utils/signTypedData.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport {\r\n  AccountNotFoundError,\r\n  type AccountNotFoundErrorType,\r\n} from '../../errors/account.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { GetAccountParameter } from '../../types/account.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { Hex } from '../../types/misc.js'\r\nimport type { TypedDataDefinition } from '../../types/typedData.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport type { IsHexErrorType } from '../../utils/data/isHex.js'\r\nimport type { StringifyErrorType } from '../../utils/stringify.js'\r\nimport {\r\n  type GetTypesForEIP712DomainErrorType,\r\n  type SerializeTypedDataErrorType,\r\n  type ValidateTypedDataErrorType,\r\n  getTypesForEIP712Domain,\r\n  serializeTypedData,\r\n  validateTypedData,\r\n} from '../../utils/typedData.js'\r\n\r\nexport type SignTypedDataParameters<\r\n  typedData extends TypedData | Record<string, unknown> = TypedData,\r\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\r\n  account extends Account | undefined = undefined,\r\n  ///\r\n  primaryTypes = typedData extends TypedData ? keyof typedData : string,\r\n> = TypedDataDefinition<typedData, primaryType, primaryTypes> &\r\n  GetAccountParameter<account>\r\n\r\nexport type SignTypedDataReturnType = Hex\r\n\r\nexport type SignTypedDataErrorType =\r\n  | AccountNotFoundErrorType\r\n  | ParseAccountErrorType\r\n  | GetTypesForEIP712DomainErrorType\r\n  | ValidateTypedDataErrorType\r\n  | StringifyErrorType\r\n  | SignTypedDataErrorType_account\r\n  | IsHexErrorType\r\n  | RequestErrorType\r\n  | SerializeTypedDataErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Signs typed data and calculates an Ethereum-specific signature in [https://eips.ethereum.org/EIPS/eip-712](https://eips.ethereum.org/EIPS/eip-712): `sign(keccak256(\"\\x19\\x01\" ‖ domainSeparator ‖ hashStruct(message)))`\r\n *\r\n * - Docs: https://viem.sh/docs/actions/wallet/signTypedData\r\n * - JSON-RPC Methods:\r\n *   - JSON-RPC Accounts: [`eth_signTypedData_v4`](https://docs.metamask.io/guide/signing-data#signtypeddata-v4)\r\n *   - Local Accounts: Signs locally. No JSON-RPC request.\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link SignTypedDataParameters}\r\n * @returns The signed data. {@link SignTypedDataReturnType}\r\n *\r\n * @example\r\n * import { createWalletClient, custom } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { signTypedData } from 'viem/wallet'\r\n *\r\n * const client = createWalletClient({\r\n *   chain: mainnet,\r\n *   transport: custom(window.ethereum),\r\n * })\r\n * const signature = await signTypedData(client, {\r\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\r\n *   domain: {\r\n *     name: 'Ether Mail',\r\n *     version: '1',\r\n *     chainId: 1,\r\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\r\n *   },\r\n *   types: {\r\n *     Person: [\r\n *       { name: 'name', type: 'string' },\r\n *       { name: 'wallet', type: 'address' },\r\n *     ],\r\n *     Mail: [\r\n *       { name: 'from', type: 'Person' },\r\n *       { name: 'to', type: 'Person' },\r\n *       { name: 'contents', type: 'string' },\r\n *     ],\r\n *   },\r\n *   primaryType: 'Mail',\r\n *   message: {\r\n *     from: {\r\n *       name: 'Cow',\r\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\r\n *     },\r\n *     to: {\r\n *       name: 'Bob',\r\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\r\n *     },\r\n *     contents: 'Hello, Bob!',\r\n *   },\r\n * })\r\n *\r\n * @example\r\n * // Account Hoisting\r\n * import { createWalletClient, http } from 'viem'\r\n * import { privateKeyToAccount } from 'viem/accounts'\r\n * import { mainnet } from 'viem/chains'\r\n * import { signTypedData } from 'viem/wallet'\r\n *\r\n * const client = createWalletClient({\r\n *   account: privateKeyToAccount('0x…'),\r\n *   chain: mainnet,\r\n *   transport: http(),\r\n * })\r\n * const signature = await signTypedData(client, {\r\n *   domain: {\r\n *     name: 'Ether Mail',\r\n *     version: '1',\r\n *     chainId: 1,\r\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\r\n *   },\r\n *   types: {\r\n *     Person: [\r\n *       { name: 'name', type: 'string' },\r\n *       { name: 'wallet', type: 'address' },\r\n *     ],\r\n *     Mail: [\r\n *       { name: 'from', type: 'Person' },\r\n *       { name: 'to', type: 'Person' },\r\n *       { name: 'contents', type: 'string' },\r\n *     ],\r\n *   },\r\n *   primaryType: 'Mail',\r\n *   message: {\r\n *     from: {\r\n *       name: 'Cow',\r\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\r\n *     },\r\n *     to: {\r\n *       name: 'Bob',\r\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\r\n *     },\r\n *     contents: 'Hello, Bob!',\r\n *   },\r\n * })\r\n */\r\nexport async function signTypedData<\r\n  const typedData extends TypedData | Record<string, unknown>,\r\n  primaryType extends keyof typedData | 'EIP712Domain',\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined,\r\n>(\r\n  client: Client<Transport, chain, account>,\r\n  parameters: SignTypedDataParameters<typedData, primaryType, account>,\r\n): Promise<SignTypedDataReturnType> {\r\n  const {\r\n    account: account_ = client.account,\r\n    domain,\r\n    message,\r\n    primaryType,\r\n  } = parameters as unknown as SignTypedDataParameters\r\n\r\n  if (!account_)\r\n    throw new AccountNotFoundError({\r\n      docsPath: '/docs/actions/wallet/signTypedData',\r\n    })\r\n  const account = parseAccount(account_)\r\n\r\n  const types = {\r\n    EIP712Domain: getTypesForEIP712Domain({ domain }),\r\n    ...parameters.types,\r\n  }\r\n\r\n  // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\r\n  // as we can't statically check this with TypeScript.\r\n  validateTypedData({ domain, message, primaryType, types })\r\n\r\n  if (account.signTypedData)\r\n    return account.signTypedData({ domain, message, primaryType, types })\r\n\r\n  const typedData = serializeTypedData({ domain, message, primaryType, types })\r\n  return client.request(\r\n    {\r\n      method: 'eth_signTypedData_v4',\r\n      params: [account.address, typedData],\r\n    },\r\n    { retryCount: 0 },\r\n  )\r\n}\r\n", "import type { Account } from '../../accounts/types.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\nimport {\r\n  type NumberToHexErrorType,\r\n  numberToHex,\r\n} from '../../utils/encoding/toHex.js'\r\n\r\nexport type SwitchChainParameters = {\r\n  /** ID of Chain to switch to */\r\n  id: Chain['id']\r\n}\r\n\r\nexport type SwitchChainErrorType =\r\n  | NumberToHexErrorType\r\n  | RequestErrorType\r\n  | ErrorType\r\n\r\n/**\r\n * Switch the target chain in a wallet.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/wallet/switchChain\r\n * - JSON-RPC Methods: [`eth_switchEthereumChain`](https://eips.ethereum.org/EIPS/eip-3326)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link SwitchChainParameters}\r\n *\r\n * @example\r\n * import { createWalletClient, custom } from 'viem'\r\n * import { mainnet, optimism } from 'viem/chains'\r\n * import { switchChain } from 'viem/wallet'\r\n *\r\n * const client = createWalletClient({\r\n *   chain: mainnet,\r\n *   transport: custom(window.ethereum),\r\n * })\r\n * await switchChain(client, { id: optimism.id })\r\n */\r\nexport async function switchChain<\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined = undefined,\r\n>(client: Client<Transport, chain, account>, { id }: SwitchChainParameters) {\r\n  await client.request(\r\n    {\r\n      method: 'wallet_switchEthereumChain',\r\n      params: [\r\n        {\r\n          chainId: numberToHex(id),\r\n        },\r\n      ],\r\n    },\r\n    { retryCount: 0 },\r\n  )\r\n}\r\n", "import type { Account } from '../../accounts/types.js'\r\nimport type { Client } from '../../clients/createClient.js'\r\nimport type { Transport } from '../../clients/transports/createTransport.js'\r\nimport type { ErrorType } from '../../errors/utils.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type { WatchAssetParams } from '../../types/eip1193.js'\r\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\r\n\r\nexport type WatchAssetParameters = WatchAssetParams\r\nexport type WatchAssetReturnType = boolean\r\nexport type WatchAssetErrorType = RequestErrorType | ErrorType\r\n\r\n/**\r\n * Adds an EVM chain to the wallet.\r\n *\r\n * - Docs: https://viem.sh/docs/actions/wallet/watchAsset\r\n * - JSON-RPC Methods: [`eth_switchEthereumChain`](https://eips.ethereum.org/EIPS/eip-747)\r\n *\r\n * @param client - Client to use\r\n * @param parameters - {@link WatchAssetParameters}\r\n * @returns Boolean indicating if the token was successfully added. {@link WatchAssetReturnType}\r\n *\r\n * @example\r\n * import { createWalletClient, custom } from 'viem'\r\n * import { mainnet } from 'viem/chains'\r\n * import { watchAsset } from 'viem/wallet'\r\n *\r\n * const client = createWalletClient({\r\n *   chain: mainnet,\r\n *   transport: custom(window.ethereum),\r\n * })\r\n * const success = await watchAsset(client, {\r\n *   type: 'ERC20',\r\n *   options: {\r\n *     address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\r\n *     decimals: 18,\r\n *     symbol: 'WETH',\r\n *   },\r\n * })\r\n */\r\nexport async function watchAsset<\r\n  chain extends Chain | undefined,\r\n  account extends Account | undefined = undefined,\r\n>(\r\n  client: Client<Transport, chain, account>,\r\n  params: WatchAssetParameters,\r\n): Promise<WatchAssetReturnType> {\r\n  const added = await client.request(\r\n    {\r\n      method: 'wallet_watchAsset',\r\n      params,\r\n    },\r\n    { retryCount: 0 },\r\n  )\r\n  return added\r\n}\r\n", "import type { Abi, Address, TypedData } from 'abitype'\r\n\r\nimport type { Account } from '../../accounts/types.js'\r\nimport {\r\n  type GetChainIdReturnType,\r\n  getChainId,\r\n} from '../../actions/public/getChainId.js'\r\nimport {\r\n  type AddChainParameters,\r\n  addChain,\r\n} from '../../actions/wallet/addChain.js'\r\nimport {\r\n  type DeployContractParameters,\r\n  type DeployContractReturnType,\r\n  deployContract,\r\n} from '../../actions/wallet/deployContract.js'\r\nimport {\r\n  type GetAddressesReturnType,\r\n  getAddresses,\r\n} from '../../actions/wallet/getAddresses.js'\r\nimport {\r\n  type GetPermissionsReturnType,\r\n  getPermissions,\r\n} from '../../actions/wallet/getPermissions.js'\r\nimport {\r\n  type PrepareTransactionRequestParameters,\r\n  type PrepareTransactionRequestRequest,\r\n  type PrepareTransactionRequestReturnType,\r\n  prepareTransactionRequest,\r\n} from '../../actions/wallet/prepareTransactionRequest.js'\r\nimport {\r\n  type RequestAddressesReturnType,\r\n  requestAddresses,\r\n} from '../../actions/wallet/requestAddresses.js'\r\nimport {\r\n  type RequestPermissionsParameters,\r\n  type RequestPermissionsReturnType,\r\n  requestPermissions,\r\n} from '../../actions/wallet/requestPermissions.js'\r\nimport {\r\n  type SendRawTransactionParameters,\r\n  type SendRawTransactionReturnType,\r\n  sendRawTransaction,\r\n} from '../../actions/wallet/sendRawTransaction.js'\r\nimport {\r\n  type SendTransactionParameters,\r\n  type SendTransactionRequest,\r\n  type SendTransactionReturnType,\r\n  sendTransaction,\r\n} from '../../actions/wallet/sendTransaction.js'\r\nimport {\r\n  type SignMessageParameters,\r\n  type SignMessageReturnType,\r\n  signMessage,\r\n} from '../../actions/wallet/signMessage.js'\r\nimport {\r\n  type SignTransactionParameters,\r\n  type SignTransactionReturnType,\r\n  signTransaction,\r\n} from '../../actions/wallet/signTransaction.js'\r\nimport {\r\n  type SignTypedDataParameters,\r\n  type SignTypedDataReturnType,\r\n  signTypedData,\r\n} from '../../actions/wallet/signTypedData.js'\r\nimport {\r\n  type SwitchChainParameters,\r\n  switchChain,\r\n} from '../../actions/wallet/switchChain.js'\r\nimport {\r\n  type WatchAssetParameters,\r\n  type WatchAssetReturnType,\r\n  watchAsset,\r\n} from '../../actions/wallet/watchAsset.js'\r\nimport {\r\n  type WriteContractParameters,\r\n  type WriteContractReturnType,\r\n  writeContract,\r\n} from '../../actions/wallet/writeContract.js'\r\nimport type { Chain } from '../../types/chain.js'\r\nimport type {\r\n  ContractFunctionArgs,\r\n  ContractFunctionName,\r\n} from '../../types/contract.js'\r\nimport type { Client } from '../createClient.js'\r\nimport type { Transport } from '../transports/createTransport.js'\r\n\r\nexport type WalletActions<\r\n  chain extends Chain | undefined = Chain | undefined,\r\n  account extends Account | undefined = Account | undefined,\r\n> = {\r\n  /**\r\n   * Adds an EVM chain to the wallet.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/wallet/addChain\r\n   * - JSON-RPC Methods: [`eth_addEthereumChain`](https://eips.ethereum.org/EIPS/eip-3085)\r\n   *\r\n   * @param args - {@link AddChainParameters}\r\n   *\r\n   * @example\r\n   * import { createWalletClient, custom } from 'viem'\r\n   * import { optimism } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   * await client.addChain({ chain: optimism })\r\n   */\r\n  addChain: (args: AddChainParameters) => Promise<void>\r\n  /**\r\n   * Deploys a contract to the network, given bytecode and constructor arguments.\r\n   *\r\n   * - Docs: https://viem.sh/docs/contract/deployContract\r\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/deploying-contracts\r\n   *\r\n   * @param args - {@link DeployContractParameters}\r\n   * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link DeployContractReturnType}\r\n   *\r\n   * @example\r\n   * import { createWalletClient, http } from 'viem'\r\n   * import { privateKeyToAccount } from 'viem/accounts'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   account: privateKeyToAccount('0x…'),\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const hash = await client.deployContract({\r\n   *   abi: [],\r\n   *   account: '0x…,\r\n   *   bytecode: '0x608060405260405161083e38038061083e833981016040819052610...',\r\n   * })\r\n   */\r\n  deployContract: <\r\n    const abi extends Abi | readonly unknown[],\r\n    chainOverride extends Chain | undefined,\r\n  >(\r\n    args: DeployContractParameters<abi, chain, account, chainOverride>,\r\n  ) => Promise<DeployContractReturnType>\r\n  /**\r\n   * Returns a list of account addresses owned by the wallet or client.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/wallet/getAddresses\r\n   * - JSON-RPC Methods: [`eth_accounts`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_accounts)\r\n   *\r\n   * @returns List of account addresses owned by the wallet or client. {@link GetAddressesReturnType}\r\n   *\r\n   * @example\r\n   * import { createWalletClient, custom } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   chain: mainnet,\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   * const accounts = await client.getAddresses()\r\n   */\r\n  getAddresses: () => Promise<GetAddressesReturnType>\r\n  /**\r\n   * Returns the chain ID associated with the current network.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/public/getChainId\r\n   * - JSON-RPC Methods: [`eth_chainId`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid)\r\n   *\r\n   * @returns The current chain ID. {@link GetChainIdReturnType}\r\n   *\r\n   * @example\r\n   * import { createWalletClient, http } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   chain: mainnet,\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   * const chainId = await client.getChainId()\r\n   * // 1\r\n   */\r\n  getChainId: () => Promise<GetChainIdReturnType>\r\n  /**\r\n   * Gets the wallets current permissions.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/wallet/getPermissions\r\n   * - JSON-RPC Methods: [`wallet_getPermissions`](https://eips.ethereum.org/EIPS/eip-2255)\r\n   *\r\n   * @returns The wallet permissions. {@link GetPermissionsReturnType}\r\n   *\r\n   * @example\r\n   * import { createWalletClient, custom } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   chain: mainnet,\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   * const permissions = await client.getPermissions()\r\n   */\r\n  getPermissions: () => Promise<GetPermissionsReturnType>\r\n  /**\r\n   * Prepares a transaction request for signing.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/wallet/prepareTransactionRequest\r\n   *\r\n   * @param args - {@link PrepareTransactionRequestParameters}\r\n   * @returns The transaction request. {@link PrepareTransactionRequestReturnType}\r\n   *\r\n   * @example\r\n   * import { createWalletClient, custom } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   chain: mainnet,\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   * const request = await client.prepareTransactionRequest({\r\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\r\n   *   to: '0x0000000000000000000000000000000000000000',\r\n   *   value: 1n,\r\n   * })\r\n   *\r\n   * @example\r\n   * // Account Hoisting\r\n   * import { createWalletClient, http } from 'viem'\r\n   * import { privateKeyToAccount } from 'viem/accounts'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   account: privateKeyToAccount('0x…'),\r\n   *   chain: mainnet,\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   * const request = await client.prepareTransactionRequest({\r\n   *   to: '0x0000000000000000000000000000000000000000',\r\n   *   value: 1n,\r\n   * })\r\n   */\r\n  prepareTransactionRequest: <\r\n    const request extends PrepareTransactionRequestRequest<\r\n      chain,\r\n      chainOverride\r\n    >,\r\n    chainOverride extends Chain | undefined = undefined,\r\n    accountOverride extends Account | Address | undefined = undefined,\r\n  >(\r\n    args: PrepareTransactionRequestParameters<\r\n      chain,\r\n      account,\r\n      chainOverride,\r\n      accountOverride,\r\n      request\r\n    >,\r\n  ) => Promise<\r\n    PrepareTransactionRequestReturnType<\r\n      chain,\r\n      account,\r\n      chainOverride,\r\n      accountOverride,\r\n      request\r\n    >\r\n  >\r\n  /**\r\n   * Requests a list of accounts managed by a wallet.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/wallet/requestAddresses\r\n   * - JSON-RPC Methods: [`eth_requestAccounts`](https://eips.ethereum.org/EIPS/eip-1102)\r\n   *\r\n   * Sends a request to the wallet, asking for permission to access the user's accounts. After the user accepts the request, it will return a list of accounts (addresses).\r\n   *\r\n   * This API can be useful for dapps that need to access the user's accounts in order to execute transactions or interact with smart contracts.\r\n   *\r\n   * @returns List of accounts managed by a wallet {@link RequestAddressesReturnType}\r\n   *\r\n   * @example\r\n   * import { createWalletClient, custom } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   chain: mainnet,\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   * const accounts = await client.requestAddresses()\r\n   */\r\n  requestAddresses: () => Promise<RequestAddressesReturnType>\r\n  /**\r\n   * Requests permissions for a wallet.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/wallet/requestPermissions\r\n   * - JSON-RPC Methods: [`wallet_requestPermissions`](https://eips.ethereum.org/EIPS/eip-2255)\r\n   *\r\n   * @param args - {@link RequestPermissionsParameters}\r\n   * @returns The wallet permissions. {@link RequestPermissionsReturnType}\r\n   *\r\n   * @example\r\n   * import { createWalletClient, custom } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   chain: mainnet,\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   * const permissions = await client.requestPermissions({\r\n   *   eth_accounts: {}\r\n   * })\r\n   */\r\n  requestPermissions: (\r\n    args: RequestPermissionsParameters,\r\n  ) => Promise<RequestPermissionsReturnType>\r\n  /**\r\n   * Sends a **signed** transaction to the network\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/wallet/sendRawTransaction\r\n   * - JSON-RPC Method: [`eth_sendRawTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\r\n   *\r\n   * @param client - Client to use\r\n   * @param parameters - {@link SendRawTransactionParameters}\r\n   * @returns The transaction hash. {@link SendRawTransactionReturnType}\r\n   *\r\n   * @example\r\n   * import { createWalletClient, custom } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   * import { sendRawTransaction } from 'viem/wallet'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   chain: mainnet,\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   *\r\n   * const hash = await client.sendRawTransaction({\r\n   *   serializedTransaction: '0x02f850018203118080825208808080c080a04012522854168b27e5dc3d5839bab5e6b39e1a0ffd343901ce1622e3d64b48f1a04e00902ae0502c4728cbf12156290df99c3ed7de85b1dbfe20b5c36931733a33'\r\n   * })\r\n   */\r\n  sendRawTransaction: (\r\n    args: SendRawTransactionParameters,\r\n  ) => Promise<SendRawTransactionReturnType>\r\n  /**\r\n   * Creates, signs, and sends a new transaction to the network.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/wallet/sendTransaction\r\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/sending-transactions\r\n   * - JSON-RPC Methods:\r\n   *   - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\r\n   *   - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\r\n   *\r\n   * @param args - {@link SendTransactionParameters}\r\n   * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link SendTransactionReturnType}\r\n   *\r\n   * @example\r\n   * import { createWalletClient, custom } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   chain: mainnet,\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   * const hash = await client.sendTransaction({\r\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\r\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\r\n   *   value: 1000000000000000000n,\r\n   * })\r\n   *\r\n   * @example\r\n   * // Account Hoisting\r\n   * import { createWalletClient, http } from 'viem'\r\n   * import { privateKeyToAccount } from 'viem/accounts'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   account: privateKeyToAccount('0x…'),\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const hash = await client.sendTransaction({\r\n   *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\r\n   *   value: 1000000000000000000n,\r\n   * })\r\n   */\r\n  sendTransaction: <\r\n    const request extends SendTransactionRequest<chain, chainOverride>,\r\n    chainOverride extends Chain | undefined = undefined,\r\n  >(\r\n    args: SendTransactionParameters<chain, account, chainOverride, request>,\r\n  ) => Promise<SendTransactionReturnType>\r\n  /**\r\n   * Calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/wallet/signMessage\r\n   * - JSON-RPC Methods:\r\n   *   - JSON-RPC Accounts: [`personal_sign`](https://docs.metamask.io/guide/signing-data#personal-sign)\r\n   *   - Local Accounts: Signs locally. No JSON-RPC request.\r\n   *\r\n   * With the calculated signature, you can:\r\n   * - use [`verifyMessage`](https://viem.sh/docs/utilities/verifyMessage) to verify the signature,\r\n   * - use [`recoverMessageAddress`](https://viem.sh/docs/utilities/recoverMessageAddress) to recover the signing address from a signature.\r\n   *\r\n   * @param args - {@link SignMessageParameters}\r\n   * @returns The signed message. {@link SignMessageReturnType}\r\n   *\r\n   * @example\r\n   * import { createWalletClient, custom } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   chain: mainnet,\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   * const signature = await client.signMessage({\r\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\r\n   *   message: 'hello world',\r\n   * })\r\n   *\r\n   * @example\r\n   * // Account Hoisting\r\n   * import { createWalletClient, http } from 'viem'\r\n   * import { privateKeyToAccount } from 'viem/accounts'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   account: privateKeyToAccount('0x…'),\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const signature = await client.signMessage({\r\n   *   message: 'hello world',\r\n   * })\r\n   */\r\n  signMessage: (\r\n    args: SignMessageParameters<account>,\r\n  ) => Promise<SignMessageReturnType>\r\n  /**\r\n   * Signs a transaction.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/wallet/signTransaction\r\n   * - JSON-RPC Methods:\r\n   *   - JSON-RPC Accounts: [`eth_signTransaction`](https://ethereum.github.io/execution-apis/api-documentation/)\r\n   *   - Local Accounts: Signs locally. No JSON-RPC request.\r\n   *\r\n   * @param args - {@link SignTransactionParameters}\r\n   * @returns The signed message. {@link SignTransactionReturnType}\r\n   *\r\n   * @example\r\n   * import { createWalletClient, custom } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   chain: mainnet,\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   * const request = await client.prepareTransactionRequest({\r\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\r\n   *   to: '0x0000000000000000000000000000000000000000',\r\n   *   value: 1n,\r\n   * })\r\n   * const signature = await client.signTransaction(request)\r\n   *\r\n   * @example\r\n   * // Account Hoisting\r\n   * import { createWalletClient, http } from 'viem'\r\n   * import { privateKeyToAccount } from 'viem/accounts'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   account: privateKeyToAccount('0x…'),\r\n   *   chain: mainnet,\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   * const request = await client.prepareTransactionRequest({\r\n   *   to: '0x0000000000000000000000000000000000000000',\r\n   *   value: 1n,\r\n   * })\r\n   * const signature = await client.signTransaction(request)\r\n   */\r\n  signTransaction: <chainOverride extends Chain | undefined>(\r\n    args: SignTransactionParameters<chain, account, chainOverride>,\r\n  ) => Promise<SignTransactionReturnType>\r\n  /**\r\n   * Signs typed data and calculates an Ethereum-specific signature in [EIP-191 format](https://eips.ethereum.org/EIPS/eip-191): `keccak256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))`.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/wallet/signTypedData\r\n   * - JSON-RPC Methods:\r\n   *   - JSON-RPC Accounts: [`eth_signTypedData_v4`](https://docs.metamask.io/guide/signing-data#signtypeddata-v4)\r\n   *   - Local Accounts: Signs locally. No JSON-RPC request.\r\n   *\r\n   * @param client - Client to use\r\n   * @param args - {@link SignTypedDataParameters}\r\n   * @returns The signed data. {@link SignTypedDataReturnType}\r\n   *\r\n   * @example\r\n   * import { createWalletClient, custom } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   chain: mainnet,\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   * const signature = await client.signTypedData({\r\n   *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\r\n   *   domain: {\r\n   *     name: 'Ether Mail',\r\n   *     version: '1',\r\n   *     chainId: 1,\r\n   *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\r\n   *   },\r\n   *   types: {\r\n   *     Person: [\r\n   *       { name: 'name', type: 'string' },\r\n   *       { name: 'wallet', type: 'address' },\r\n   *     ],\r\n   *     Mail: [\r\n   *       { name: 'from', type: 'Person' },\r\n   *       { name: 'to', type: 'Person' },\r\n   *       { name: 'contents', type: 'string' },\r\n   *     ],\r\n   *   },\r\n   *   primaryType: 'Mail',\r\n   *   message: {\r\n   *     from: {\r\n   *       name: 'Cow',\r\n   *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\r\n   *     },\r\n   *     to: {\r\n   *       name: 'Bob',\r\n   *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\r\n   *     },\r\n   *     contents: 'Hello, Bob!',\r\n   *   },\r\n   * })\r\n   *\r\n   * @example\r\n   * // Account Hoisting\r\n   * import { createWalletClient, http } from 'viem'\r\n   * import { privateKeyToAccount } from 'viem/accounts'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   account: privateKeyToAccount('0x…'),\r\n   *   chain: mainnet,\r\n   *   transport: http(),\r\n   * })\r\n   * const signature = await client.signTypedData({\r\n   *   domain: {\r\n   *     name: 'Ether Mail',\r\n   *     version: '1',\r\n   *     chainId: 1,\r\n   *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\r\n   *   },\r\n   *   types: {\r\n   *     Person: [\r\n   *       { name: 'name', type: 'string' },\r\n   *       { name: 'wallet', type: 'address' },\r\n   *     ],\r\n   *     Mail: [\r\n   *       { name: 'from', type: 'Person' },\r\n   *       { name: 'to', type: 'Person' },\r\n   *       { name: 'contents', type: 'string' },\r\n   *     ],\r\n   *   },\r\n   *   primaryType: 'Mail',\r\n   *   message: {\r\n   *     from: {\r\n   *       name: 'Cow',\r\n   *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\r\n   *     },\r\n   *     to: {\r\n   *       name: 'Bob',\r\n   *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\r\n   *     },\r\n   *     contents: 'Hello, Bob!',\r\n   *   },\r\n   * })\r\n   */\r\n  signTypedData: <\r\n    const typedData extends TypedData | { [key: string]: unknown },\r\n    primaryType extends string,\r\n  >(\r\n    args: SignTypedDataParameters<typedData, primaryType, account>,\r\n  ) => Promise<SignTypedDataReturnType>\r\n  /**\r\n   * Switch the target chain in a wallet.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/wallet/switchChain\r\n   * - JSON-RPC Methods: [`eth_switchEthereumChain`](https://eips.ethereum.org/EIPS/eip-3326)\r\n   *\r\n   * @param args - {@link SwitchChainParameters}\r\n   *\r\n   * @example\r\n   * import { createWalletClient, custom } from 'viem'\r\n   * import { mainnet, optimism } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   chain: mainnet,\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   * await client.switchChain({ id: optimism.id })\r\n   */\r\n  switchChain: (args: SwitchChainParameters) => Promise<void>\r\n  /**\r\n   * Adds an EVM chain to the wallet.\r\n   *\r\n   * - Docs: https://viem.sh/docs/actions/wallet/watchAsset\r\n   * - JSON-RPC Methods: [`eth_switchEthereumChain`](https://eips.ethereum.org/EIPS/eip-747)\r\n   *\r\n   * @param args - {@link WatchAssetParameters}\r\n   * @returns Boolean indicating if the token was successfully added. {@link WatchAssetReturnType}\r\n   *\r\n   * @example\r\n   * import { createWalletClient, custom } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   chain: mainnet,\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   * const success = await client.watchAsset({\r\n   *   type: 'ERC20',\r\n   *   options: {\r\n   *     address: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\r\n   *     decimals: 18,\r\n   *     symbol: 'WETH',\r\n   *   },\r\n   * })\r\n   */\r\n  watchAsset: (args: WatchAssetParameters) => Promise<WatchAssetReturnType>\r\n  /**\r\n   * Executes a write function on a contract.\r\n   *\r\n   * - Docs: https://viem.sh/docs/contract/writeContract\r\n   * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/contracts/writing-to-contracts\r\n   *\r\n   * A \"write\" function on a Solidity contract modifies the state of the blockchain. These types of functions require gas to be executed, and hence a [Transaction](https://viem.sh/docs/glossary/terms) is needed to be broadcast in order to change the state.\r\n   *\r\n   * Internally, uses a [Wallet Client](https://viem.sh/docs/clients/wallet) to call the [`sendTransaction` action](https://viem.sh/docs/actions/wallet/sendTransaction) with [ABI-encoded `data`](https://viem.sh/docs/contract/encodeFunctionData).\r\n   *\r\n   * __Warning: The `write` internally sends a transaction – it does not validate if the contract write will succeed (the contract may throw an error). It is highly recommended to [simulate the contract write with `contract.simulate`](https://viem.sh/docs/contract/writeContract#usage) before you execute it.__\r\n   *\r\n   * @param args - {@link WriteContractParameters}\r\n   * @returns A [Transaction Hash](https://viem.sh/docs/glossary/terms#hash). {@link WriteContractReturnType}\r\n   *\r\n   * @example\r\n   * import { createWalletClient, custom, parseAbi } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   chain: mainnet,\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   * const hash = await client.writeContract({\r\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n   *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\r\n   *   functionName: 'mint',\r\n   *   args: [69420],\r\n   * })\r\n   *\r\n   * @example\r\n   * // With Validation\r\n   * import { createWalletClient, custom, parseAbi } from 'viem'\r\n   * import { mainnet } from 'viem/chains'\r\n   *\r\n   * const client = createWalletClient({\r\n   *   chain: mainnet,\r\n   *   transport: custom(window.ethereum),\r\n   * })\r\n   * const { request } = await client.simulateContract({\r\n   *   address: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2',\r\n   *   abi: parseAbi(['function mint(uint32 tokenId) nonpayable']),\r\n   *   functionName: 'mint',\r\n   *   args: [69420],\r\n   * }\r\n   * const hash = await client.writeContract(request)\r\n   */\r\n  writeContract: <\r\n    const abi extends Abi | readonly unknown[],\r\n    functionName extends ContractFunctionName<abi, 'payable' | 'nonpayable'>,\r\n    args extends ContractFunctionArgs<\r\n      abi,\r\n      'payable' | 'nonpayable',\r\n      functionName\r\n    >,\r\n    chainOverride extends Chain | undefined = undefined,\r\n  >(\r\n    args: WriteContractParameters<\r\n      abi,\r\n      functionName,\r\n      args,\r\n      chain,\r\n      account,\r\n      chainOverride\r\n    >,\r\n  ) => Promise<WriteContractReturnType>\r\n}\r\n\r\nexport function walletActions<\r\n  transport extends Transport,\r\n  chain extends Chain | undefined = Chain | undefined,\r\n  account extends Account | undefined = Account | undefined,\r\n>(client: Client<transport, chain, account>): WalletActions<chain, account> {\r\n  return {\r\n    addChain: (args) => addChain(client, args),\r\n    deployContract: (args) => deployContract(client, args),\r\n    getAddresses: () => getAddresses(client),\r\n    getChainId: () => getChainId(client),\r\n    getPermissions: () => getPermissions(client),\r\n    prepareTransactionRequest: (args) =>\r\n      prepareTransactionRequest(client as any, args as any) as any,\r\n    requestAddresses: () => requestAddresses(client),\r\n    requestPermissions: (args) => requestPermissions(client, args),\r\n    sendRawTransaction: (args) => sendRawTransaction(client, args),\r\n    sendTransaction: (args) => sendTransaction(client, args),\r\n    signMessage: (args) => signMessage(client, args),\r\n    signTransaction: (args) => signTransaction(client, args),\r\n    signTypedData: (args) => signTypedData(client, args),\r\n    switchChain: (args) => switchChain(client, args),\r\n    watchAsset: (args) => watchAsset(client, args),\r\n    writeContract: (args) => writeContract(client, args as any),\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["shouldRetry", "uid", "size", "uid", "body", "response", "wait", "body", "getSocket", "error", "webSocket", "abi", "abi", "abi", "docsPath", "err", "abi", "docsPath", "abi", "abi", "abiItem", "eventName", "index", "value", "input", "event", "abi", "abi", "abi", "listeners", "cleanup", "poll", "promiseCache", "cacheKey", "abi", "transport", "eventName", "args", "docsPath", "cause", "abi", "key", "fetch", "transport", "transports_", "sample", "custom", "res", "event", "struct", "index", "abi", "result", "verifyHash", "verifyMessage", "verifyHash", "verifyTypedData", "verifyHash", "transport", "block", "transport", "transport", "event", "args", "verifyHash", "verifyMessage", "verifyTypedData", "abi"]
}
