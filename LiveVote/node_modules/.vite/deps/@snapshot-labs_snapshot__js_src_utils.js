import {
  AbiCoder,
  BigNumber,
  Contract,
  Contract2,
  Interface,
  RpcProvider,
  StaticJsonRpcProvider,
  TypedDataEncoder,
  arrayify,
  concat,
  ensNormalize,
  getAddress,
  hexlify,
  isAddress,
  namehash,
  parseUnits,
  require_browser_ponyfill,
  require_lib,
  require_lodash,
  typedData_exports,
  validateAndParseAddress,
  verifyTypedData
} from "./chunk-TKEAZDB3.js";
import "./chunk-5X6JZONF.js";
import {
  require_dist
} from "./chunk-CN3XCBG7.js";
import {
  require_dist as require_dist2
} from "./chunk-BFN4DCF7.js";
import {
  require_ajv
} from "./chunk-K72AHHLM.js";
import "./chunk-JXFN4W2G.js";
import "./chunk-X4U2CYTL.js";
import "./chunk-LGQAT2JO.js";
import {
  __export,
  __publicField,
  __toESM
} from "./chunk-256EKJAK.js";

// node_modules/@snapshot-labs/snapshot.js/src/utils.ts
var import_cross_fetch = __toESM(require_browser_ponyfill());
var import_json_to_graphql_query = __toESM(require_lib());
var import_ajv = __toESM(require_ajv());
var import_ajv_formats = __toESM(require_dist());
var import_ajv_errors = __toESM(require_dist2());

// node_modules/@snapshot-labs/snapshot.js/src/utils/multicaller.ts
var import_lodash = __toESM(require_lodash());
var Multicaller = class {
  constructor(network, provider, abi, options) {
    __publicField(this, "network");
    __publicField(this, "provider");
    __publicField(this, "abi");
    __publicField(this, "options", {});
    __publicField(this, "calls", []);
    __publicField(this, "paths", []);
    this.network = network;
    this.provider = provider;
    this.abi = abi;
    this.options = options || {};
  }
  call(path, address, fn, params) {
    this.calls.push([address, fn, params]);
    this.paths.push(path);
    return this;
  }
  async execute(from) {
    const obj = from || {};
    const result = await multicall(
      this.network,
      this.provider,
      this.abi,
      this.calls,
      this.options
    );
    result.forEach((r, i) => (0, import_lodash.default)(obj, this.paths[i], r.length > 1 ? r : r[0]));
    this.calls = [];
    this.paths = [];
    return obj;
  }
};

// node_modules/@snapshot-labs/snapshot.js/src/utils/blockfinder.ts
var cache = {};
var expirationTime = 0;
async function getSnapshots(network, snapshot, provider, networks, options = {}) {
  const snapshots = {};
  networks.forEach((n) => snapshots[n] = "latest");
  if (snapshot === "latest") return snapshots;
  const cacheKey = `${network}-${snapshot}-${networks.join("-")}`;
  const cachedEntry = cache[cacheKey];
  const now = Date.now();
  if (cachedEntry && expirationTime > now) {
    return cachedEntry;
  }
  if (expirationTime < now) {
    cache = {};
    expirationTime = now + 60 * 60 * 1e3 - now % (60 * 60 * 1e3);
  }
  snapshots[network] = snapshot;
  const networkIn = Object.keys(snapshots).filter((s) => network !== s);
  if (networkIn.length === 0) return snapshots;
  const block = await provider.getBlock(snapshot);
  const query = {
    blocks: {
      __args: {
        where: {
          ts: block.timestamp,
          network_in: networkIn
        }
      },
      network: true,
      number: true
    }
  };
  const url = options.blockFinderUrl || "https://blockfinder.snapshot.org";
  const data = await subgraphRequest(url, query);
  data.blocks.forEach((block2) => snapshots[block2.network] = block2.number);
  cache[cacheKey] = snapshots;
  return snapshots;
}

// node_modules/@snapshot-labs/snapshot.js/src/utils/provider.ts
var providers = {};
var DEFAULT_BROVIDER_URL = "https://rpc.snapshot.org";
function getProvider(network, { broviderUrl = DEFAULT_BROVIDER_URL } = {}) {
  const url = `${broviderUrl}/${network}`;
  if (!providers[network])
    providers[network] = new StaticJsonRpcProvider(
      {
        url,
        timeout: 25e3,
        allowGzip: true
      },
      Number(network)
    );
  return providers[network];
}

// node_modules/@snapshot-labs/snapshot.js/src/utils/web3.ts
async function signMessage(web3, msg, address) {
  msg = hexlify(new Buffer(msg, "utf8"));
  return await web3.send("personal_sign", [msg, address]);
}
async function getBlockNumber(provider) {
  try {
    const blockNumber = await provider.getBlockNumber();
    return parseInt(blockNumber);
  } catch (e) {
    return Promise.reject();
  }
}

// node_modules/@snapshot-labs/snapshot.js/src/verify/starknet.ts
var starknet_exports = {};
__export(starknet_exports, {
  default: () => verify,
  getHash: () => getHash,
  isStarknetMessage: () => isStarknetMessage
});
var RPC_URLS = {
  SN_MAIN: "https://starknet-mainnet.public.blastapi.io",
  SN_SEPOLIA: "https://starknet-sepolia.public.blastapi.io"
};
var ABI = [
  {
    name: "argent::common::account::IAccount",
    type: "interface",
    items: [
      {
        name: "is_valid_signature",
        type: "function",
        inputs: [
          {
            name: "hash",
            type: "core::felt252"
          },
          {
            name: "signature",
            type: "core::array::Array::<core::felt252>"
          }
        ],
        outputs: [
          {
            type: "core::felt252"
          }
        ],
        state_mutability: "view"
      }
    ]
  }
];
function getProvider2(network, options) {
  if (!RPC_URLS[network]) throw new Error("Invalid network");
  return new RpcProvider({
    nodeUrl: (options == null ? void 0 : options.broviderUrl) ?? RPC_URLS[network]
  });
}
function isStarknetMessage(data) {
  return !!data.primaryType && !!data.types.StarkNetDomain;
}
function getHash(data, address) {
  const { domain, types, primaryType, message } = data;
  return typedData_exports.getMessageHash(
    { types, primaryType, domain, message },
    address
  );
}
async function verify(address, sig, data, network = "SN_MAIN", options = {}) {
  try {
    const contractAccount = new Contract2(
      ABI,
      address,
      getProvider2(network, options)
    );
    if (sig.length < 2) {
      throw new Error("Invalid signature format");
    }
    const result = await contractAccount.is_valid_signature(
      getHash(data, address),
      sig.slice(-2)
    );
    return BigNumber.from(result).eq(BigNumber.from("370462705988"));
  } catch (e) {
    if (e.message.includes("Contract not found")) {
      throw new Error("Contract not deployed");
    }
    throw e;
  }
}

// node_modules/@snapshot-labs/snapshot.js/src/verify/evm.ts
var evm_exports = {};
__export(evm_exports, {
  default: () => verify2,
  getHash: () => getHash2
});
var ERC6492_DETECTION_SUFFIX = "6492649264926492649264926492649264926492649264926492649264926492";
function isEqual(a, b) {
  return a.toLowerCase() === b.toLowerCase();
}
function getHash2(data) {
  const { domain, types, message } = data;
  return TypedDataEncoder.hash(domain, types, message);
}
async function verify2(address, sig, data, network = "1", options = {}) {
  const { domain, types, message } = data;
  try {
    const recoverAddress = verifyTypedData(domain, types, message, sig);
    if (isEqual(address, recoverAddress)) return true;
  } catch (e) {
  }
  const provider = getProvider(network, options);
  const hash = getHash2(data);
  if (sig.endsWith(ERC6492_DETECTION_SUFFIX)) {
    try {
      return "0x01" === await provider.call({
        data: concat([
          "0x60806040523480156200001157600080fd5b50604051620007003803806200070083398101604081905262000034916200056f565b6000620000438484846200004f565b9050806000526001601ff35b600080846001600160a01b0316803b806020016040519081016040528181526000908060200190933c90507f6492649264926492649264926492649264926492649264926492649264926492620000a68462000451565b036200021f57600060608085806020019051810190620000c79190620005ce565b8651929550909350915060000362000192576000836001600160a01b031683604051620000f5919062000643565b6000604051808303816000865af19150503d806000811462000134576040519150601f19603f3d011682016040523d82523d6000602084013e62000139565b606091505b5050905080620001905760405162461bcd60e51b815260206004820152601e60248201527f5369676e617475726556616c696461746f723a206465706c6f796d656e74000060448201526064015b60405180910390fd5b505b604051630b135d3f60e11b808252906001600160a01b038a1690631626ba7e90620001c4908b90869060040162000661565b602060405180830381865afa158015620001e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200020891906200069d565b6001600160e01b031916149450505050506200044a565b805115620002b157604051630b135d3f60e11b808252906001600160a01b03871690631626ba7e9062000259908890889060040162000661565b602060405180830381865afa15801562000277573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200029d91906200069d565b6001600160e01b031916149150506200044a565b8251604114620003195760405162461bcd60e51b815260206004820152603a6024820152600080516020620006e083398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e677468000000000000606482015260840162000187565b620003236200046b565b506020830151604080850151855186939260009185919081106200034b576200034b620006c9565b016020015160f81c9050601b81148015906200036b57508060ff16601c14155b15620003cf5760405162461bcd60e51b815260206004820152603b6024820152600080516020620006e083398151915260448201527f3a20696e76616c6964207369676e617475726520762076616c75650000000000606482015260840162000187565b6040805160008152602081018083528a905260ff83169181019190915260608101849052608081018390526001600160a01b038a169060019060a0016020604051602081039080840390855afa1580156200042e573d6000803e3d6000fd5b505050602060405103516001600160a01b031614955050505050505b9392505050565b60006020825110156200046357600080fd5b508051015190565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b03811681146200049f57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004d5578181015183820152602001620004bb565b50506000910152565b600082601f830112620004f057600080fd5b81516001600160401b03808211156200050d576200050d620004a2565b604051601f8301601f19908116603f01168101908282118183101715620005385762000538620004a2565b816040528381528660208588010111156200055257600080fd5b62000565846020830160208901620004b8565b9695505050505050565b6000806000606084860312156200058557600080fd5b8351620005928162000489565b6020850151604086015191945092506001600160401b03811115620005b657600080fd5b620005c486828701620004de565b9150509250925092565b600080600060608486031215620005e457600080fd5b8351620005f18162000489565b60208501519093506001600160401b03808211156200060f57600080fd5b6200061d87838801620004de565b935060408601519150808211156200063457600080fd5b50620005c486828701620004de565b6000825162000657818460208701620004b8565b9190910192915050565b828152604060208201526000825180604084015262000688816060850160208701620004b8565b601f01601f1916919091016060019392505050565b600060208284031215620006b057600080fd5b81516001600160e01b0319811681146200044a57600080fd5b634e487b7160e01b600052603260045260246000fdfe5369676e617475726556616c696461746f72237265636f7665725369676e6572",
          new AbiCoder().encode(
            ["address", "bytes32", "bytes"],
            [address, arrayify(hash), sig]
          )
        ])
      });
    } catch (error) {
      return false;
    }
  }
  if (await verifyDefault(address, sig, hash, provider)) return true;
  return await verifyOldVersion(address, sig, hash, provider);
}
async function verifyDefault(address, sig, hash, provider) {
  let returnValue;
  const magicValue = "0x1626ba7e";
  const abi = "function isValidSignature(bytes32 _hash, bytes memory _signature) public view returns (bytes4 magicValue)";
  try {
    returnValue = await call(
      provider,
      [abi],
      [address, "isValidSignature", [arrayify(hash), sig]]
    );
  } catch (e) {
    if (e.message.startsWith("missing revert data in call exception")) {
      return false;
    }
    throw e;
  }
  return isEqual(returnValue, magicValue);
}
async function verifyOldVersion(address, sig, hash, provider) {
  const magicValue = "0x20c13b0b";
  const abi = "function isValidSignature(bytes _hash, bytes memory _signature) public view returns (bytes4 magicValue)";
  const returnValue = await call(
    provider,
    [abi],
    [address, "isValidSignature", [arrayify(hash), sig]]
  );
  return isEqual(returnValue, magicValue);
}

// node_modules/@snapshot-labs/snapshot.js/src/verify/index.ts
function getHash3(data, address) {
  const networkType = isStarknetMessage(data) ? starknet_exports : evm_exports;
  return networkType.getHash(data, address);
}
async function verify3(address, sig, data, network = "1", options = {}) {
  if (!isStarknetAddress(address) && !isEvmAddress(address)) {
    throw new Error("Invalid address");
  }
  const networkType = isStarknetMessage(data) ? starknet_exports : evm_exports;
  return await networkType.default(
    address,
    sig,
    data,
    network,
    options
  );
}

// node_modules/@snapshot-labs/snapshot.js/src/gateways.json
var gateways_default = [
  "snapshot.4everland.link",
  "ipfs.io",
  "ipfs.fleek.co",
  "gateway.pinata.cloud",
  "dweb.link",
  "ipfs.infura.io"
];

// node_modules/@snapshot-labs/snapshot.js/src/networks.json
var networks_default = {
  "1": {
    key: "1",
    name: "Ethereum",
    chainId: 1,
    network: "homestead",
    multicall: "0xeefba1e63905ef1d7acba5a8513c70307c1ce441",
    ensResolvers: [
      "0x231b0Ee14048e9dCcD1d247744d114a4EB5E8E63",
      "0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41"
    ],
    ensNameWrapper: "0xD4416b13d2b3a9aBae7AcD5D6C2BbDBE25686401",
    ensSubgraph: "https://subgrapher.snapshot.org/subgraph/arbitrum/5XqPmWe6gjyrJtFn9cLy237i4cWw2j9HcUJEXsP5qGtH",
    rpc: [
      "https://rpc.ankr.com/eth",
      {
        url: "https://api-geth-archive.ankr.com",
        user: "balancer_user",
        password: "balancerAnkr20201015"
      },
      "https://speedy-nodes-nyc.moralis.io/b9aed21e7bb7bdeb35972c9a/eth/mainnet/archive",
      "https://apis.ankr.com/e62bc219f9c9462b8749defe472d2dc5/6106d4a3ec1d1bcc87ec72158f8fd089/eth/archive/main",
      "https://eth-archival.gateway.pokt.network/v1/5f76124fb90218002e9ce985",
      "https://eth-mainnet.alchemyapi.io/v2/4bdDVB5QAaorY2UE-GBUbM2yQB3QJqzv"
    ],
    light: [
      "https://cloudflare-eth.com"
    ],
    ws: [
      "wss://eth-mainnet.ws.alchemyapi.io/v2/4bdDVB5QAaorY2UE-GBUbM2yQB3QJqzv"
    ],
    explorer: {
      url: "https://etherscan.io",
      apiUrl: "https://api.etherscan.io"
    },
    start: 7929876,
    logo: "ipfs://bafkreid7ndxh6y2ljw2jhbisodiyrhcy2udvnwqgon5wgells3kh4si5z4"
  },
  "8": {
    key: "8",
    name: "Ubiq",
    chainId: 8,
    network: "Ubiq",
    multicall: "0x6668750957e4083725926B71C41bDF1434C73262",
    rpc: [
      "https://rpc.octano.dev"
    ],
    ws: [
      "wss://ws.octano.dev"
    ],
    explorer: {
      url: "https://ubiqscan.io"
    },
    start: 1,
    logo: "ipfs://Qmec3HLoN4QhwZAhw4XTi2aN8Wwmcko5hHN22sHARzb9tw"
  },
  "10": {
    key: "10",
    name: "Optimism",
    chainId: 10,
    network: "Optimism mainnet",
    multicall: "0x35A6Cdb2C9AD4a45112df4a04147EB07dFA01aB7",
    rpc: [
      "https://opt-mainnet.g.alchemy.com/v2/JzmIL4Q3jBj7it2duxLFeuCa9Wobmm7D"
    ],
    explorer: {
      url: "https://optimistic.etherscan.io",
      apiUrl: "https://api-optimistic.etherscan.io"
    },
    start: 657806,
    logo: "ipfs://QmfF4kwhGL8QosUXvgq2KWCmavhKBvwD6kbhs7L4p5ZAWb"
  },
  "19": {
    key: "19",
    name: "Songbird Canary-Network",
    shortName: "Songbird",
    chainId: 19,
    network: "songbird",
    multicall: "0x17032Ea9c3a13Ed337665145364c0d2aD1108c91",
    rpc: [
      "https://songbird-api.flare.network/ext/C/rpc"
    ],
    explorer: {
      url: "https://songbird-explorer.flare.network"
    },
    start: 21807126,
    logo: "ipfs://QmXyvnrZY8FUxSULfnKKA99sAEkjAHtvhRx5WeHixgaEdu"
  },
  "24": {
    key: "24",
    name: "KardiaChain Mainnet",
    shortName: "KAI",
    chainId: 24,
    network: "mainnet",
    multicall: "0xd9c92F2287B7802A37eC9BEce96Aa65fb5f31E1b",
    rpc: [
      "https://kai-internal.kardiachain.io"
    ],
    explorer: {
      url: "https://explorer.kardiachain.io"
    },
    start: 8260245,
    logo: "ipfs://bafkreig73yfyqzbxydv6e3dbj5nks3f57px2iez7tywayey4rilfhhrr34"
  },
  "25": {
    key: "25",
    name: "Cronos",
    shortName: "Cronos",
    chainId: 25,
    network: "mainnet",
    multicall: "0x6F522a3982e8F9A50A2EDc9E46ed1A3aE2B3FD3a",
    rpc: [
      "https://evm-cronos.crypto.org"
    ],
    explorer: {
      url: "https://cronos.crypto.org/explorer"
    },
    start: 4067,
    logo: "ipfs://QmfSJbtirJoa3Pt7o5Fdm85wbyw9V1hpzqLr5PQbdnfsAj"
  },
  "30": {
    key: "30",
    name: "RSK",
    chainId: 30,
    network: "rsk mainnet",
    multicall: "0x4eeebb5580769ba6d26bfd07be636300076d1831",
    rpc: [
      "https://public-node.rsk.co"
    ],
    explorer: {
      url: "https://explorer.rsk.co"
    },
    start: 2516442,
    logo: "ipfs://QmXTwpE1SqoNZmyY4c3fYWy6qUgQELsyWKbgJo2Pg6K6V9"
  },
  "46": {
    key: "46",
    name: "Darwinia Network",
    shortName: "Darwinia",
    chainId: 46,
    network: "mainnet",
    multicall: "0x67f9ae42EaA9a8aBf065D60ec6Ab3C1A11370607",
    rpc: [
      "https://rpc.darwinia.network"
    ],
    explorer: {
      url: "https://darwinia.subscan.io"
    },
    start: 141853,
    logo: "ipfs://bafkreicf55maidhx46pyu3mwsshlr43xbewr6tkckkonh4nesbkp7krwkm"
  },
  "56": {
    key: "56",
    name: "BNB Smart Chain",
    shortName: "BSC",
    chainId: 56,
    network: "mainnet",
    multicall: "0x1ee38d535d541c55c9dae27b12edf090c608e6fb",
    rpc: [
      "https://speedy-nodes-nyc.moralis.io/b9aed21e7bb7bdeb35972c9a/bsc/mainnet/archive",
      "https://rpc.ankr.com/bsc",
      "https://bsc.getblock.io/mainnet/?api_key=91f8195f-bf46-488f-846a-73d6853790e7",
      "https://bsc-private-dataseed1.nariox.org",
      "https://bsc-dataseed1.ninicoin.io",
      "https://bsc-dataseed1.binance.org"
    ],
    explorer: {
      url: "https://bscscan.com"
    },
    start: 461230,
    logo: "ipfs://bafkreibll4la7wqerzs7zwxjne2j7ayynbg2wlenemssoahxxj5rbt6c64"
  },
  "61": {
    key: "61",
    name: "Ethereum Classic",
    shortName: "Ethereum Classic",
    chainId: 61,
    network: "mainnet",
    multicall: "0x51be3a92C56ae7E207C5b5Fd87F7798Ce82C1AC2",
    rpc: [
      "https://www.ethercluster.com/etc"
    ],
    explorer: {
      url: "https://blockscout.com/etc/mainnet"
    },
    start: 13307544,
    logo: "ipfs://QmVegc28DvA7LjKUFysab81c9BSuN4wQVDQkRXyAtuEBis"
  },
  "66": {
    key: "66",
    name: "OKExChain",
    shortName: "OEC Mainnet",
    chainId: 66,
    network: "oec mainnet",
    multicall: "0x6EB187d8197Ac265c945b69f3c3064A6f3831866",
    rpc: [
      "https://exchainrpc.okex.org"
    ],
    ws: [
      "wss://exchainws.okex.org:8443"
    ],
    explorer: {
      url: "https://www.oklink.com/okexchain"
    },
    start: 5076543,
    logo: "ipfs://Qmd7dKnNwHRZ4HRCbCXUbkNV7gP28fGqPdjbHtjRtT9sQF"
  },
  "75": {
    key: "75",
    name: "Decimal",
    shortName: "mainnet",
    chainId: 75,
    network: "mainnet",
    multicall: "0x949d1A0757803C51F2EfFFEb5472C861A898B8E8",
    rpc: [],
    explorer: {
      url: "https://explorer.decimalchain.com"
    },
    start: 16031065,
    logo: "ipfs://bafkreihkdhbce5rkogl63xegaarlirjrvbfarxbtbf5mqme3s5grvbjyxm"
  },
  "81": {
    key: "81",
    name: "Shibuya Network",
    shortName: "Shibuya",
    chainId: 81,
    network: "testnet",
    testnet: true,
    multicall: "0x3E90A35839ff0Aa32992d33d861f24dC95BBf74d",
    rpc: [
      "https://rpc.shibuya.astar.network:8545"
    ],
    explorer: {
      url: "https://blockscout.com/shibuya"
    },
    start: 856303,
    logo: "ipfs://QmZLQVsUqHBDXutu6ywTvcYXDZG2xBstMfHkfJSzUNpZsc"
  },
  "82": {
    key: "82",
    name: "Meter",
    shortName: "Meter",
    chainId: 82,
    network: "mainnet",
    multicall: "0x579De77CAEd0614e3b158cb738fcD5131B9719Ae",
    rpc: [
      "https://rpc.meter.io"
    ],
    explorer: {
      url: "https://scan.meter.io"
    },
    start: 4992871,
    logo: "ipfs://QmSZvT9w9eUDvV1YVaq3BKKEbubtNVqu1Rin44FuN4wz11"
  },
  "97": {
    key: "97",
    name: "BNB Smart Chain Testnet",
    shortName: "BSC Testnet",
    chainId: 97,
    network: "testnet",
    testnet: true,
    multicall: "0x8b54247c6BAe96A6ccAFa468ebae96c4D7445e46",
    rpc: [
      "https://data-seed-prebsc-1-s1.binance.org:8545",
      "https://speedy-nodes-nyc.moralis.io/f2963e29bec0de5787da3164/bsc/testnet/archive"
    ],
    explorer: {
      url: "https://testnet.bscscan.com"
    },
    start: 3599656,
    logo: "ipfs://bafkreibll4la7wqerzs7zwxjne2j7ayynbg2wlenemssoahxxj5rbt6c64"
  },
  "100": {
    key: "100",
    name: "Gnosis Chain",
    shortName: "xDAI",
    chainId: 100,
    network: "mainnet",
    multicall: "0xb5b692a88bdfc81ca69dcb1d924f59f0413a602a",
    rpc: [
      "https://gno.getblock.io/mainnet/6c1d1e6e-75d9-452f-a863-a694bff93d5c/",
      "https://xdai-archive.blockscout.com",
      "https://poa-xdai.gateway.pokt.network/v1/5f76124fb90218002e9ce985",
      "https://rpc.gnosischain.com"
    ],
    light: [
      "https://rpc.gnosischain.com"
    ],
    ws: [
      "wss://rpc.xdaichain.com/wss"
    ],
    explorer: {
      url: "https://gnosis.blockscout.com"
    },
    start: 4108192,
    logo: "ipfs://QmZeiy8Ax4133wzxUQM9ky8z5XFVf6YLFjJMmTWbWVniZR"
  },
  "108": {
    key: "108",
    name: "Thundercore",
    chainId: 108,
    network: "mainnet",
    multicall: "0x3017086deef56679e267f67f66c4415109b7a97f",
    rpc: [
      "https://mainnet-rpc.thundercore.com/archived/SNAPSHOTEuR82a75fLYA"
    ],
    explorer: {
      url: "https://viewblock.io/thundercore"
    },
    start: 94425385,
    logo: "ipfs://bafkreifc5z5vtvqx2luzgateyvoocwpd2ifv2hwufxdnyl2a767wa6icli"
  },
  "122": {
    key: "122",
    name: "Fuse",
    shortName: "Fuse",
    chainId: 122,
    network: "mainnet",
    multicall: "0x7a59441fb06666F6d2D766393d876945D06a169c",
    rpc: [
      "https://explorer-node.fuse.io/",
      "https://oefusefull1.liquify.info/"
    ],
    explorer: {
      url: "https://explorer.fuse.io"
    },
    start: 11923459,
    logo: "ipfs://QmXjWb64nako7voaVEifgdjAbDbswpTY8bghsiHpv8yWtb"
  },
  "137": {
    key: "137",
    name: "Polygon PoS",
    shortName: "Polygon",
    chainId: 137,
    network: "mainnet",
    multicall: "0xCBca837161be50EfA5925bB9Cc77406468e76751",
    rpc: [
      "https://rpc.ankr.com/polygon",
      "https://speedy-nodes-nyc.moralis.io/b9aed21e7bb7bdeb35972c9a/polygon/mainnet/archive",
      "https://speedy-nodes-nyc.moralis.io/f2963e29bec0de5787da3164/polygon/mainnet/archive",
      "https://rpc-mainnet.maticvigil.com/v1/1cfd7598e5ba6dcf0b4db58e8be484badc6ea08e"
    ],
    ws: [
      "wss://ws-mainnet.matic.network"
    ],
    explorer: {
      url: "https://polygonscan.com",
      apiUrl: "https://api.polygonscan.com"
    },
    start: 9834491,
    logo: "ipfs://bafkreihgr7zy7vi5kqddybfaezwuhvssg57qluwmyan4qq7l57nr7w7wey"
  },
  "144": {
    key: "144",
    name: "PHI Network",
    shortName: "PHI",
    chainId: 144,
    network: "mainnet",
    multicall: "0xc2f41B404a6757863AAeF49ff93039421acCd630",
    rpc: [
      "https://connect.phi.network"
    ],
    explorer: {
      url: "https://phiscan.com"
    },
    start: 360030,
    logo: "ipfs://bafkreid6pm3mic7izp3a6zlfwhhe7etd276bjfsq2xash6a4s2vmcdf65a"
  },
  "148": {
    key: "148",
    name: "ShimmerEVM",
    shortName: "ShimmerEVM",
    chainId: 148,
    network: "mainnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "https://explorer.evm.shimmer.network/"
    },
    start: 1290,
    logo: "ipfs://bafkreib4xhbgbhrwkmizp4d4nz3wzbpyhdm6wpz2v2pbkk7jxsgg3hdt74"
  },
  "169": {
    key: "169",
    name: "Manta Pacific",
    shortName: "Manta",
    chainId: 169,
    network: "mainnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "https://www.oklink.com/manta"
    },
    start: 332890,
    logo: "ipfs://bafkreibbrwgwdcfh755dqh4ndta6tja77qbaa36bfv4pstub6prhhore7a"
  },
  "204": {
    key: "204",
    name: "opBNB",
    shortName: "mainnet",
    chainId: 204,
    network: "mainnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "http://opbnbscan.com/"
    },
    start: 512881,
    logo: "ipfs://bafkreibll4la7wqerzs7zwxjne2j7ayynbg2wlenemssoahxxj5rbt6c64"
  },
  "246": {
    key: "246",
    name: "Energy Web Chain",
    shortName: "EWC",
    chainId: 246,
    network: "mainnet",
    multicall: "0x0767F26d0D568aB61A98b279C0b28a4164A6f05e",
    rpc: [
      "https://voting-rpc.carbonswap.exchange"
    ],
    explorer: {
      url: "https://explorer.energyweb.org"
    },
    start: 12086501,
    logo: "ipfs://Qmai7AGHgs8NpeGeXgbMZz7pS2i4kw44qubCJYGrZW2f3a"
  },
  "250": {
    key: "250",
    name: "Fantom Opera",
    shortName: "fantom",
    chainId: 250,
    network: "Mainnet",
    multicall: "0x7f6A10218264a22B4309F3896745687E712962a0",
    rpc: [
      "https://rpc.ankr.com/fantom",
      "https://rpc.ftm.tools",
      "https://rpcapi.fantom.network"
    ],
    explorer: {
      url: "https://ftmscan.com"
    },
    start: 2497732,
    logo: "ipfs://QmVEgNeQDKnXygeGxfY9FywZpNGQu98ktZtRJ9bToYF6g7"
  },
  "252": {
    key: "252",
    name: "Fraxtal",
    shortName: "mainnet",
    chainId: 252,
    network: "mainnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "https://fraxscan.com"
    },
    start: 1,
    logo: "ipfs://bafkreieflj4wq6tx7k5kq47z3xnsrdrn2xgm4bxa3uovrnndcb2vqqwlyu"
  },
  "269": {
    key: "269",
    name: "High Performance Blockchain",
    shortName: "HPB",
    chainId: 269,
    network: "mainnet",
    multicall: "0x67D0f263aef2F6167FA77353695D75b582Ff4Bca",
    rpc: [
      "https://hpbnode.com"
    ],
    ws: [
      "wss://ws.hpbnode.com"
    ],
    explorer: {
      url: "https://hscan.org"
    },
    start: 13960096,
    logo: "ipfs://QmU7f1MyRz8rLELFfypnWZQjGbDGYgZtC9rjw47jYMYrnu"
  },
  "300": {
    key: "300",
    name: "zkSync Sepolia Testnet",
    shortName: "testnet",
    chainId: 300,
    network: "testnet",
    multicall: "0xF9cda624FBC7e059355ce98a31693d299FACd963",
    rpc: [],
    explorer: {
      url: "https://sepolia.explorer.zksync.dev/"
    },
    start: 2292,
    logo: "ipfs://bafkreih6y7ri7h667cwxe5miisxghfheiidtbw2747y75stoxt3gp3a2yy",
    testnet: true
  },
  "314": {
    key: "314",
    name: "Filecoin",
    shortName: "mainnet",
    chainId: 314,
    network: "mainnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "https://filfox.io"
    },
    start: 3328594,
    logo: "ipfs://bafybeibyvjfmk6aqlfdrczvth55jkmnoadtrch7ht3rdmvqmy2bfxynecm"
  },
  "321": {
    key: "321",
    name: "KCC",
    shortName: "KCC",
    chainId: 321,
    network: "mainnet",
    multicall: "0xa64D6AFb48225BDA3259246cfb418c0b91de6D7a",
    rpc: [
      "https://rpc-mainnet.kcc.network"
    ],
    ws: [
      "wss://rpc-ws-mainnet.kcc.network"
    ],
    explorer: {
      url: "https://explorer.kcc.io"
    },
    start: 1487453,
    logo: "ipfs://QmRdzYGhFRG8QLzMJahHrw3vETE2YZ9sywQbEkenSjKEvb"
  },
  "324": {
    key: "324",
    name: "zkSync Era",
    shortName: "zkSync-era",
    chainId: 324,
    network: "zkSync Era Mainnet",
    multicall: "0xF9cda624FBC7e059355ce98a31693d299FACd963",
    rpc: [
      "https://mainnet.era.zksync.io"
    ],
    explorer: {
      url: "https://explorer.zksync.io/"
    },
    start: 3908235,
    logo: "ipfs://bafkreih6y7ri7h667cwxe5miisxghfheiidtbw2747y75stoxt3gp3a2yy"
  },
  "336": {
    key: "336",
    name: "Shiden Network",
    shortName: "Shiden",
    chainId: 336,
    network: "mainnet",
    multicall: "0x3E90A35839ff0Aa32992d33d861f24dC95BBf74d",
    rpc: [
      "https://rpc.shiden.astar.network:8545",
      "https://shiden.api.onfinality.io/public"
    ],
    explorer: {
      url: "https://blockscout.com/shiden"
    },
    start: 1170016,
    logo: "ipfs://QmcqGQE4Sk73zXc3e91TUFFefKBVeaNgbxV141XkSNE4xj"
  },
  "369": {
    key: "369",
    name: "Pulsechain",
    shortName: "Pulsechain",
    chainId: 369,
    network: "mainnet",
    multicall: "0xdbdd0FD8B16F0092f306392b699D7fbddaA9011B",
    rpc: [
      "https://rpc.pulsechain.com"
    ],
    explorer: {
      url: "https://scan.pulsechain.com/"
    },
    start: 17657774,
    logo: "ipfs://QmWUsiEWdejtHZ9B9981TYXn7Ds8C7fkB1S4h5rP3kCCZR"
  },
  "416": {
    key: "416",
    name: "SX Network",
    shortName: "SX",
    chainId: 416,
    network: "mainnet",
    multicall: "0x834a005DDCF990Ba1a79f259e840e58F2D14F49a",
    rpc: [
      "https://rpc.sx.technology"
    ],
    ws: [
      "wss://rpc.sx.technology/ws"
    ],
    explorer: {
      url: "https://explorer.sx.technology"
    },
    start: 2680605,
    logo: "ipfs://QmSXLXqyr2H6Ja5XrmznXbWTEvF2gFaL8RXNXgyLmDHjAF"
  },
  "592": {
    key: "592",
    name: "Astar Network",
    shortName: "Astar",
    chainId: 592,
    network: "mainnet",
    multicall: "0x3E90A35839ff0Aa32992d33d861f24dC95BBf74d",
    rpc: [
      "https://astar.api.onfinality.io/public",
      "https://rpc.astar.network:8545"
    ],
    explorer: {
      url: "https://blockscout.com/astar"
    },
    start: 366482,
    logo: "ipfs://QmZLQVsUqHBDXutu6ywTvcYXDZG2xBstMfHkfJSzUNpZsc"
  },
  "813": {
    key: "813",
    name: "Qitmeer",
    shortName: "MEER",
    chainId: 813,
    network: "mainnet",
    multicall: "0x55034b2cF530ae3A8fC1e2e4523F58496796610F",
    rpc: [
      "https://evm-dataseed1.meerscan.io",
      "https://evm-dataseed.meerscan.com",
      "https://evm-dataseed2.meerscan.io",
      "https://evm-dataseed3.meerscan.io"
    ],
    explorer: {
      url: "https://evm.meerscan.io"
    },
    start: 43317,
    logo: "ipfs://QmXvum7SNVaAqAc2jNzR1NpNZN1GGvNaKWydg8a1GEDQ7y"
  },
  "841": {
    key: "841",
    name: "Taraxa",
    shortName: "841",
    chainId: 841,
    network: "mainnet",
    multicall: "0xFCe7a3121B42664AaD145712e1c2Bf2e38f60AA1",
    rpc: [
      "https://rpc.mainnet.taraxa.io"
    ],
    ws: [
      "wss://ws.mainnet.taraxa.io"
    ],
    explorer: {
      url: "https://mainnet.explorer.taraxa.io"
    },
    start: 1515906,
    logo: "ipfs://Qmcc6ZCAGESMzZzoj5LsTVcCo2E35x3Ydk71uPJyov6Mwx"
  },
  "888": {
    key: "888",
    name: "Wanchain",
    chainId: 888,
    network: "mainnet",
    multicall: "0xba5934ab3056fca1fa458d30fbb3810c3eb5145f",
    rpc: [
      "https://gwan-ssl.wandevs.org:56891"
    ],
    ws: [
      "wss://api.wanchain.org:8443/ws/v3/ddd16770c68f30350a21114802d5418eafe039b722de52b488e7eee1ee2cd73f"
    ],
    explorer: {
      url: "https://www.wanscan.org"
    },
    start: 11302663,
    logo: "ipfs://QmewFFN44rkxESFsHG8edaLt1znr62hjvZhGynfXqruzX3"
  },
  "1001": {
    key: "1001",
    name: "Klaytn Baobab Testnet",
    shortName: "Boabab",
    chainId: 1001,
    network: "testnet",
    testnet: true,
    multicall: "0x40643B8Aeaaca0b87Ea1A1E596e64a0e14B1d244",
    rpc: [
      "https://archive-en.baobab.klaytn.net"
    ],
    ws: [
      "wss://archive-en.baobab.klaytn.net/ws"
    ],
    explorer: {
      url: "https://baobab.scope.klaytn.com"
    },
    start: 87232478,
    logo: "ipfs://QmYACyZcidcFtMo4Uf9H6ZKUxTP2TQPjGzNjcUjqYa64dt"
  },
  "1072": {
    key: "1072",
    name: "Shimmer EVM Testnet",
    shortName: "ShimmerEVM",
    chainId: 1072,
    network: "testnet",
    testnet: true,
    multicall: "0x751d21047C116413895c259f3f305e38C10B7cF6",
    rpc: [
      "https://archive.evm.testnet.shimmer.network/v1/chains/rms1pr75wa5xuepg2hew44vnr28wz5h6n6x99zptk2g68sp2wuu2karywgrztx3/evm"
    ],
    explorer: {
      url: "https://explorer.evm.testnet.shimmer.network/"
    },
    start: 10614,
    logo: "ipfs://bafkreihtwfwrue7klzedwx4rqlk6agklz4lbbk7owsyw6xzn6c2m4t5tgy"
  },
  "1088": {
    key: "1088",
    name: "Metis",
    shortName: "metis",
    chainId: 1088,
    network: "mainnet",
    multicall: "0xc39aBB6c4451089dE48Cffb013c39d3110530e5C",
    rpc: [
      "https://andromeda.metis.io/?owner=1088"
    ],
    explorer: {
      url: "https://andromeda-explorer.metis.io"
    },
    start: 451,
    logo: "ipfs://bafkreiaqr4atnjpdnk3c4vu4377ai7bzqpgaefefbl5j5imfsvr4puimtu"
  },
  "1101": {
    key: "1101",
    name: "Polygon zkEVM",
    shortName: "mainnet",
    chainId: 1101,
    network: "mainnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "https://zkevm.polygonscan.com"
    },
    start: 57746,
    logo: "ipfs://bafkreibfiyvhqnme2vbxxfcku7qkxgjpkg6ywdkplxh4oxlkqsbznyorfm"
  },
  "1116": {
    key: "1116",
    name: "Core Chain",
    shortName: "Core",
    chainId: 1116,
    network: "mainnet",
    multicall: "0x024f0041b76B598c2A0a75004F8447FaF67BD004",
    rpc: [
      "https://rpcar.coredao.org/"
    ],
    explorer: {
      url: "https://scan.coredao.org"
    },
    start: 853908,
    logo: "ipfs://bafkreigjv5yb7uhlrryzib7j2f73nnwqan2tmfnwjdu26vkk365fyesoiu"
  },
  "1284": {
    key: "1284",
    name: "Moonbeam",
    shortName: "GLMR",
    chainId: 1284,
    network: "mainnet",
    multicall: "0x83e3b61886770de2F64AAcaD2724ED4f08F7f36B",
    rpc: [
      "https://rpc.api.moonbeam.network"
    ],
    explorer: {
      url: "https://moonscan.io/"
    },
    start: 171135,
    logo: "ipfs://QmWKTEK2pj5sBBbHnMHQbWgw6euVdBrk2Ligpi2chrWASk"
  },
  "1285": {
    key: "1285",
    name: "Moonriver (Kusama)",
    shortName: "Moonriver",
    chainId: 1285,
    network: "mainnet",
    multicall: "0x537004440ffFE1D4AE9F009031Fc2b0385FCA9F1",
    rpc: [
      "https://rpc.api.moonriver.moonbeam.network"
    ],
    explorer: {
      url: "https://blockscout.moonriver.moonbeam.network"
    },
    start: 413539,
    logo: "ipfs://QmXtgPesL87Ejhq2Y7yxsaPYpf4RcnoTYPJWPcv6iiYhoi"
  },
  "1287": {
    key: "1287",
    name: "Moonbase Alpha TestNet",
    shortName: "Moonbase",
    chainId: 1287,
    network: "testnet",
    testnet: true,
    multicall: "0xf09FD6B6FF3f41614b9d6be2166A0D07045A3A97",
    rpc: [
      "https://rpc.testnet.moonbeam.network"
    ],
    explorer: {
      url: "https://moonbase-blockscout.testnet.moonbeam.network"
    },
    start: 859041,
    logo: "ipfs://QmeGbNTU2Jqwg8qLTMGW8n8HSi2VdgCncAaeGzLx6gYnD7"
  },
  "1328": {
    key: "1328",
    name: "Sei atlantic testnet",
    shortName: "testnet",
    chainId: 1328,
    network: "testnet",
    multicall: "0xc454132B017b55b427f45078E335549A7124f5f7",
    rpc: [],
    explorer: {
      url: "https://seitrace.com"
    },
    start: 96978658,
    logo: "ipfs://bafkreiammyt7uztbztqbcqv4bydnczsh2fqmnjf6jxj4xnskzzl6sjrigq",
    testnet: true
  },
  "1329": {
    key: "1329",
    name: "Sei",
    shortName: "mainnet",
    chainId: 1329,
    network: "mainnet",
    multicall: "0xe033Bed7cae4114Af84Be1e9F1CA7DEa07Dfe1Cf",
    rpc: [],
    explorer: {
      url: "https://seitrace.com/"
    },
    start: 79164574,
    logo: "ipfs://bafkreiammyt7uztbztqbcqv4bydnczsh2fqmnjf6jxj4xnskzzl6sjrigq"
  },
  "1559": {
    key: "1559",
    name: "Tenet",
    shortName: "tenet",
    chainId: 1559,
    network: "mainnet",
    multicall: "0xcCB3F00bE353950E4C08501ac8Af48765EAAa738",
    rpc: [],
    explorer: {
      url: "https://tenetscan.io"
    },
    start: 944415,
    logo: "ipfs://Qmc1gqjWTzNo4pyFSGtQuCu7kRSZZBUVybtTjHn2nNEEPA"
  },
  "1663": {
    key: "1663",
    name: "Horizen Gobi Testnet",
    shortName: "Gobi",
    chainId: 1663,
    network: "testnet",
    testnet: true,
    multicall: "0xC743e4910Bdd4e5aBacCA38F74cdA270281C5eef",
    rpc: [
      "https://gobi-testnet.horizenlabs.io/ethv1"
    ],
    explorer: {
      url: "https://gobi-explorer.horizen.io"
    },
    start: 1,
    logo: "ipfs://QmUYQdsnkUoiDiQ3WaWrtH7fsc5yQDC7kZJCHmC2qWPTPt"
  },
  "2000": {
    key: "2000",
    name: "Doge Chain",
    shortName: "dogechain",
    chainId: 2e3,
    network: "mainnet",
    multicall: "0x6f9D3f3932B417bd4957585D236Cbc32b32C0BDc",
    rpc: [
      "https://rpc.dogechain.dog"
    ],
    explorer: {
      url: "https://explorer.dogechain.dog"
    },
    start: 877115,
    logo: "ipfs://bafkreigovfh3pinsdih777issfgaflwu2yjzroljs2642gbvwikcd3nm4i"
  },
  "2109": {
    key: "2109",
    name: "Exosama Network",
    shortName: "EXN",
    chainId: 2109,
    network: "mainnet",
    multicall: "0x2feFC828e2fEfdE0C9f7740919c6A9139F886067",
    rpc: [
      "https://rpc.exosama.com"
    ],
    explorer: {
      url: "https://explorer.exosama.com"
    },
    start: 94085,
    logo: "ipfs://QmaQxfwpXYTomUd24PMx5tKjosupXcm99z1jL1XLq9LWBS"
  },
  "2152": {
    key: "2152",
    name: "Findora",
    shortName: "Findora",
    chainId: 2152,
    network: "mainnet",
    multicall: "0xCF7D1e21CBe9bdEF235aef06C5d8051B3d4DF0f5",
    rpc: [
      "https://archive.prod.findora.org:8545/"
    ],
    explorer: {
      url: "https://evm.findorascan.io"
    },
    start: 4219343,
    logo: "ipfs://QmXkneyRB6HbHTHRLCZpZqSsawiyJY7b2kZ2V8ydvKYAgv"
  },
  "2192": {
    key: "2192",
    name: "SnaxChain",
    shortName: "mainnet",
    chainId: 2192,
    network: "mainnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "https://explorer.snaxchain.io"
    },
    start: 1554893,
    logo: "ipfs://bafkreibzz757piho2llzkbiszpvalf5k5hpmxcwhvrmgp7vpz2vp4vj7ly"
  },
  "2221": {
    key: "2221",
    name: "Kava Testnet",
    shortName: "testnet",
    chainId: 2221,
    network: "testnet",
    multicall: "0xc7193EFE367DF0C9349a1149F4E95A2A35604262",
    rpc: [],
    explorer: {
      url: "https://testnet.kavascan.com"
    },
    start: 6193104,
    logo: "ipfs://bafkreibpfubharx32fjqkqbfdhygwdjb2khxdg6meaasrcxsgvowos26f4",
    testnet: true
  },
  "2222": {
    key: "2222",
    name: "Kava",
    shortName: "mainnet",
    chainId: 2222,
    network: "mainnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "https://kavascan.com/"
    },
    start: 3661165,
    logo: "ipfs://bafkreibpfubharx32fjqkqbfdhygwdjb2khxdg6meaasrcxsgvowos26f4"
  },
  "2400": {
    key: "2400",
    name: "TCG Verse",
    shortName: "TCGV",
    chainId: 2400,
    network: "mainnet",
    multicall: "0xceC65DEE0b5012F1b7321b2647681F997c7204FC",
    rpc: [
      "https://rpc.tcgverse.xyz"
    ],
    explorer: {
      url: "https://explorer.tcgverse.xyz"
    },
    start: 57500,
    logo: "ipfs://bafkreidg4wpewve5mdxrofneqblydkrjl3oevtgpdf3fk3z3vjqam6ocoe"
  },
  "2522": {
    key: "2522",
    name: "Fraxtal Testnet",
    shortName: "testnet",
    chainId: 2522,
    network: "testnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "https://holesky.fraxscan.com/"
    },
    start: 1,
    logo: "ipfs://bafkreieflj4wq6tx7k5kq47z3xnsrdrn2xgm4bxa3uovrnndcb2vqqwlyu",
    testnet: true
  },
  "4200": {
    key: "4200",
    name: "Merlin",
    shortName: "merlin",
    chainId: 4200,
    network: "mainnet",
    multicall: "0x830E7E548F4D80947a40A7Cf3a2a53166a0C3980",
    rpc: [],
    explorer: {
      url: "https://scan.merlinchain.io"
    },
    start: 589494,
    logo: "ipfs://bafkreicew2qv3m756m7xs2nrjezinghps7rlessrqjqetvox74w4hov2xe"
  },
  "4337": {
    key: "4337",
    name: "Beam",
    shortName: "Beam",
    chainId: 4337,
    network: "mainnet",
    multicall: "0x4956F15eFdc3dC16645e90Cc356eAFA65fFC65Ec",
    rpc: [],
    explorer: {
      url: "https://subnets.avax.network/beam/"
    },
    start: 1,
    logo: "ipfs://QmaKRLxXPdeTsLx7MFLS3CJbhpSbResgoeL4fCgHB1mTsF"
  },
  "4689": {
    key: "4689",
    name: "IoTeX",
    shortName: "IoTeX",
    chainId: 4689,
    network: "mainnet",
    multicall: "0x9c8B105c94282CDB0F3ecF27e3cfA96A35c07be6",
    rpc: [
      "https://babel-api.mainnet.iotex.io"
    ],
    explorer: {
      url: "https://iotexscan.io"
    },
    start: 11533283,
    logo: "ipfs://QmNkr1UPcBYbvLp7d7Pk4eF3YCsHpaNkfusKZNtykL2EQC"
  },
  "5000": {
    key: "5000",
    name: "Mantle",
    chainId: 5e3,
    network: "mainnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [
      "https://rpc.mantle.xyz"
    ],
    explorer: {
      url: "https://explorer.mantle.xyz"
    },
    start: 304717,
    logo: "ipfs://bafkreidkucwfn4mzo2gtydrt2wogk3je5xpugom67vhi4h4comaxxjzoz4"
  },
  "5555": {
    key: "5555",
    name: "Chain Verse",
    shortName: "ChainVerse",
    chainId: 5555,
    network: "ChainVerse",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [
      "https://rpc.chainverse.info"
    ],
    explorer: {
      url: "https://explorer.chainverse.info"
    },
    start: 6334180,
    logo: "ipfs://QmQyJt28h4wN3QHPXUQJQYQqGiFUD77han3zibZPzHbitk"
  },
  "6102": {
    key: "6102",
    name: "Cascadia Testnet",
    shortName: "Cascadia",
    chainId: 6102,
    network: "testnet",
    multicall: "0x728989819bAD588F193563008E0a03E8cD6a3e4a",
    rpc: [
      "https://testnet.cascadia.foundation"
    ],
    explorer: {
      url: "https://explorer.cascadia.foundation"
    },
    testnet: true,
    start: 370457,
    logo: "ipfs://QmWkhZYhReYyaa5pQXj32hEGxoRcBqarFMcfQScELmjYQj"
  },
  "7332": {
    key: "7332",
    name: "Horizen EON",
    shortName: "EON",
    chainId: 7332,
    network: "mainnet",
    multicall: "0xC743e4910Bdd4e5aBacCA38F74cdA270281C5eef",
    rpc: [],
    explorer: {
      url: "https://eon-explorer.horizenlabs.io"
    },
    start: 85108,
    logo: "ipfs://QmUYQdsnkUoiDiQ3WaWrtH7fsc5yQDC7kZJCHmC2qWPTPt"
  },
  "7341": {
    key: "7341",
    name: "Shyft",
    shortName: "Shyft",
    chainId: 7341,
    network: "mainnet",
    multicall: "0xceb10e9133D771cA93c8002Be527A465E85381a2",
    rpc: [
      "https://rpc.shyft.network"
    ],
    explorer: {
      url: "https://bx.shyft.network"
    },
    start: 3673983,
    logo: "ipfs://bafkreifwxnnfk6koabzmxgcxcwlrwt6b5gijdain2gyqee77q4ajfb7fu4"
  },
  "7560": {
    key: "7560",
    name: "Cyber",
    shortName: "mainnet",
    chainId: 7560,
    network: "mainnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "https://cyberscan.co"
    },
    start: 1731707,
    logo: "ipfs://bafkreifm2bbehoqpz4454o7gixnxfi6cgvqlxigqr3f6ipj7l2omtgfgnm"
  },
  "8217": {
    key: "8217",
    name: "Klaytn Cypress",
    shortName: "Cypress",
    chainId: 8217,
    network: "mainnet",
    multicall: "0x5f5f0d1b9ff8b3dcace308e39b13b203354906e9",
    rpc: [
      "https://archive-en.cypress.klaytn.net"
    ],
    ws: [
      "wss://archive-en.cypress.klaytn.net/ws"
    ],
    explorer: {
      url: "https://scope.klaytn.com"
    },
    start: 91582357,
    logo: "ipfs://QmYACyZcidcFtMo4Uf9H6ZKUxTP2TQPjGzNjcUjqYa64dt"
  },
  "8453": {
    key: "8453",
    name: "Base",
    shortName: "mainnet",
    chainId: 8453,
    network: "mainnet",
    multicall: "0xca11bde05977b3631167028862be2a173976ca11",
    rpc: [],
    explorer: {
      url: "https://basescan.org/"
    },
    start: 5022,
    logo: "ipfs://QmaxRoHpxZd8PqccAynherrMznMufG6sdmHZLihkECXmZv"
  },
  "9001": {
    key: "9001",
    name: "Evmos Network",
    shortName: "Evmos",
    chainId: 9001,
    network: "mainnet",
    multicall: "0x37763d16f8dBf6F185368E0f256350cAb7E24b26",
    rpc: [
      "https://eth.bd.evmos.org:8545"
    ],
    ws: [
      "wss://eth.bd.evmos.org:8546"
    ],
    explorer: {
      url: "https://escan.live"
    },
    start: 13959539,
    logo: "ipfs://bafkreif4obrdoiretpozdd56seziywc6clha7wwkbldng3ovry2bpzly34"
  },
  "10000": {
    key: "10000",
    name: "smartBCH",
    shortName: "BCH",
    chainId: 1e4,
    network: "mainnet",
    multicall: "0x1b38EBAd553f218e2962Cb1C0539Abb5d6A37774",
    rpc: [
      "https://smartbch.greyh.at/"
    ],
    explorer: {
      url: "https://smartbch-explorer.web.app"
    },
    start: 268248,
    logo: "ipfs://QmWG1p7om4hZ4Yi4uQvDpxg4si7qVYhtppGbcDGrhVFvMd"
  },
  "10243": {
    key: "10243",
    name: "Arthera Testnet",
    shortName: "Arthera_",
    chainId: 10243,
    network: "testnet",
    testnet: true,
    multicall: "0x27c7FC597aD2E81C4c1cA1769972f79DaF042Da7",
    rpc: [
      "https://rpc-test.arthera.net"
    ],
    explorer: {
      url: "https://explorer-test.arthera.net"
    },
    start: 10523,
    logo: "ipfs://QmYQp3e52KjkT4bYdAvB6ACEEpXs2D8DozsDitaADRY2Ak"
  },
  "13337": {
    key: "13337",
    name: "Beam Testnet",
    shortName: "testnet",
    chainId: 13337,
    network: "testnet",
    multicall: "0x9BF49b704EE2A095b95c1f2D4EB9010510c41C9E",
    rpc: [],
    explorer: {
      url: "https://subnets-test.avax.network/beam/"
    },
    start: 3,
    logo: "ipfs://QmaKRLxXPdeTsLx7MFLS3CJbhpSbResgoeL4fCgHB1mTsF",
    testnet: true
  },
  "13371": {
    key: "13371",
    name: "Immutable zkEVM",
    shortName: "mainnet",
    chainId: 13371,
    network: "mainnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "https://explorer.immutable.com"
    },
    start: 3680945,
    logo: "ipfs://bafkreiepnhfv3hgexddjpyaeemxo3byhtxxit6t4zsponyczee6ddjqxwi"
  },
  "13473": {
    key: "13473",
    name: "Immutable zkEVM Testnet",
    shortName: "testnet",
    chainId: 13473,
    network: "testnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "https://explorer.testnet.immutable.com"
    },
    start: 5307209,
    logo: "ipfs://bafkreiepnhfv3hgexddjpyaeemxo3byhtxxit6t4zsponyczee6ddjqxwi",
    testnet: true
  },
  "16718": {
    key: "16718",
    name: "AirDAO",
    chainId: 16718,
    network: "mainnet",
    multicall: "0x25e81aC81A8B03389D78CB45faB78353aB528574",
    rpc: [
      "https://network-archive.ambrosus.io"
    ],
    ws: [
      "wss://network-archive.ambrosus.io/ws"
    ],
    explorer: {
      url: "https://airdao.io/explorer"
    },
    start: 22922566,
    logo: "ipfs://QmSxXjvWng3Diz4YwXDV2VqSPgMyzLYBNfkjJcr7rzkxom"
  },
  "29548": {
    key: "29548",
    name: "MCH Verse",
    shortName: "mainnet",
    chainId: 29548,
    network: "mainnet",
    multicall: "0x1d39652386488CE1fE4254E105F5A42a04d43dB2",
    rpc: [],
    explorer: {
      url: "https://explorer.oasys.mycryptoheroes.net"
    },
    start: 27458402,
    logo: "ipfs://QmZZnwR1y6cU1sare2TQmwqkNDLXQxD4GdPrmHLmUoPtbU"
  },
  "33111": {
    key: "33111",
    name: "Curtis",
    shortName: "apechain",
    chainId: 33111,
    network: "testnet",
    multicall: "0xc454132B017b55b427f45078E335549A7124f5f7",
    rpc: [],
    explorer: {
      url: "https://explorer.curtis.apechain.com"
    },
    start: 6661339,
    logo: "ipfs://bafkreicljxttjq2xkgfwwpii5xegirgq2ctrnsjnzelxudjj33qzq65apu",
    testnet: true
  },
  "33139": {
    key: "33139",
    name: "ApeChain",
    shortName: "mainnet",
    chainId: 33139,
    network: "mainnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "https://apechain.calderaexplorer.xyz/"
    },
    start: 20889,
    logo: "ipfs://bafkreielbgcox2jsw3g6pqulqb7pyjgx7czjt6ahnibihaij6lozoy53w4"
  },
  "42161": {
    key: "42161",
    name: "Arbitrum One",
    chainId: 42161,
    network: "Arbitrum mainnet",
    multicall: "0x7A7443F8c577d537f1d8cD4a629d40a3148Dd7ee",
    rpc: [
      "https://rpc.ankr.com/arbitrum",
      "https://speedy-nodes-nyc.moralis.io/9e03baabdc27be2a35bdec4a/arbitrum/mainnet",
      "https://arb-mainnet.g.alchemy.com/v2/JDvtNGwnHhTltIwfnxQocKwKkCTKA1DL"
    ],
    explorer: {
      url: "https://arbiscan.io"
    },
    start: 256508,
    logo: "ipfs://QmWZ5SMRfvcK8tycsDqojQaSiKedgtVkS7CkZdxPgeCVsZ"
  },
  "42170": {
    key: "42170",
    name: "Arbitrum Nova",
    chainId: 42170,
    network: "Arbitrum Nova",
    multicall: "0x4E74EBd9CABff51cE9a43EFe059bA8c5A28E4A14",
    rpc: [
      "https://nova.arbitrum.io/rpc",
      "https://arbitrum-nova.public.blastapi.io"
    ],
    explorer: {
      url: "https://nova.arbiscan.io/"
    },
    start: 6006607,
    logo: "ipfs://bafkreie5xsqt3mrrwu7v32qpmmctibhzhgxf4emfzzddsdhdlfsa7fmplu"
  },
  "42220": {
    key: "42220",
    name: "Celo",
    shortName: "Celo",
    chainId: 42220,
    network: "mainnet",
    multicall: "0xb8d0d2C1391eeB350d2Cd39EfABBaaEC297368D9",
    rpc: [
      "https://celo.snapshot.org",
      "https://forno.celo.org",
      "https://celo-mainnet--rpc.datahub.figment.io/apikey/e892a66dc36e4d2d98a5d6406d609796/"
    ],
    explorer: {
      url: "https://explorer.celo.org"
    },
    start: 6599803,
    logo: "ipfs://QmS2tVJ7rdJRe1NHXAi2L86yCbUwVVrmB2mHQeNdJxvQti"
  },
  "43113": {
    key: "43113",
    name: "Avalanche FUJI Testnet",
    chainId: 43113,
    network: "testnet",
    testnet: true,
    multicall: "0x984476ea55e32e785A9D8FF14329f99D74E3d2A2",
    rpc: [
      "https://api.avax-test.network/ext/bc/C/rpc"
    ],
    explorer: {
      url: "https://testnet.snowtrace.io"
    },
    start: 10528153,
    logo: "ipfs://QmeS75uS7XLR8o8uUzhLRVYPX9vMFf4DXgKxQeCzyy7vM2"
  },
  "43114": {
    key: "43114",
    name: "Avalanche",
    chainId: 43114,
    network: "mainnet",
    multicall: "0x7E9985aE4C8248fdB07607648406a48C76e9e7eD",
    rpc: [
      "https://nd-784-543-849.p2pify.com/aa7b29fc5fed65b34f0ee6b8de33f8c0/ext/bc/C/rpc",
      "https://rpc.ankr.com/avalanche",
      "https://api.avax.network/ext/bc/C/rpc"
    ],
    explorer: {
      url: "https://snowtrace.io"
    },
    start: 536483,
    logo: "ipfs://QmeS75uS7XLR8o8uUzhLRVYPX9vMFf4DXgKxQeCzyy7vM2"
  },
  "47805": {
    key: "47805",
    name: "REI Mainnet",
    chainId: 47805,
    network: "mainnet",
    multicall: "0x9eE9904815B80C39C1a27294E69a8626EAa7952d",
    rpc: [
      "https://rpc.rei.network"
    ],
    explorer: {
      url: "https://scan.rei.network/"
    },
    start: 1715902,
    logo: "ipfs://QmTogMDLmDgJjDjUKDHDuc2KVTVDbXf8bXJLFiVe8PRxgo"
  },
  "53935": {
    key: "53935",
    name: "DFK Chain",
    chainId: 53935,
    network: "mainnet",
    multicall: "0x5b24224dC16508DAD755756639E420817DD4c99E",
    rpc: [
      "https://subnets.avax.network/defi-kingdoms/dfk-chain/rpc"
    ],
    explorer: {
      url: "https://subnets.avax.network/defi-kingdoms/"
    },
    start: 62,
    logo: "ipfs://QmZNkpVgPbuVbDcsi6arwH1om3456FGnwfDqYQJWUfHDEx"
  },
  "59141": {
    key: "59141",
    name: "Linea Sepolia",
    shortName: "testnet",
    chainId: 59141,
    network: "testnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "https://sepolia.lineascan.build/"
    },
    start: 227427,
    logo: "ipfs://bafkreihtyzolub3sejuwc32hpdpjnt7ksowaguni2yuho3kyihhcqrtqce",
    testnet: true
  },
  "59144": {
    key: "59144",
    name: "Linea",
    shortName: "linea",
    chainId: 59144,
    network: "mainnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "https://lineascan.build/"
    },
    start: 42,
    logo: "ipfs://bafkreihtyzolub3sejuwc32hpdpjnt7ksowaguni2yuho3kyihhcqrtqce"
  },
  "80001": {
    key: "80001",
    name: "Polygon Mumbai",
    chainId: 80001,
    network: "testnet",
    testnet: true,
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [
      "https://speedy-nodes-nyc.moralis.io/9e03baabdc27be2a35bdec4a/polygon/mumbai/archive",
      "https://rpc-mumbai.matic.today"
    ],
    ws: [
      "wss://ws-mumbai.matic.today"
    ],
    explorer: {
      url: "https://mumbai.polygonscan.com",
      apiUrl: "https://api-mumbai.polygonscan.com"
    },
    start: 12011090,
    logo: "ipfs://bafkreihgr7zy7vi5kqddybfaezwuhvssg57qluwmyan4qq7l57nr7w7wey"
  },
  "80002": {
    key: "80002",
    name: "Polygon Amoy Testnet",
    shortName: "testnet",
    chainId: 80002,
    network: "testnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "https://amoy.polygonscan.com/"
    },
    start: 3127388,
    logo: "ipfs://bafkreibfiyvhqnme2vbxxfcku7qkxgjpkg6ywdkplxh4oxlkqsbznyorfm",
    testnet: true
  },
  "81457": {
    key: "81457",
    name: "Blast",
    shortName: "mainnet",
    chainId: 81457,
    network: "mainnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "https://blastscan.io"
    },
    start: 88189,
    logo: "ipfs://bafkreicqhrimt2zyp2kvhmbpvffxlmxovkg5vw6zkissyzibcfy45kbvrm"
  },
  "84532": {
    key: "84532",
    name: "Base Sepolia",
    shortName: "testnet",
    chainId: 84532,
    network: "testnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "https://base-sepolia.blockscout.com/"
    },
    start: 1059647,
    logo: "ipfs://QmaxRoHpxZd8PqccAynherrMznMufG6sdmHZLihkECXmZv",
    testnet: true
  },
  "686868": {
    key: "686868",
    name: "Merlin Testnet",
    shortName: "merlin",
    chainId: 686868,
    network: "testnet",
    multicall: "0x758BC6321b7c68F4986d62a4D46E83A2DCb58c80",
    rpc: [],
    explorer: {
      url: "https://testnet-scan.merlinchain.io"
    },
    start: 3562021,
    logo: "ipfs://bafkreicew2qv3m756m7xs2nrjezinghps7rlessrqjqetvox74w4hov2xe",
    testnet: true
  },
  "713715": {
    key: "713715",
    name: "Sei EVM Devnet",
    shortName: "devnet",
    chainId: 713715,
    network: "testnet",
    multicall: "0xEe8d287B844959ADe40d718Dc23077ba920e2f07",
    rpc: [],
    explorer: {
      url: "https://seitrace.com"
    },
    start: 1463669,
    logo: "ipfs://bafkreiammyt7uztbztqbcqv4bydnczsh2fqmnjf6jxj4xnskzzl6sjrigq",
    testnet: true
  },
  "810180": {
    key: "810180",
    name: "zkLink Nova",
    shortName: "zlink",
    chainId: 810180,
    network: "mainnet",
    multicall: "0x825267E0fA5CAe92F98540828a54198dcB3Eaeb5",
    rpc: [],
    explorer: {
      url: "https://explorer.zklink.io"
    },
    start: 146055,
    logo: "ipfs://bafkreic6c3iems5235qapyhyrygha7akqrsfact2nok3y2uhljpzxrdu74"
  },
  "810181": {
    key: "810181",
    name: "zkLink Nova Sepolia",
    shortName: "testnet",
    chainId: 810181,
    network: "testnet",
    multicall: "0x97148F8fDdd9A1620f72EC1Bb2932916623d9da5",
    rpc: [],
    explorer: {
      url: "https://sepolia.explorer.zklink.io/"
    },
    start: 43723,
    logo: "ipfs://bafkreic6c3iems5235qapyhyrygha7akqrsfact2nok3y2uhljpzxrdu74",
    testnet: true
  },
  "11155111": {
    key: "11155111",
    name: "Sepolia testnet",
    shortName: "Sepolia",
    chainId: 11155111,
    network: "sepolia",
    testnet: true,
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [
      "https://sepolia.infura.io/v3/d26b4fd748814fe994b05899fd89e667"
    ],
    ensResolvers: [
      "0x8FADE66B79cC9f707aB26799354482EB93a5B7dD"
    ],
    ensNameWrapper: "0x0635513f179D50A207757E05759CbD106d7dFcE8",
    ensSubgraph: "https://subgrapher.snapshot.org/subgraph/arbitrum/DmMXLtMZnGbQXASJ7p1jfzLUbBYnYUD9zNBTxpkjHYXV",
    explorer: {
      url: "https://sepolia.etherscan.io",
      apiUrl: "https://api-sepolia.etherscan.io"
    },
    start: 751532,
    logo: "ipfs://bafkreid7ndxh6y2ljw2jhbisodiyrhcy2udvnwqgon5wgells3kh4si5z4"
  },
  "11155420": {
    key: "11155420",
    name: "OP Sepolia",
    shortName: "testnet",
    chainId: 11155420,
    network: "testnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "https://sepolia-optimism.etherscan.io"
    },
    start: 1620204,
    logo: "ipfs://QmfF4kwhGL8QosUXvgq2KWCmavhKBvwD6kbhs7L4p5ZAWb",
    testnet: true
  },
  "111557560": {
    key: "111557560",
    name: "Cyber Testnet",
    shortName: "testnet",
    chainId: 111557560,
    network: "testnet",
    multicall: "0xffc391F0018269d4758AEA1a144772E8FB99545E",
    rpc: [],
    explorer: {
      url: "https://testnet.cyberscan.co/"
    },
    start: 304545,
    logo: "ipfs://bafkreifm2bbehoqpz4454o7gixnxfi6cgvqlxigqr3f6ipj7l2omtgfgnm",
    testnet: true
  },
  "168587773": {
    key: "168587773",
    name: "Blast Sepolia",
    shortName: "testnet",
    chainId: 168587773,
    network: "testnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "https://sepolia.blastexplorer.io"
    },
    start: 756690,
    logo: "ipfs://bafkreibfmkjg22cozxppzcoxswj45clvh2rqhxzax57cmmgudbtkf4dkce",
    testnet: true
  },
  "245022926": {
    key: "245022926",
    name: "Neon Devnet",
    shortName: "devnet",
    chainId: 245022926,
    network: "testnet",
    multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    rpc: [],
    explorer: {
      url: "https://devnet.neonscan.org/"
    },
    start: 205206112,
    logo: "ipfs://QmecRPQGa4bU7tybg1sUQY48Md9rWnmhrT6WW5ueqvhg6P",
    testnet: true
  },
  "1313161554": {
    key: "1313161554",
    name: "Aurora",
    shortName: "Aurora",
    chainId: 1313161554,
    network: "mainnet",
    multicall: "0x32b50c286DEFd2932a0247b8bb940b78c063F16c",
    rpc: [
      "https://mainnet.aurora.dev"
    ],
    explorer: {
      url: "https://explorer.mainnet.aurora.dev"
    },
    start: 57190533,
    logo: "ipfs://QmeRhsR1UPRTQCizdhmgr2XxphXebVKU5di97uCV2UMFpa"
  },
  "1666600000": {
    key: "1666600000",
    name: "Harmony",
    shortName: "HarmonyMainnet",
    chainId: 16666e5,
    network: "mainnet",
    multicall: "0x9c31392D2e0229dC4Aa250F043d46B9E82074BF8",
    rpc: [
      "https://a.api.s0.t.hmny.io"
    ],
    ws: [
      "wss://ws.s0.t.hmny.io"
    ],
    explorer: {
      url: "https://explorer.harmony.one"
    },
    start: 10911984,
    logo: "ipfs://QmNnGPr1CNvj12SSGzKARtUHv9FyEfE5nES73U4vBWQSJL"
  },
  "1666700000": {
    key: "1666700000",
    name: "Harmony Testnet",
    shortName: "HarmonyTestnet",
    chainId: 16667e5,
    network: "testnet",
    testnet: true,
    multicall: "0x9923589503Fd205feE3d367DDFF2378f0F7dD2d4",
    rpc: [
      "https://api.s0.b.hmny.io"
    ],
    ws: [
      "wss://ws.s0.b.hmny.io"
    ],
    explorer: {
      url: "https://explorer.pops.one"
    },
    start: 7521509,
    logo: "ipfs://QmNnGPr1CNvj12SSGzKARtUHv9FyEfE5nES73U4vBWQSJL"
  }
};

// node_modules/@snapshot-labs/snapshot.js/src/voting/singleChoice.ts
var SingleChoiceVoting = class _SingleChoiceVoting {
  constructor(proposal, votes, strategies, selected) {
    __publicField(this, "proposal");
    __publicField(this, "votes");
    __publicField(this, "strategies");
    __publicField(this, "selected");
    this.proposal = proposal;
    this.votes = votes;
    this.strategies = strategies;
    this.selected = selected;
  }
  static isValidChoice(voteChoice, proposalChoices) {
    return typeof voteChoice === "number" && (proposalChoices == null ? void 0 : proposalChoices[voteChoice - 1]) !== void 0;
  }
  getValidVotes() {
    return this.votes.filter(
      (vote) => _SingleChoiceVoting.isValidChoice(vote.choice, this.proposal.choices)
    );
  }
  getScores() {
    return this.proposal.choices.map((choice, i) => {
      const votes = this.getValidVotes().filter(
        (vote) => vote.choice === i + 1
      );
      const balanceSum = votes.reduce((a, b) => a + b.balance, 0);
      return balanceSum;
    });
  }
  getScoresByStrategy() {
    return this.proposal.choices.map((choice, i) => {
      const scores = this.strategies.map((strategy, sI) => {
        const votes = this.getValidVotes().filter(
          (vote) => vote.choice === i + 1
        );
        const scoreSum = votes.reduce((a, b) => a + b.scores[sI], 0);
        return scoreSum;
      });
      return scores;
    });
  }
  getScoresTotal() {
    return this.votes.reduce((a, b) => a + b.balance, 0);
  }
  getChoiceString() {
    return this.proposal.choices[this.selected - 1];
  }
};

// node_modules/@snapshot-labs/snapshot.js/src/voting/approval.ts
var ApprovalVoting = class _ApprovalVoting {
  constructor(proposal, votes, strategies, selected) {
    __publicField(this, "proposal");
    __publicField(this, "votes");
    __publicField(this, "strategies");
    __publicField(this, "selected");
    this.proposal = proposal;
    this.votes = votes;
    this.strategies = strategies;
    this.selected = selected;
  }
  static isValidChoice(voteChoice, proposalChoices) {
    return Array.isArray(voteChoice) && // If voteChoice index is not in proposalChoices, return false
    voteChoice.every(
      (choice) => (proposalChoices == null ? void 0 : proposalChoices[choice - 1]) !== void 0
    ) && // If any voteChoice is duplicated, return false
    voteChoice.length === new Set(voteChoice).size;
  }
  getValidVotes() {
    return this.votes.filter(
      (vote) => _ApprovalVoting.isValidChoice(vote.choice, this.proposal.choices)
    );
  }
  getScores() {
    return this.proposal.choices.map(
      (choice, i) => this.getValidVotes().filter((vote) => vote.choice.includes(i + 1)).reduce((a, b) => a + b.balance, 0)
    );
  }
  getScoresByStrategy() {
    return this.proposal.choices.map(
      (choice, i) => this.strategies.map(
        (strategy, sI) => this.getValidVotes().filter((vote) => vote.choice.includes(i + 1)).reduce((a, b) => a + b.scores[sI], 0)
      )
    );
  }
  getScoresTotal() {
    return this.votes.reduce((a, b) => a + b.balance, 0);
  }
  getChoiceString() {
    if (!this.selected) return "";
    return this.proposal.choices.filter((choice, i) => this.selected.includes(i + 1)).join(", ");
  }
};

// node_modules/@snapshot-labs/snapshot.js/src/voting/quadratic.ts
function calcPercentageOfSum(part, wholeArray) {
  const whole = wholeArray.reduce((a, b) => a + b, 0);
  const percent = part / whole;
  return isNaN(percent) ? 0 : percent;
}
function calcSqrt(percentageWeight, votingPower) {
  return Math.sqrt(percentageWeight * votingPower);
}
function calcSquare(num) {
  return num * num;
}
function calcReducedQuadraticScores(percentages, scoresTotal) {
  return percentages.map((p) => scoresTotal * p);
}
var QuadraticVoting = class _QuadraticVoting {
  constructor(proposal, votes, strategies, selected) {
    __publicField(this, "proposal");
    __publicField(this, "votes");
    __publicField(this, "strategies");
    __publicField(this, "selected");
    this.proposal = proposal;
    this.votes = votes;
    this.strategies = strategies;
    this.selected = selected;
  }
  static isValidChoice(voteChoice, proposalChoices) {
    return typeof voteChoice === "object" && !Array.isArray(voteChoice) && voteChoice !== null && // If voteChoice object keys are not in choices, return false
    Object.keys(voteChoice).every(
      (key) => (proposalChoices == null ? void 0 : proposalChoices[Number(key) - 1]) !== void 0
    ) && // If voteChoice object is empty, return false
    Object.keys(voteChoice).length > 0 && // If voteChoice object values have a negative number, return false
    Object.values(voteChoice).every(
      (value) => typeof value === "number" && value >= 0
    ) && // If voteChoice doesn't have any positive value, return false
    Object.values(voteChoice).some(
      (value) => typeof value === "number" && value > 0
    );
  }
  getValidVotes() {
    return this.votes.filter(
      (vote) => _QuadraticVoting.isValidChoice(vote.choice, this.proposal.choices)
    );
  }
  getScores() {
    const validVotes = this.getValidVotes();
    const scoresTotal = this.getValidVotes().reduce(
      (a, b) => a + b.balance,
      0
    );
    const quadraticScores = this.proposal.choices.map((_, i) => {
      const votingPowerSqrt = validVotes.map((vote) => {
        const choiceWeightPercent = calcPercentageOfSum(
          vote.choice[i + 1],
          Object.values(vote.choice)
        );
        return calcSqrt(choiceWeightPercent, vote.balance);
      }).reduce((a, b) => a + b, 0);
      return calcSquare(votingPowerSqrt);
    });
    const percentagesOfScores = quadraticScores.map(
      (_, i) => calcPercentageOfSum(quadraticScores[i], quadraticScores)
    );
    return calcReducedQuadraticScores(percentagesOfScores, scoresTotal);
  }
  getScoresByStrategy() {
    const validVotes = this.getValidVotes();
    const scoresTotal = this.getValidVotes().reduce(
      (a, b) => a + b.balance,
      0
    );
    const quadraticScoresByStrategy = this.proposal.choices.map(
      (_, i) => this.strategies.map(
        (_2, sI) => validVotes.map((vote) => {
          const choiceWeightPercentByStrategy = calcPercentageOfSum(
            vote.choice[i + 1],
            Object.values(vote.choice)
          );
          return calcSqrt(choiceWeightPercentByStrategy, vote.scores[sI]);
        }).reduce((a, b) => a + b, 0)
      )
    ).map((arr) => arr.map((num) => [calcSquare(num)]));
    const reducedQuadraticScores = quadraticScoresByStrategy.map((_, i) => {
      const percentagesOfScores = this.strategies.map(
        (_2, sI) => calcPercentageOfSum(
          quadraticScoresByStrategy[i][sI][0],
          quadraticScoresByStrategy.flat(2)
        )
      );
      return calcReducedQuadraticScores(percentagesOfScores, scoresTotal);
    });
    return reducedQuadraticScores;
  }
  getScoresTotal() {
    return this.votes.reduce((a, b) => a + b.balance, 0);
  }
  getChoiceString() {
    return this.proposal.choices.map((choice, i) => {
      if (this.selected[i + 1]) {
        const percent = calcPercentageOfSum(
          this.selected[i + 1],
          Object.values(this.selected)
        );
        return `${Math.round(percent * 1e3) / 10}% for ${choice}`;
      }
    }).filter((el) => el != null).join(", ");
  }
};

// node_modules/@snapshot-labs/snapshot.js/src/voting/rankedChoice.ts
function irv(ballots, rounds) {
  const candidates = [
    ...new Set(ballots.map((vote) => vote[0]).flat())
  ];
  const votes = Object.entries(
    ballots.reduce((votes2, [v], i, src) => {
      const balance = src[i][1];
      votes2[v[0]][0] += balance;
      const score = src[i][2];
      if (score.length > 1) {
        votes2[v[0]][1] = score.map((s, sI) => s + votes2[v[0]][1][sI] || s);
      } else
        votes2[v[0]][1] = [
          votes2[v[0]][1].concat(score).reduce((a, b) => a + b, 0)
        ];
      return votes2;
    }, Object.assign({}, ...candidates.map((c) => ({ [c]: [0, []] }))))
  );
  const votesWithoutScore = votes.map((vote) => [vote[0], vote[1][0]]);
  const [topCand, topCount] = votesWithoutScore.reduce(
    ([n, m], [v, c]) => c > m ? [v, c] : [n, m],
    ["?", -Infinity]
  );
  const [bottomCand, bottomCount] = votesWithoutScore.reduce(
    ([n, m], [v, c]) => c < m ? [v, c] : [n, m],
    ["?", Infinity]
  );
  const sortedByHighest = votes.sort((a, b) => b[1][0] - a[1][0]);
  const totalPowerOfVotes = ballots.map((bal) => bal[1]).reduce((a, b) => a + b, 0);
  rounds.push({
    round: rounds.length + 1,
    sortedByHighest
  });
  return topCount > totalPowerOfVotes / 2 || sortedByHighest.length < 3 ? rounds : irv(
    ballots.map((ballot) => [
      ballot[0].filter((c) => c != bottomCand),
      ballot[1],
      ballot[2]
    ]).filter((ballot) => ballot[0].length > 0),
    rounds
  );
}
function getFinalRound(votes) {
  const rounds = irv(
    votes.map((vote) => [vote.choice, vote.balance, vote.scores]),
    []
  );
  const finalRound = rounds[rounds.length - 1];
  return finalRound.sortedByHighest;
}
function getScoresMethod(votes, proposal) {
  const finalRound = getFinalRound(votes);
  return proposal.choices.map(
    (choice, i) => finalRound.filter((res) => Number(res[0]) === i + 1).reduce((a, b) => a + b[1][0], 0)
  );
}
var RankedChoiceVoting = class _RankedChoiceVoting {
  constructor(proposal, votes, strategies, selected) {
    __publicField(this, "proposal");
    __publicField(this, "votes");
    __publicField(this, "strategies");
    __publicField(this, "selected");
    this.proposal = proposal;
    this.votes = votes;
    this.strategies = strategies;
    this.selected = selected;
  }
  static isValidChoice(voteChoice, proposalChoices) {
    return Array.isArray(voteChoice) && // If voteChoice index is not in choices, return false
    voteChoice.every(
      (voteChoice2) => (proposalChoices == null ? void 0 : proposalChoices[voteChoice2 - 1]) !== void 0
    ) && // If any voteChoice is duplicated, return false
    voteChoice.length === new Set(voteChoice).size && // If voteChoice is empty, return false
    voteChoice.length > 0 && // If not all proposalChoices are selected, return false
    // TODO: We should add support for pacial bailout in the future
    voteChoice.length === proposalChoices.length;
  }
  getValidVotes() {
    return this.votes.filter(
      (vote) => _RankedChoiceVoting.isValidChoice(vote.choice, this.proposal.choices)
    );
  }
  getScores() {
    return getScoresMethod(this.getValidVotes(), this.proposal);
  }
  getScoresByStrategy() {
    const finalRound = getFinalRound(this.getValidVotes());
    return this.proposal.choices.map(
      (choice, i) => this.strategies.map((strategy, sI) => {
        return finalRound.filter((res) => Number(res[0]) === i + 1).reduce((a, b) => a + b[1][1][sI], 0);
      })
    );
  }
  getScoresTotal() {
    return this.votes.reduce((a, b) => a + b.balance, 0);
  }
  getChoiceString() {
    return this.selected.map((choice) => {
      if (this.proposal.choices[choice - 1])
        return this.proposal.choices[choice - 1];
    }).map((el, i) => `(${getNumberWithOrdinal(i + 1)}) ${el}`).join(", ");
  }
};

// node_modules/@snapshot-labs/snapshot.js/src/voting/weighted.ts
function percentageOfTotal(i, values, total) {
  const reducedTotal = total.reduce((a, b) => a + b, 0);
  const percent = values[i] / reducedTotal * 100;
  return isNaN(percent) ? 0 : percent;
}
function weightedPower(i, choice, balance) {
  return percentageOfTotal(i + 1, choice, Object.values(choice)) / 100 * balance;
}
var WeightedVoting = class _WeightedVoting {
  constructor(proposal, votes, strategies, selected) {
    __publicField(this, "proposal");
    __publicField(this, "votes");
    __publicField(this, "strategies");
    __publicField(this, "selected");
    this.proposal = proposal;
    this.votes = votes;
    this.strategies = strategies;
    this.selected = selected;
  }
  static isValidChoice(voteChoice, proposalChoices) {
    return typeof voteChoice === "object" && !Array.isArray(voteChoice) && voteChoice !== null && // If voteChoice object keys are not in choices, return false
    Object.keys(voteChoice).every(
      (key) => (proposalChoices == null ? void 0 : proposalChoices[Number(key) - 1]) !== void 0
    ) && // If voteChoice object is empty, return false
    Object.keys(voteChoice).length > 0 && // If voteChoice object values have a negative number, return false
    Object.values(voteChoice).every(
      (value) => typeof value === "number" && value >= 0
    ) && // If voteChoice doesn't have any positive value, return false
    Object.values(voteChoice).some(
      (value) => typeof value === "number" && value > 0
    );
  }
  getValidVotes() {
    return this.votes.filter(
      (vote) => _WeightedVoting.isValidChoice(vote.choice, this.proposal.choices)
    );
  }
  getScores() {
    const results = this.proposal.choices.map(
      (choice, i) => this.getValidVotes().map((vote) => weightedPower(i, vote.choice, vote.balance)).reduce((a, b) => a + b, 0)
    );
    const validScoresTotal = this.getValidVotes().reduce(
      (a, b) => a + b.balance,
      0
    );
    return results.map((res, i) => percentageOfTotal(i, results, results)).map((p) => validScoresTotal / 100 * p);
  }
  getScoresByStrategy() {
    const results = this.proposal.choices.map(
      (choice, i) => this.strategies.map(
        (strategy, sI) => this.getValidVotes().map((vote) => weightedPower(i, vote.choice, vote.scores[sI])).reduce((a, b) => a + b, 0)
      )
    ).map((arr) => arr.map((pwr) => [pwr]));
    const validScoresTotal = this.getValidVotes().reduce(
      (a, b) => a + b.balance,
      0
    );
    return results.map(
      (res, i) => this.strategies.map(
        (strategy, sI) => percentageOfTotal(0, results[i][sI], results.flat(2))
      ).map((p) => [validScoresTotal / 100 * p]).flat()
    );
  }
  getScoresTotal() {
    return this.votes.reduce((a, b) => a + b.balance, 0);
  }
  getChoiceString() {
    return this.proposal.choices.map((choice, i) => {
      if (this.selected[i + 1]) {
        return `${Math.round(
          percentageOfTotal(
            i + 1,
            this.selected,
            Object.values(this.selected)
          ) * 10
        ) / 10}% for ${choice}`;
      }
    }).filter((el) => el != null).join(", ");
  }
};

// node_modules/@snapshot-labs/snapshot.js/src/voting/index.ts
var voting_default = {
  "single-choice": SingleChoiceVoting,
  approval: ApprovalVoting,
  quadratic: QuadraticVoting,
  "ranked-choice": RankedChoiceVoting,
  weighted: WeightedVoting,
  basic: SingleChoiceVoting
};

// node_modules/@snapshot-labs/snapshot.js/src/delegationSubgraphs.json
var delegationSubgraphs_default = {
  "1": "https://subgrapher.snapshot.org/delegation/1",
  "10": "https://subgrapher.snapshot.org/delegation/10",
  "56": "https://subgrapher.snapshot.org/delegation/56",
  "100": "https://subgrapher.snapshot.org/delegation/100",
  "137": "https://subgrapher.snapshot.org/delegation/137",
  "250": "https://subgrapher.snapshot.org/delegation/250",
  "8453": "https://subgrapher.snapshot.org/delegation/8453",
  "42161": "https://subgrapher.snapshot.org/delegation/42161",
  "59144": "https://subgrapher.snapshot.org/delegation/59144",
  "11155111": "https://subgrapher.snapshot.org/delegation/11155111"
};

// node_modules/@snapshot-labs/snapshot.js/src/utils/delegation.ts
var SNAPSHOT_SUBGRAPH_URL = delegationSubgraphs_default;
var PAGE_SIZE = 1e3;
async function getDelegatesBySpace(network, space, snapshot = "latest", options = {}) {
  const subgraphUrl = options.subgraphUrl || SNAPSHOT_SUBGRAPH_URL[network];
  if (!subgraphUrl) {
    return Promise.reject(
      `Delegation subgraph not available for network ${network}`
    );
  }
  let pivot = 0;
  const result = /* @__PURE__ */ new Map();
  const spaceIn = space ? buildSpaceIn(space) : null;
  while (true) {
    const newResults = await fetchData({
      url: subgraphUrl,
      spaces: spaceIn,
      pivot,
      snapshot
    });
    if (checkAllDuplicates(newResults)) {
      throw new Error("Unable to paginate delegation");
    }
    newResults.forEach((delegation) => {
      concatUniqueDelegation(result, delegation);
      pivot = delegation.timestamp;
    });
    if (newResults.length < PAGE_SIZE) break;
  }
  return [...result.values()];
}
function checkAllDuplicates(delegations) {
  return delegations.length === PAGE_SIZE && delegations[0].timestamp === delegations[delegations.length - 1].timestamp;
}
function delegationKey(delegation) {
  return `${delegation.delegator}-${delegation.delegate}-${delegation.space}`;
}
function concatUniqueDelegation(result, delegation) {
  const key = delegationKey(delegation);
  if (!result.has(key)) {
    result.set(key, delegation);
  }
}
function buildSpaceIn(space) {
  const spaces = ["", space];
  if (space.includes(".eth")) spaces.push(space.replace(".eth", ""));
  return spaces;
}
async function fetchData({
  url,
  spaces,
  pivot,
  snapshot
}) {
  const params = {
    delegations: {
      __args: {
        where: {
          timestamp_gte: pivot
        },
        first: PAGE_SIZE,
        skip: 0,
        orderBy: "timestamp",
        orderDirection: "asc"
      },
      delegator: true,
      space: true,
      delegate: true,
      timestamp: true
    }
  };
  if (snapshot !== "latest") {
    params.delegations.__args.block = { number: snapshot };
  }
  if (spaces !== null) {
    params.delegations.__args.where.space_in = spaces;
  }
  return (await subgraphRequest(url, params)).delegations || [];
}

// node_modules/@snapshot-labs/snapshot.js/src/utils.ts
var ENS_REGISTRY = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
var ENS_ABI = [
  "function text(bytes32 node, string calldata key) external view returns (string memory)",
  "function resolver(bytes32 node) view returns (address)"
  // ENS registry ABI
];
var EMPTY_ADDRESS = "0x0000000000000000000000000000000000000000";
var STARKNET_NETWORKS = {
  "0x534e5f4d41494e": {
    name: "Starknet",
    testnet: false
  },
  "0x534e5f5345504f4c4941": {
    name: "Starknet Sepolia",
    testnet: true
  }
};
var scoreApiHeaders = {
  Accept: "application/json",
  "Content-Type": "application/json"
};
var DEFAULT_SCORE_API_URL = "https://score.snapshot.org";
function formatScoreAPIUrl(url = DEFAULT_SCORE_API_URL, options = {
  path: ""
}) {
  const scoreURL = new URL(url);
  if (options.path) scoreURL.pathname = options.path;
  const apiKey = scoreURL.searchParams.get("apiKey");
  let headers = { ...scoreApiHeaders };
  if (apiKey) {
    scoreURL.searchParams.delete("apiKey");
    headers = { ...scoreApiHeaders, "X-API-KEY": apiKey };
  }
  return {
    url: scoreURL.toString(),
    headers
  };
}
async function parseScoreAPIResponse(res) {
  let data = await res.text();
  try {
    data = JSON.parse(data);
  } catch (e) {
    return Promise.reject({
      code: res.status || 500,
      message: "Failed to parse response from score API",
      data
    });
  }
  if (data.error) return Promise.reject(data.error);
  return data;
}
var ajv = new import_ajv.default({
  allErrors: true,
  allowUnionTypes: true,
  $data: true,
  passContext: true
});
(0, import_ajv_formats.default)(ajv);
(0, import_ajv_errors.default)(ajv);
ajv.addFormat("address", {
  validate: (value) => {
    try {
      return value === getAddress(value);
    } catch (e) {
      return false;
    }
  }
});
ajv.addFormat("evmAddress", {
  validate: (value) => {
    try {
      getAddress(value);
      return true;
    } catch (e) {
      return false;
    }
  }
});
ajv.addFormat("starknetAddress", {
  validate: (value) => {
    try {
      return validateAndParseAddress(value) === value;
    } catch (e) {
      return false;
    }
  }
});
ajv.addFormat("long", {
  validate: () => true
});
ajv.addFormat("lowercase", {
  validate: (value) => value === value.toLowerCase()
});
ajv.addFormat("color", {
  validate: (value) => {
    if (!value) return false;
    return !!value.match(/^#[0-9A-F]{6}$/);
  }
});
ajv.addFormat("ethValue", {
  validate: (value) => {
    if (!value.match(/^([0-9]|[1-9][0-9]+)(\.[0-9]+)?$/)) return false;
    try {
      parseUnits(value, 18);
      return true;
    } catch {
      return false;
    }
  }
});
var networksIds = Object.keys(networks_default);
var mainnetNetworkIds = Object.keys(networks_default).filter(
  (id) => !networks_default[id].testnet
);
ajv.addKeyword({
  keyword: "snapshotNetwork",
  validate: function(schema, data) {
    const snapshotEnv = this.snapshotEnv || "default";
    if (snapshotEnv === "mainnet") return mainnetNetworkIds.includes(data);
    return networksIds.includes(data);
  },
  error: {
    message: "network not allowed"
  }
});
ajv.addKeyword({
  keyword: "starknetNetwork",
  validate: function(schema, data) {
    const snapshotEnv = this.snapshotEnv || "default";
    if (snapshotEnv === "mainnet") {
      return Object.keys(STARKNET_NETWORKS).filter((id) => !STARKNET_NETWORKS[id].testnet).includes(data);
    }
    return Object.keys(STARKNET_NETWORKS).includes(data);
  },
  error: {
    message: "network not allowed"
  }
});
ajv.addKeyword({
  keyword: "maxLengthWithSpaceType",
  validate: function validate(schema, data) {
    const spaceType = this.spaceType || "default";
    const isValid = data.length <= schema[spaceType];
    if (!isValid) {
      validate.errors = [
        {
          keyword: "maxLengthWithSpaceType",
          message: `must not have more than ${schema[spaceType]}`,
          params: { limit: schema[spaceType] }
        }
      ];
    }
    return isValid;
  },
  errors: true
});
ajv.addKeyword({
  keyword: "maxItemsWithSpaceType",
  validate: function validate2(schema, data) {
    const spaceType = this.spaceType || "default";
    const isValid = data.length <= schema[spaceType];
    if (!isValid) {
      validate2.errors = [
        {
          keyword: "maxItemsWithSpaceType",
          message: `must NOT have more than ${schema[spaceType]} items`,
          params: { limit: schema[spaceType] }
        }
      ];
    }
    return isValid;
  },
  errors: true
});
ajv.addFormat("customUrl", {
  type: "string",
  validate: (str) => {
    if (!str.length) return true;
    return str.startsWith("http://") || str.startsWith("https://") || str.startsWith("ipfs://") || str.startsWith("ipns://") || str.startsWith("snapshot://");
  }
});
async function call(provider, abi, call2, options) {
  const contract = new Contract(call2[0], abi, provider);
  try {
    const params = call2[2] || [];
    return await contract[call2[1]](...params, options || {});
  } catch (e) {
    return Promise.reject(e);
  }
}
async function multicall(network, provider, abi, calls, options) {
  const multicallAbi = [
    "function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)"
  ];
  const multicallAddress = (options == null ? void 0 : options.multicallAddress) || networks_default[network].multicall;
  const multi = new Contract(multicallAddress, multicallAbi, provider);
  const itf = new Interface(abi);
  try {
    const max = (options == null ? void 0 : options.limit) || 500;
    if (options == null ? void 0 : options.limit) delete options.limit;
    const pages = Math.ceil(calls.length / max);
    const promises = [];
    Array.from(Array(pages)).forEach((x, i) => {
      const callsInPage = calls.slice(max * i, max * (i + 1));
      promises.push(
        multi.aggregate(
          callsInPage.map((call2) => [
            call2[0].toLowerCase(),
            itf.encodeFunctionData(call2[1], call2[2])
          ]),
          options || {}
        )
      );
    });
    let results = await Promise.all(promises);
    results = results.reduce((prev, [, res]) => prev.concat(res), []);
    return results.map(
      (call2, i) => itf.decodeFunctionResult(calls[i][1], call2)
    );
  } catch (e) {
    return Promise.reject(e);
  }
}
async function subgraphRequest(url, query, options = {}) {
  const body = { query: (0, import_json_to_graphql_query.jsonToGraphQLQuery)({ query }) };
  if (options.variables) body.variables = options.variables;
  const res = await (0, import_cross_fetch.default)(url, {
    method: "POST",
    headers: {
      Accept: "application/json",
      "Content-Type": "application/json",
      ...options == null ? void 0 : options.headers
    },
    body: JSON.stringify(body)
  });
  let responseData = await res.text();
  try {
    responseData = JSON.parse(responseData);
  } catch (e) {
    throw new Error(
      `Errors found in subgraphRequest: URL: ${url}, Status: ${res.status}, Response: ${responseData.substring(0, 400)}`
    );
  }
  if (responseData.errors) {
    throw new Error(
      `Errors found in subgraphRequest: URL: ${url}, Status: ${res.status},  Response: ${JSON.stringify(responseData.errors).substring(0, 400)}`
    );
  }
  const { data } = responseData;
  return data || {};
}
function getUrl(uri, gateway = gateways_default[0]) {
  const ipfsGateway = `https://${gateway}`;
  if (!uri) return null;
  if (!uri.startsWith("ipfs://") && !uri.startsWith("ipns://") && !uri.startsWith("https://") && !uri.startsWith("http://"))
    return `${ipfsGateway}/ipfs/${uri}`;
  const uriScheme = uri.split("://")[0];
  if (uriScheme === "ipfs")
    return uri.replace("ipfs://", `${ipfsGateway}/ipfs/`);
  if (uriScheme === "ipns")
    return uri.replace("ipns://", `${ipfsGateway}/ipns/`);
  return uri;
}
async function getJSON(uri, options = {}) {
  const url = getUrl(uri, options.gateways);
  return (0, import_cross_fetch.default)(url).then((res) => res.json());
}
async function ipfsGet(gateway, ipfsHash, protocolType = "ipfs") {
  const url = `https://${gateway}/${protocolType}/${ipfsHash}`;
  return (0, import_cross_fetch.default)(url).then((res) => res.json());
}
async function sendTransaction(web3, contractAddress, abi, action, params, overrides = {}) {
  const signer = web3.getSigner();
  const contract = new Contract(contractAddress, abi, web3);
  const contractWithSigner = contract.connect(signer);
  return await contractWithSigner[action](...params, overrides);
}
async function getScores(space, strategies, network, addresses, snapshot = "latest", scoreApiUrl = DEFAULT_SCORE_API_URL, options = {}) {
  if (!Array.isArray(addresses)) {
    return inputError("addresses should be an array of addresses");
  }
  if (addresses.length === 0) {
    return inputError("addresses can not be empty");
  }
  const invalidAddress = addresses.find((address) => !isValidAddress(address));
  if (invalidAddress) {
    return inputError(`Invalid address: ${invalidAddress}`);
  }
  if (!isValidNetwork(network)) {
    return inputError(`Invalid network: ${network}`);
  }
  const invalidStrategy = strategies.find(
    (strategy) => strategy.network && !isValidNetwork(strategy.network)
  );
  if (invalidStrategy) {
    return inputError(
      `Invalid network (${invalidStrategy.network}) in strategy ${invalidStrategy.name}`
    );
  }
  if (!isValidSnapshot(snapshot, network)) {
    return inputError(
      `Snapshot (${snapshot}) must be 'latest' or greater than network start block (${networks_default[network].start})`
    );
  }
  const urlObject = new URL(scoreApiUrl);
  urlObject.pathname = "/api/scores";
  const { url, headers } = formatScoreAPIUrl(scoreApiUrl, {
    path: "/api/scores"
  });
  try {
    const params = {
      space,
      network,
      snapshot,
      strategies,
      addresses
    };
    const res = await (0, import_cross_fetch.default)(url, {
      method: "POST",
      headers,
      body: JSON.stringify({ params })
    });
    const response = await parseScoreAPIResponse(res);
    return options.returnValue === "all" ? response.result : response.result[options.returnValue || "scores"];
  } catch (e) {
    if (e.errno) {
      return Promise.reject({ code: e.errno, message: e.toString(), data: "" });
    }
    return Promise.reject(e);
  }
}
async function getVp(address, network, strategies, snapshot, space, delegation, options) {
  const { url, headers } = formatScoreAPIUrl(options == null ? void 0 : options.url);
  if (!isValidAddress(address)) {
    return inputError(`Invalid voter address: ${address}`);
  }
  if (!isValidNetwork(network)) {
    return inputError(`Invalid network: ${network}`);
  }
  const invalidStrategy = strategies.find(
    (strategy) => strategy.network && !isValidNetwork(strategy.network)
  );
  if (invalidStrategy) {
    return inputError(
      `Invalid network (${invalidStrategy.network}) in strategy ${invalidStrategy.name}`
    );
  }
  if (!isValidSnapshot(snapshot, network)) {
    return inputError(
      `Snapshot (${snapshot}) must be 'latest' or greater than network start block (${networks_default[network].start})`
    );
  }
  const init = {
    method: "POST",
    headers,
    body: JSON.stringify({
      jsonrpc: "2.0",
      method: "get_vp",
      params: {
        address,
        network,
        strategies,
        snapshot,
        space,
        delegation
      }
    })
  };
  try {
    const res = await (0, import_cross_fetch.default)(url, init);
    const response = await parseScoreAPIResponse(res);
    return response.result;
  } catch (e) {
    if (e.errno) {
      return Promise.reject({ code: e.errno, message: e.toString(), data: "" });
    }
    return Promise.reject(e);
  }
}
async function validate3(validation, author, space, network, snapshot, params, options) {
  if (!isValidAddress(author)) {
    return inputError(`Invalid author: ${author}`);
  }
  if (!isValidNetwork(network)) {
    return inputError(`Invalid network: ${network}`);
  }
  if (!isValidSnapshot(snapshot, network)) {
    return inputError(
      `Snapshot (${snapshot}) must be 'latest' or greater than network start block (${networks_default[network].start})`
    );
  }
  if (!options) options = {};
  const { url, headers } = formatScoreAPIUrl(options.url);
  const init = {
    method: "POST",
    headers,
    body: JSON.stringify({
      jsonrpc: "2.0",
      method: "validate",
      params: {
        validation,
        author,
        space,
        network,
        snapshot,
        params
      }
    })
  };
  try {
    const res = await (0, import_cross_fetch.default)(url, init);
    const response = await parseScoreAPIResponse(res);
    return response.result;
  } catch (e) {
    if (e.errno) {
      return Promise.reject({ code: e.errno, message: e.toString(), data: "" });
    }
    return Promise.reject(e);
  }
}
function validateSchema(schema, data, options = {
  snapshotEnv: "default",
  spaceType: "default"
}) {
  const ajvValidate = ajv.compile(schema);
  const valid = ajvValidate.call(options, data);
  return valid ? valid : ajvValidate.errors;
}
async function getEnsTextRecord(ens, record, network = "1", options = {}) {
  var _a, _b;
  const {
    ensResolvers = ((_a = networks_default[network]) == null ? void 0 : _a.ensResolvers) || networks_default["1"].ensResolvers,
    broviderUrl,
    ...multicallOptions
  } = options;
  let ensHash;
  try {
    ensHash = namehash(ensNormalize(ens));
  } catch (e) {
    return null;
  }
  const provider = getProvider(network, { broviderUrl });
  const calls = [
    [ENS_REGISTRY, "resolver", [ensHash]],
    // Query for resolver from registry
    ...ensResolvers.map((address) => [
      address,
      "text",
      [ensHash, record]
    ])
    // Query for text record from each resolver
  ];
  const [[resolverAddress], ...textRecords] = await multicall(
    network,
    provider,
    ENS_ABI,
    calls,
    multicallOptions
  );
  const resolverIndex = ensResolvers.indexOf(resolverAddress);
  return resolverIndex !== -1 ? (_b = textRecords[resolverIndex]) == null ? void 0 : _b[0] : null;
}
async function getSpaceUri(id, network = "1", options = {}) {
  try {
    return await getEnsTextRecord(id, "snapshot", network, options);
  } catch (e) {
    console.log(e);
    return null;
  }
}
async function getEnsOwner(ens, network = "1", options = {}) {
  const provider = getProvider(network, options);
  const ensRegistry = new Contract(
    ENS_REGISTRY,
    ["function owner(bytes32) view returns (address)"],
    provider
  );
  let ensHash;
  try {
    ensHash = namehash(ensNormalize(ens));
  } catch (e) {
    return null;
  }
  const ensNameWrapper = options.ensNameWrapper || networks_default[network].ensNameWrapper;
  let owner = await ensRegistry.owner(ensHash);
  if (owner === ensNameWrapper) {
    const ensNameWrapperContract = new Contract(
      ensNameWrapper,
      ["function ownerOf(uint256) view returns (address)"],
      provider
    );
    owner = await ensNameWrapperContract.ownerOf(ensHash);
  }
  return owner;
}
async function getSpaceController(id, network = "1", options = {}) {
  const spaceUri = await getSpaceUri(id, network, options);
  if (spaceUri) {
    let isUriAddress = isAddress(spaceUri);
    if (isUriAddress) return spaceUri;
    const uriParts = spaceUri.split("/");
    const position = uriParts.includes("testnet") ? 5 : 4;
    const address = uriParts[position];
    isUriAddress = isAddress(address);
    if (isUriAddress) return address;
  }
  return await getEnsOwner(id, network, options);
}
function clone(item) {
  return JSON.parse(JSON.stringify(item));
}
async function sleep(time) {
  return new Promise((resolve) => {
    setTimeout(resolve, time);
  });
}
function getNumberWithOrdinal(n) {
  const s = ["th", "st", "nd", "rd"], v = n % 100;
  return n + (s[(v - 20) % 10] || s[v] || s[0]);
}
function isValidNetwork(network) {
  return !!networks_default[network];
}
function isValidAddress(address) {
  return isAddress(address) && address !== EMPTY_ADDRESS;
}
function isValidSnapshot(snapshot, network) {
  return snapshot === "latest" || typeof snapshot === "number" && snapshot >= networks_default[network].start;
}
function isStarknetAddress(address) {
  if (!address) return false;
  try {
    validateAndParseAddress(address);
    return true;
  } catch (e) {
    return false;
  }
}
function isEvmAddress(address) {
  return isAddress(address);
}
function getFormattedAddress(address, format) {
  if (format === "evm" && isEvmAddress(address)) return getAddress(address);
  if (format === "starknet" && isStarknetAddress(address))
    return validateAndParseAddress(address);
  throw new Error(`Invalid address: ${address}`);
}
function inputError(message) {
  return Promise.reject(new Error(message));
}
var utils_default = {
  call,
  multicall,
  subgraphRequest,
  ipfsGet,
  getUrl,
  getJSON,
  sendTransaction,
  getScores,
  getVp,
  validateSchema,
  getEnsTextRecord,
  getSpaceUri,
  getEnsOwner,
  getSpaceController,
  getDelegatesBySpace,
  clone,
  sleep,
  getNumberWithOrdinal,
  voting: voting_default,
  getProvider,
  signMessage,
  getBlockNumber,
  Multicaller,
  getSnapshots,
  getHash: getHash3,
  verify: verify3,
  validate: validate3,
  isStarknetAddress,
  isEvmAddress,
  getFormattedAddress,
  SNAPSHOT_SUBGRAPH_URL
};
export {
  SNAPSHOT_SUBGRAPH_URL,
  call,
  clone,
  utils_default as default,
  getDelegatesBySpace,
  getEnsOwner,
  getEnsTextRecord,
  getFormattedAddress,
  getJSON,
  getNumberWithOrdinal,
  getScores,
  getSpaceController,
  getSpaceUri,
  getUrl,
  getVp,
  ipfsGet,
  isEvmAddress,
  isStarknetAddress,
  multicall,
  sendTransaction,
  sleep,
  subgraphRequest,
  validate3 as validate,
  validateSchema
};
//# sourceMappingURL=@snapshot-labs_snapshot__js_src_utils.js.map
