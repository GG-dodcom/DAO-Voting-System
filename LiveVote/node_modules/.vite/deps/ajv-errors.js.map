{
  "version": 3,
  "sources": ["../../ajv-errors/src/index.ts"],
  "sourcesContent": ["import type {Plugin, CodeKeywordDefinition, KeywordCxt, ErrorObject, Code} from \"ajv\"\r\nimport Ajv, {_, str, stringify, Name} from \"ajv\"\r\nimport {and, or, not, strConcat} from \"ajv/dist/compile/codegen\"\r\nimport {safeStringify, _Code} from \"ajv/dist/compile/codegen/code\"\r\nimport {getData} from \"ajv/dist/compile/validate\"\r\nimport {reportError} from \"ajv/dist/compile/errors\"\r\nimport N from \"ajv/dist/compile/names\"\r\n\r\ntype ErrorsMap<T extends string | number> = {[P in T]?: ErrorObject[]}\r\n\r\ntype StringMap = {[P in string]?: string}\r\n\r\ntype ErrorMessageSchema = {\r\n  properties?: StringMap\r\n  items?: string[]\r\n  required?: string | StringMap\r\n  dependencies?: string | StringMap\r\n  _?: string\r\n} & {[K in string]?: string | StringMap}\r\n\r\ninterface ChildErrors {\r\n  props?: ErrorsMap<string>\r\n  items?: ErrorsMap<number>\r\n}\r\n\r\nconst keyword = \"errorMessage\"\r\n\r\nconst used: Name = new Name(\"emUsed\")\r\n\r\nconst KEYWORD_PROPERTY_PARAMS = {\r\n  required: \"missingProperty\",\r\n  dependencies: \"property\",\r\n  dependentRequired: \"property\",\r\n}\r\n\r\nexport interface ErrorMessageOptions {\r\n  keepErrors?: boolean\r\n  singleError?: boolean | string\r\n}\r\n\r\nconst INTERPOLATION = /\\$\\{[^}]+\\}/\r\nconst INTERPOLATION_REPLACE = /\\$\\{([^}]+)\\}/g\r\nconst EMPTY_STR = /^\"\"\\s*\\+\\s*|\\s*\\+\\s*\"\"$/g\r\n\r\nfunction errorMessage(options: ErrorMessageOptions): CodeKeywordDefinition {\r\n  return {\r\n    keyword,\r\n    schemaType: [\"string\", \"object\"],\r\n    post: true,\r\n    code(cxt: KeywordCxt) {\r\n      const {gen, data, schema, schemaValue, it} = cxt\r\n      if (it.createErrors === false) return\r\n      const sch: ErrorMessageSchema | string = schema\r\n      const instancePath = strConcat(N.instancePath, it.errorPath)\r\n      gen.if(_`${N.errors} > 0`, () => {\r\n        if (typeof sch == \"object\") {\r\n          const [kwdPropErrors, kwdErrors] = keywordErrorsConfig(sch)\r\n          if (kwdErrors) processKeywordErrors(kwdErrors)\r\n          if (kwdPropErrors) processKeywordPropErrors(kwdPropErrors)\r\n          processChildErrors(childErrorsConfig(sch))\r\n        }\r\n        const schMessage = typeof sch == \"string\" ? sch : sch._\r\n        if (schMessage) processAllErrors(schMessage)\r\n        if (!options.keepErrors) removeUsedErrors()\r\n      })\r\n\r\n      function childErrorsConfig({properties, items}: ErrorMessageSchema): ChildErrors {\r\n        const errors: ChildErrors = {}\r\n        if (properties) {\r\n          errors.props = {}\r\n          for (const p in properties) errors.props[p] = []\r\n        }\r\n        if (items) {\r\n          errors.items = {}\r\n          for (let i = 0; i < items.length; i++) errors.items[i] = []\r\n        }\r\n        return errors\r\n      }\r\n\r\n      function keywordErrorsConfig(\r\n        emSchema: ErrorMessageSchema\r\n      ): [{[K in string]?: ErrorsMap<string>} | undefined, ErrorsMap<string> | undefined] {\r\n        let propErrors: {[K in string]?: ErrorsMap<string>} | undefined\r\n        let errors: ErrorsMap<string> | undefined\r\n\r\n        for (const k in emSchema) {\r\n          if (k === \"properties\" || k === \"items\") continue\r\n          const kwdSch = emSchema[k]\r\n          if (typeof kwdSch == \"object\") {\r\n            propErrors ||= {}\r\n            const errMap: ErrorsMap<string> = (propErrors[k] = {})\r\n            for (const p in kwdSch) errMap[p] = []\r\n          } else {\r\n            errors ||= {}\r\n            errors[k] = []\r\n          }\r\n        }\r\n        return [propErrors, errors]\r\n      }\r\n\r\n      function processKeywordErrors(kwdErrors: ErrorsMap<string>): void {\r\n        const kwdErrs = gen.const(\"emErrors\", stringify(kwdErrors))\r\n        const templates = gen.const(\"templates\", getTemplatesCode(kwdErrors, schema))\r\n        gen.forOf(\"err\", N.vErrors, (err) =>\r\n          gen.if(matchKeywordError(err, kwdErrs), () =>\r\n            gen.code(_`${kwdErrs}[${err}.keyword].push(${err})`).assign(_`${err}.${used}`, true)\r\n          )\r\n        )\r\n        const {singleError} = options\r\n        if (singleError) {\r\n          const message = gen.let(\"message\", _`\"\"`)\r\n          const paramsErrors = gen.let(\"paramsErrors\", _`[]`)\r\n          loopErrors((key) => {\r\n            gen.if(message, () =>\r\n              gen.code(_`${message} += ${typeof singleError == \"string\" ? singleError : \";\"}`)\r\n            )\r\n            gen.code(_`${message} += ${errMessage(key)}`)\r\n            gen.assign(paramsErrors, _`${paramsErrors}.concat(${kwdErrs}[${key}])`)\r\n          })\r\n          reportError(cxt, {message, params: _`{errors: ${paramsErrors}}`})\r\n        } else {\r\n          loopErrors((key) =>\r\n            reportError(cxt, {\r\n              message: errMessage(key),\r\n              params: _`{errors: ${kwdErrs}[${key}]}`,\r\n            })\r\n          )\r\n        }\r\n\r\n        function loopErrors(body: (key: Name) => void): void {\r\n          gen.forIn(\"key\", kwdErrs, (key) => gen.if(_`${kwdErrs}[${key}].length`, () => body(key)))\r\n        }\r\n\r\n        function errMessage(key: Name): Code {\r\n          return _`${key} in ${templates} ? ${templates}[${key}]() : ${schemaValue}[${key}]`\r\n        }\r\n      }\r\n\r\n      function processKeywordPropErrors(kwdPropErrors: {[K in string]?: ErrorsMap<string>}): void {\r\n        const kwdErrs = gen.const(\"emErrors\", stringify(kwdPropErrors))\r\n        const templatesCode: [string, Code][] = []\r\n        for (const k in kwdPropErrors) {\r\n          templatesCode.push([\r\n            k,\r\n            getTemplatesCode(kwdPropErrors[k] as ErrorsMap<string>, schema[k]),\r\n          ])\r\n        }\r\n        const templates = gen.const(\"templates\", gen.object(...templatesCode))\r\n\r\n        const kwdPropParams = gen.scopeValue(\"obj\", {\r\n          ref: KEYWORD_PROPERTY_PARAMS,\r\n          code: stringify(KEYWORD_PROPERTY_PARAMS),\r\n        })\r\n        const propParam = gen.let(\"emPropParams\")\r\n        const paramsErrors = gen.let(\"emParamsErrors\")\r\n\r\n        gen.forOf(\"err\", N.vErrors, (err) =>\r\n          gen.if(matchKeywordError(err, kwdErrs), () => {\r\n            gen.assign(propParam, _`${kwdPropParams}[${err}.keyword]`)\r\n            gen.assign(paramsErrors, _`${kwdErrs}[${err}.keyword][${err}.params[${propParam}]]`)\r\n            gen.if(paramsErrors, () =>\r\n              gen.code(_`${paramsErrors}.push(${err})`).assign(_`${err}.${used}`, true)\r\n            )\r\n          })\r\n        )\r\n\r\n        gen.forIn(\"key\", kwdErrs, (key) =>\r\n          gen.forIn(\"keyProp\", _`${kwdErrs}[${key}]`, (keyProp) => {\r\n            gen.assign(paramsErrors, _`${kwdErrs}[${key}][${keyProp}]`)\r\n            gen.if(_`${paramsErrors}.length`, () => {\r\n              const tmpl = gen.const(\r\n                \"tmpl\",\r\n                _`${templates}[${key}] && ${templates}[${key}][${keyProp}]`\r\n              )\r\n              reportError(cxt, {\r\n                message: _`${tmpl} ? ${tmpl}() : ${schemaValue}[${key}][${keyProp}]`,\r\n                params: _`{errors: ${paramsErrors}}`,\r\n              })\r\n            })\r\n          })\r\n        )\r\n      }\r\n\r\n      function processChildErrors(childErrors: ChildErrors): void {\r\n        const {props, items} = childErrors\r\n        if (!props && !items) return\r\n        const isObj = _`typeof ${data} == \"object\"`\r\n        const isArr = _`Array.isArray(${data})`\r\n        const childErrs = gen.let(\"emErrors\")\r\n        let childKwd: Name\r\n        let childProp: Code\r\n        const templates = gen.let(\"templates\")\r\n        if (props && items) {\r\n          childKwd = gen.let(\"emChildKwd\")\r\n          gen.if(isObj)\r\n          gen.if(\r\n            isArr,\r\n            () => {\r\n              init(items, schema.items)\r\n              gen.assign(childKwd, str`items`)\r\n            },\r\n            () => {\r\n              init(props, schema.properties)\r\n              gen.assign(childKwd, str`properties`)\r\n            }\r\n          )\r\n          childProp = _`[${childKwd}]`\r\n        } else if (items) {\r\n          gen.if(isArr)\r\n          init(items, schema.items)\r\n          childProp = _`.items`\r\n        } else if (props) {\r\n          gen.if(and(isObj, not(isArr)))\r\n          init(props, schema.properties)\r\n          childProp = _`.properties`\r\n        }\r\n\r\n        gen.forOf(\"err\", N.vErrors, (err) =>\r\n          ifMatchesChildError(err, childErrs, (child) =>\r\n            gen.code(_`${childErrs}[${child}].push(${err})`).assign(_`${err}.${used}`, true)\r\n          )\r\n        )\r\n\r\n        gen.forIn(\"key\", childErrs, (key) =>\r\n          gen.if(_`${childErrs}[${key}].length`, () => {\r\n            reportError(cxt, {\r\n              message: _`${key} in ${templates} ? ${templates}[${key}]() : ${schemaValue}${childProp}[${key}]`,\r\n              params: _`{errors: ${childErrs}[${key}]}`,\r\n            })\r\n            gen.assign(\r\n              _`${N.vErrors}[${N.errors}-1].instancePath`,\r\n              _`${instancePath} + \"/\" + ${key}.replace(/~/g, \"~0\").replace(/\\\\//g, \"~1\")`\r\n            )\r\n          })\r\n        )\r\n\r\n        gen.endIf()\r\n\r\n        function init<T extends string | number>(\r\n          children: ErrorsMap<T>,\r\n          msgs: {[K in string]?: string}\r\n        ): void {\r\n          gen.assign(childErrs, stringify(children))\r\n          gen.assign(templates, getTemplatesCode(children, msgs))\r\n        }\r\n      }\r\n\r\n      function processAllErrors(schMessage: string): void {\r\n        const errs = gen.const(\"emErrs\", _`[]`)\r\n        gen.forOf(\"err\", N.vErrors, (err) =>\r\n          gen.if(matchAnyError(err), () =>\r\n            gen.code(_`${errs}.push(${err})`).assign(_`${err}.${used}`, true)\r\n          )\r\n        )\r\n        gen.if(_`${errs}.length`, () =>\r\n          reportError(cxt, {\r\n            message: templateExpr(schMessage),\r\n            params: _`{errors: ${errs}}`,\r\n          })\r\n        )\r\n      }\r\n\r\n      function removeUsedErrors(): void {\r\n        const errs = gen.const(\"emErrs\", _`[]`)\r\n        gen.forOf(\"err\", N.vErrors, (err) =>\r\n          gen.if(_`!${err}.${used}`, () => gen.code(_`${errs}.push(${err})`))\r\n        )\r\n        gen.assign(N.vErrors, errs).assign(N.errors, _`${errs}.length`)\r\n      }\r\n\r\n      function matchKeywordError(err: Name, kwdErrs: Name): Code {\r\n        return and(\r\n          _`${err}.keyword !== ${keyword}`,\r\n          _`!${err}.${used}`,\r\n          _`${err}.instancePath === ${instancePath}`,\r\n          _`${err}.keyword in ${kwdErrs}`,\r\n          // TODO match the end of the string?\r\n          _`${err}.schemaPath.indexOf(${it.errSchemaPath}) === 0`,\r\n          _`/^\\\\/[^\\\\/]*$/.test(${err}.schemaPath.slice(${it.errSchemaPath.length}))`\r\n        )\r\n      }\r\n\r\n      function ifMatchesChildError(\r\n        err: Name,\r\n        childErrs: Name,\r\n        thenBody: (child: Name) => void\r\n      ): void {\r\n        gen.if(\r\n          and(\r\n            _`${err}.keyword !== ${keyword}`,\r\n            _`!${err}.${used}`,\r\n            _`${err}.instancePath.indexOf(${instancePath}) === 0`\r\n          ),\r\n          () => {\r\n            const childRegex = gen.scopeValue(\"pattern\", {\r\n              ref: /^\\/([^/]*)(?:\\/|$)/,\r\n              code: _`new RegExp(\"^\\\\\\/([^/]*)(?:\\\\\\/|$)\")`,\r\n            })\r\n            const matches = gen.const(\r\n              \"emMatches\",\r\n              _`${childRegex}.exec(${err}.instancePath.slice(${instancePath}.length))`\r\n            )\r\n            const child = gen.const(\r\n              \"emChild\",\r\n              _`${matches} && ${matches}[1].replace(/~1/g, \"/\").replace(/~0/g, \"~\")`\r\n            )\r\n            gen.if(_`${child} !== undefined && ${child} in ${childErrs}`, () => thenBody(child))\r\n          }\r\n        )\r\n      }\r\n\r\n      function matchAnyError(err: Name): Code {\r\n        return and(\r\n          _`${err}.keyword !== ${keyword}`,\r\n          _`!${err}.${used}`,\r\n          or(\r\n            _`${err}.instancePath === ${instancePath}`,\r\n            and(\r\n              _`${err}.instancePath.indexOf(${instancePath}) === 0`,\r\n              _`${err}.instancePath[${instancePath}.length] === \"/\"`\r\n            )\r\n          ),\r\n          _`${err}.schemaPath.indexOf(${it.errSchemaPath}) === 0`,\r\n          _`${err}.schemaPath[${it.errSchemaPath}.length] === \"/\"`\r\n        )\r\n      }\r\n\r\n      function getTemplatesCode(keys: Record<string, any>, msgs: {[K in string]?: string}): Code {\r\n        const templatesCode: [string, Code][] = []\r\n        for (const k in keys) {\r\n          const msg = msgs[k] as string\r\n          if (INTERPOLATION.test(msg)) templatesCode.push([k, templateFunc(msg)])\r\n        }\r\n        return gen.object(...templatesCode)\r\n      }\r\n\r\n      function templateExpr(msg: string): Code {\r\n        if (!INTERPOLATION.test(msg)) return stringify(msg)\r\n        return new _Code(\r\n          safeStringify(msg)\r\n            .replace(\r\n              INTERPOLATION_REPLACE,\r\n              (_s, ptr) => `\" + JSON.stringify(${getData(ptr, it)}) + \"`\r\n            )\r\n            .replace(EMPTY_STR, \"\")\r\n        )\r\n      }\r\n\r\n      function templateFunc(msg: string): Code {\r\n        return _`function(){return ${templateExpr(msg)}}`\r\n      }\r\n    },\r\n    metaSchema: {\r\n      anyOf: [\r\n        {type: \"string\"},\r\n        {\r\n          type: \"object\",\r\n          properties: {\r\n            properties: {$ref: \"#/$defs/stringMap\"},\r\n            items: {$ref: \"#/$defs/stringList\"},\r\n            required: {$ref: \"#/$defs/stringOrMap\"},\r\n            dependencies: {$ref: \"#/$defs/stringOrMap\"},\r\n          },\r\n          additionalProperties: {type: \"string\"},\r\n        },\r\n      ],\r\n      $defs: {\r\n        stringMap: {\r\n          type: \"object\",\r\n          additionalProperties: {type: \"string\"},\r\n        },\r\n        stringOrMap: {\r\n          anyOf: [{type: \"string\"}, {$ref: \"#/$defs/stringMap\"}],\r\n        },\r\n        stringList: {type: \"array\", items: {type: \"string\"}},\r\n      },\r\n    },\r\n  }\r\n}\r\n\r\nconst ajvErrors: Plugin<ErrorMessageOptions> = (\r\n  ajv: Ajv,\r\n  options: ErrorMessageOptions = {}\r\n): Ajv => {\r\n  if (!ajv.opts.allErrors) throw new Error(\"ajv-errors: Ajv option allErrors must be true\")\r\n  if (ajv.opts.jsPropertySyntax) {\r\n    throw new Error(\"ajv-errors: ajv option jsPropertySyntax is not supported\")\r\n  }\r\n  return ajv.addKeyword(errorMessage(options))\r\n}\r\n\r\nexport default ajvErrors\r\nmodule.exports = ajvErrors\r\nmodule.exports.default = ajvErrors\r\n"],
  "mappings": "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",
  "names": []
}
