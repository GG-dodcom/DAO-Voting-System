import * as unplugin from 'unplugin';
import { ResolverReturnType, Resolvers, GenerateDtsOptions, BaseResolverOptions, SearchGlobOptions, Components, TransformOptions, Options as Options$1 } from './types.js';
import 'magic-string';
import '@rollup/pluginutils';

declare const resolversType: Set<ResolverReturnType[]>;
declare const getResolversResult: (resolvers: Resolvers) => Promise<Set<ResolverReturnType[]> | undefined>;

declare function generateDts(options: GenerateDtsOptions): Promise<string>;

interface CreateResolverOptions {
    prefix: string;
    module: string;
    exclude?: (name: string) => boolean;
    style?: boolean;
}
declare function createResolver<T extends BaseResolverOptions = BaseResolverOptions>(_options: CreateResolverOptions): (options?: T) => Promise<() => ResolverReturnType[]>;

interface MuiResolverOptions extends BaseResolverOptions {
}
declare const MuiResolver: (options?: MuiResolverOptions) => Promise<() => ResolverReturnType[]>;

interface Options extends BaseResolverOptions {
}
declare const AntdResolver: (options?: Options) => Promise<() => ResolverReturnType[]>;

declare function searchGlob(options: SearchGlobOptions): Components;

declare function transform(options: TransformOptions): Promise<string>;

declare const _default: unplugin.UnpluginInstance<Options$1>;

export { AntdResolver, MuiResolver, createResolver, _default as default, generateDts, getResolversResult, resolversType, searchGlob, transform };
